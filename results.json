[
	{
		"page": {
			"title": "Welcome to highlight.io",
			"breadcrumbs": "Docs / Highlight Docs / Welcome to highlight.io",
			"content": "highlight.io is monitoring software for the next generation of developers. And it's all open source :).\nhighlight.io gives you fullstack visibility into your application by pairing session replay, error monitoring, and logging, allowing you to tie frontend issues with backend logs and performance issues.\nWhen highlight.io is fully integrated, this is what it looks like:\n\nAnd to get started:\nGet StartedGet started with highlight.io. Instrument your frontend & backend.\nAbout us\nMission & Values.Details about our company, our values, and open source.Compliance & Security.Our security certificates, and contact details.Contributing to highlight.ioOpen source, self hosting highlight, and contributing.Self hosting highlight.ioOpen source, self hosting highlight, and contributing.\nFeatures\nSession Replay.Session replay features, how to get started, etc..Error Monitoring.Error monitoring features, how to get started, etc..Logging.Logging features, how to get started, etc.."
		}
	},
	{
		"page": {
			"title": "Get Started",
			"breadcrumbs": "Docs / Highlight Docs / Get Started",
			"content": "Get StartedIntegrate highlight.io into your web app."
		}
	},
	{
		"page": {
			"title": "Our Public Roadmap",
			"breadcrumbs": "Docs / Highlight Docs / Roadmap",
			"content": "Read about what we’re considering, what we have planned, and what we’re building!\nFeature RequestView on GitHubUnder ConsiderationThe features and improvements on our radar. Feel free to contribute.Session Replaywebgl / canvas recording at dynamic bitrate via webrtc #4517👍5Vote on GitHubError MonitoringImprove error search experience #4693👍1Vote on GitHubSupport for searching issues when creating them #4460❤️1🚀1Vote on GitHubLink to session errors feed from session #4474❤️1👍1🚀1Vote on GitHubLoggingUX for declaring searchable/indexed fields on logs #4658👍1Vote on GitHubFilter log lines by user details #4680Vote on GitHubFuture WorkSending and Visualizing Metrics #4447👍3Vote on GitHubSending and Visualizing Traces #4446❤️10🚀1Vote on GitHubMobile + React Native Session Recording #4444👀3👍36🚀5❤️3🎉3Vote on GitHubIn ProgressCheck out what we're currently bringing to life.Error MonitoringSupport multiple sourcemap paths in `sourcemap-uploader` #4463👍1🚀1🎉1Vote on GitHubLoggingOutstanding SDK Support #4452👍1👀1Vote on GitHubLogging Exporter Support #4450❤️1Vote on GitHubShipped 🚢What we've delivered so far.Session ReplayWebsocket message recording #4403👀1❤️4🚀2Read the ChangelogPrivacy SDK Improvements #4461👍4🚀2👀2Read the ChangelogReplace client fingerprint.js implementation with generated client ID #4475🎉1🚀1Read the ChangelogAdd a \"goto\" for each resource in the devtools tab #4512Read the ChangelogAdd new filters/fields to network requests #4456👍1❤️1Read the ChangelogError Monitoringnext.js sdk should trace ISR `getStaticProps` invocations and errors #4774Read the ChangelogGitHub integration for creating issues #4459👍1Read the ChangelogError Boundary Updates & Enhancements #4288❤️1🎉1Read the ChangelogLoggingLog Alerting & Visualization #4451👍2😄1Read the ChangelogLog Search #4454❤️1Read the ChangelogLogging SDK Support #4449👍1👀1Read the Changelog"
		}
	},
	{
		"page": {
			"title": "Values",
			"breadcrumbs": "Docs / Highlight Docs / Company / Values",
			"content": "Overview\nThis doc acts as a reference for our values at highlight.io, which includes how we work and we build things. It acts a way for us to understand how we should operate and what the \"startup mentality\" means to us. If you'd like to learn more about our product philosophy (which is more related to our product) see this doc.\nWe build in public.\nWith everything we build, we maintain an unwavering promise to use open source technologies so that you and your team don't have a dependency on our hosted offerings.\nWe strive to build in public in every way we can. This means sharing our roadmap, product specs, and company strategy. We see this as giving you all the more reason to consider joining us in building highlight.\nWe execute quickly and fail fast.\nGiven that most of the things we build are zero to one, there's often no better way to learn than to build. It's hard to predict how something will scale or be interacted w/ without building something and getting early feedback. With this philosophy, however, it's easy to ship low quality work. To address this, we always prefer to \"cut scope, not quality\"; we build out a few, very polished modules rather than many half-baked ones.\nABC: Always be chilling....\nThough working at highlight.io can be fast-paced at times, we keep it chill. This means aking time for social events, taking time off, and learning about each other beyond just work. We're all humans, and we all have lives outside of work.\n"
		}
	},
	{
		"page": {
			"title": "Compliance & Security",
			"breadcrumbs": "Docs / Highlight Docs / Company / Compliance & Security",
			"content": "Security Certifications\nWe take compliance and security very seriously at highlight.io. We officially have a SOC 2 Type2 report, GDPR compliance and are currently in the process of attaining HIPAA.\n\nRequesting information\nIf you're evaluating highlight.io at your company and want to request documentation of any of our certifications, request a DPA, or have questions on the security end, please shoot us an email at security@highlight.io.\nSubprocessors\nBelow is a list of our subprocessors:\nSubprocessorProcessing UsageCountry of locationAmazon Web Services (AWS)Data hosting and processingUSAGoogleData StorageUSAMixpanelAnalyticsUSAHubspotCRM, Marketing AutomationUSAIntercomSupport ServicesUSASendgridEmail DeliveryUSADatadogMetricsUSAStripePayment ProcessingUSAClickhouseData storageUSA\nAvoiding Cookie Consent (disabling localStorage)\nIf you're using the highlight.io browser client and would like to avoid requesting cookie consent from your users,\nyou can pass the storageMode: 'sessionStorage' option to H.init to make sure that highlight will not persist\nany data in window.localStorage. This will mean that if a user leaves your site and returns later, a new\nhighlight recording will start regardless of the time since they left,\nsince we will not persist any metadata in the browser."
		}
	},
	{
		"page": {
			"title": "Contributing Overview",
			"breadcrumbs": "Docs / Highlight Docs / Company / Open Source / Contributing / Overview",
			"content": "How do I spin up highlight.io locally?\nLocal Development Guide.Running a docker version of highlight.io for development.GitHub Code Spaces GuideRunning highlight.io in a Code Spaces environment.\nWhat is the app architecture?\nApp ArchitectureOverall architecture guide.SDK DesignAdding an SDK.\nHow do I develop in ...?\nFrontendFrontend React.js development for app.highlight.io.BackendBackend GraphQL development for app.highlight.io.Landing SiteFrontend Next.js development for highlight.io landing site.DocsFrontend Next.js development for highlight.io/docs\nWhat are development best practices?\nGood First IssuesGood first issues to start with.Code StyleDefining our code styles."
		}
	},
	{
		"page": {
			"title": "GraphQL Backend",
			"breadcrumbs": "Docs / Highlight Docs / Company / Open Source / Contributing / GraphQL Backend",
			"content": "Frequently Asked Questions\nHow do I migrate schema changes to PostgreSQL?\nSchema changes to model.go will be automigrated. New tables should be added to Models. Migrations happen automatically in dev and in a GitHub action as part of our production deploy.\nHow do I inspect the PostgreSQL database?\ncd docker;\ndocker compose exec postgres psql -h localhost -U postgres postgres;\n\nwill put you in a postgresql cli connected to your local postgres docker container.\nRun commands such as \\d to list all tables, \\d projects to describe the schema of a\ntable (i.e. projects), or show * from sessions to look at data (i.e. rows in the sessions table).\nHow to generate the GraphQL server definitions?\nPer the Makefile, cd backend; make private-gen for changes to private schema.graphqls and cd backend; make public-gen for changes to public schema.graphqls. The commands can also be executed inside docker:\ncd backend;\nmake private-gen;\nmake public-gen;\n"
		}
	},
	{
		"page": {
			"title": "Frontend (app.highlight.io)",
			"breadcrumbs": "Docs / Highlight Docs / Company / Open Source / Contributing / Frontend (app.highlight.io)",
			"content": "Frequently Asked Questions\nHow do I change the Apollo Client GraphQL definitions?\nThe frontend is set up to host the Apollo Client definitions in frontend/src/graph/operators. Query definitions reside in query.gql while mutation definitions reside in mutation.gql.\nChanging these two files regenerates frontend hooks and other Typescript definitions. Having the frontend running will watch these two files for changes and update generated code. See the development docs for more info on running the frontend."
		}
	},
	{
		"page": {
			"title": "Landing Site (highlight.io)",
			"breadcrumbs": "Docs / Highlight Docs / Company / Open Source / Contributing / Landing Site (highlight.io)",
			"content": "Getting Started\nThe documentation rendered on https://highlight.io/docs is rendered from the docs-content directory. The code for rendering the landing page resides in highlight.io directory.\nTo run the app locally, install dependencies and call yarn dev as follows:\nyarn install;\nyarn dev:highlight.io;\nopen http://localhost:4000/\n\nChanges to docs-content may require refreshing the browser.\nFrequently Asked Questions\nHow do I test the blog locally?\nBlog posts rely on Hygraph for rendering and use an environment variable. Reach our on our discord if you need to work on the blog."
		}
	},
	{
		"page": {
			"title": "Documentation",
			"breadcrumbs": "Docs / Highlight Docs / Company / Open Source / Contributing / Documentation",
			"content": "Getting Started\nThe documentation rendered on https://highlight.io/docs is rendered from the docs-content directory. See the landing site contributing docs for more info."
		}
	},
	{
		"page": {
			"title": "Adding an SDK",
			"breadcrumbs": "Docs / Highlight Docs / Company / Open Source / Contributing / Adding an SDK",
			"content": "The highlight.io SDKs are powered by OpenTelemetry under the hood, and therefore report data to our deployed OpenTelemetry collector. For a better understanding of the architecture, take a look at the architecture page for a diagram of how data is sent to the collector and the public graph.\nIn our SDKs, we instantiate the following constructs to exports data over OTLP HTTPS to https://otel.highlight.io:4318/v1/traces and https://otel.highlight.io:4318/v1/logs respectively.\n\nTracerProvider - sets the global otel sdk configuration for traces\n\nBatchSpanProcessor - batches traces so they are exported in sets\n\nOTLPSpanExporter - exports traces to our collector over OTLP HTTPS\n\nLoggerProvider - sets the global otel sdk configuration for logs\n\nBatchLogRecordProcessor - batches logs so they are exported in sets\n\nOTLPLogExporter - exports logs to our collector over OTLP HTTPS\n\nThe SDK provides common methods for recording exceptions or logging, but this may depend on the language. For example, in Go, a logger hook API is provided to be configured by the application, but in Python, we automatically ingest a hook into the built in logging package.\nRecording an Error\nData we send over the OpenTelemetry specification is as a Trace with attributes set per the semantic conventions.\nWhen we create a Trace, we set three additional SpanAttributes to carry the Highlight context:\n\nhighlight.project_id - Highlight Project ID provided to the SDK\n\nhighlight.session_id - Session ID provided as part of the X-Highlight-Request header on the network request\n\nhighlight.trace_id - Request ID provided as part of the X-Highlight-Request header on the network request\n\nReporting an Error as an OTEL Trace\nAn exception is represented in OpenTelemetry as a Trace Event, per the semantic convention for exceptions.\nMany OpenTelemetry SDK implementations offer a span.record_exception(exc) method that automatically populates the semantic convention attributes with the correct values.\n\n# create a trace for the current invocation\nwith self.tracer.start_as_current_span(\"my-span-name\") as span:\n    span.set_attributes({\"highlight.project_id\": _project_id})\n    span.set_attributes({\"highlight.session_id\": session_id})\n    span.set_attributes({\"highlight.trace_id\": request_id})\n    try:\n        # contextmanager yields execution to the code using the contextmanager\n        yield\n    except Exception as e:\n        # if an exception is raised, record it on the current span\n        span.record_exception(e)\n        raise\n\n\nReporting a Log as an OTEL Trace\nIf a language's OpenTelemetry SDK does not support sending logs natively, we choose to send the message data as a Trace Event.\n\nEvent name - log\n\nlog.severity event attribute - the log severity level string\n\nlog.message event attribute - the log message payload.\n\nTo associate the highlight context with a log, we use the LogRecord Attributes with the following convention:\n\nhighlight.project_id - Highlight Project ID provided to the SDK\n\nhighlight.session_id - Session ID provided as part of the X-Highlight-Request header on the network request\n\nhighlight.trace_id - Request ID provided as part of the X-Highlight-Request header on the network request\n\n\npackage main\n\nimport \"github.com/highlight/highlight/sdk/highlight-go\"\n\nfunc RecordLog(log string) {\n\tspan, _ := highlight.StartTrace(context.TODO(), \"highlight-go/logrus\")\n\tdefer highlight.EndTrace(span)\n\n\tattrs := []attribute.KeyValue{\n\t\tLogSeverityKey.String(\"ERROR\"),\n\t\tLogMessageKey.String(entry.Message),\n\t}\n\tspan.AddEvent(highlight.LogEvent, trace.WithAttributes(attrs...))\n}\n\n\nRecording a Log\nIf an SDK supports the experimental logs ingest endpoint (v1/logs), prefer using that. Otherwise, see above for reporting the log as a trace event.\nA LogRecord is exported with an associated trace. Specific attributes for the file logging, line number, and more are set based on the logging semantic convention keys.\nHere's an example of the interception of python logging calls in our Python SDK to emit an OpenTelemetry LogRecord.\n\nattributes = span.attributes.copy()\nattributes[\"code.function\"] = record.funcName\nattributes[\"code.namespace\"] = record.module\nattributes[\"code.filepath\"] = record.pathname\nattributes[\"code.lineno\"] = record.lineno\nr = LogRecord(\n    timestamp=int(record.created * 1000.0 * 1000.0 * 1000.0),\n    trace_id=ctx.trace_id,\n    span_id=ctx.span_id,\n    trace_flags=ctx.trace_flags,\n    severity_text=record.levelname,\n    severity_number=std_to_otel(record.levelno),\n    body=record.getMessage(),\n    resource=span.resource,\n    attributes=attributes,\n)\n\n"
		}
	},
	{
		"page": {
			"title": "Application Architecture",
			"breadcrumbs": "Docs / Highlight Docs / Company / Open Source / Contributing / Application Architecture",
			"content": "Here's the high level structure of the code that you'll want to start tinkering with.\n\nSDKs sdk/\n\nFirstload\n\nClient\n\nhighlight-node / other SDKs\n\n\nPublic Graph backend/public-graph/graph/schema.resolvers.go SDK data ingest GraphQL endpoint, hosted locally at https://localhost:8082/public\n\nPrivate Graph backend/private-graph/graph/schema.resolvers.go GraphQL endpoint for frontend, hosted locally at https://localhost:8082/private\n\nWorkers backend/worker.go\n\nPublic graph worker processPublicWorkerMessage\n\nAsync worker Start\n\n\nGeneral Architecture Diagram\n\nCode Structure Diagram\n\nKafka Diagram\n\nInfluxDB Diagram\n\nOpenTelemetry Diagram\n"
		}
	},
	{
		"page": {
			"title": "GitHub Code Spaces",
			"breadcrumbs": "Docs / Highlight Docs / Company / Open Source / Contributing / GitHub Code Spaces",
			"content": "Running on GitHub Codepsaces (in browser or in VS Code)\nMake sure you've forked the repoVisit https://github.com/codespaces and start a codepsace for highlight/highlightInstall the VS Code Extension \"GitHub Codespaces\"Using VS Code, enter codespace - CMD + Shift + P, type codespace, select the Highlight codespaceIf docker is not running (try docker ps), run a full rebuild: press CMD + Shift + P, select Codespaces: Full Rebuild Container\n# from highlight/\ncd docker\n./run.sh\n# View `https://localhost:3000`\n"
		}
	},
	{
		"page": {
			"title": "Code Style",
			"breadcrumbs": "Docs / Highlight Docs / Company / Open Source / Contributing / Code Style",
			"content": "Code Style\nOur main priority is to keep our code to be easy to read and add to. We've codified and automated all style preferences as part of CI and development workflows (such as husky) so that there is one consistent source of truth. If you have ideas on how to improve our style linting, open a PR and let us know!\nLicense\nHighlight is Apache 2 licensed.\nBy contributing to Highlight, you agree that your contributions will be licensed under its Apache 2 license."
		}
	},
	{
		"page": {
			"title": "Good First Issues",
			"breadcrumbs": "Docs / Highlight Docs / Company / Open Source / Contributing / Good First Issues",
			"content": "First issues to take on\nIt's best to start with issues marked as \"good first issue\". We mark these issues based on how well-defined and testable they are. If you're interested in a larger project, adding support for new programming languages via a new SDK would always greatly appreciated. If there is a feature you're missing in Highlight, reach out on our discussions or on our discord to get a conversation started about the best implementation."
		}
	},
	{
		"page": {
			"title": "Self-hosted [Dev]",
			"breadcrumbs": "Docs / Highlight Docs / Company / Open Source / Self-hosting / Self-hosted [Dev]",
			"content": "Our Development Deployment\nInterested in deploying highlight.io on your local machine for developing in the Highlight codebase?\nDevelopment Deployment GuideGetting started with our developer deployment.\nIf you have any questions, don't hesitate to reach out!"
		}
	},
	{
		"page": {
			"title": "Self-hosted [Hobby]",
			"breadcrumbs": "Docs / Highlight Docs / Company / Open Source / Self-hosting / Self-hosted [Hobby]",
			"content": "Our Hobby Self-hosted Deployment\nInterested in deploying highlight.io on your local machine or on a small remote instance? You're in the right place. Here's a walkthrough on getting this set up:\nHobby Deployment GuideGetting started with our hobby deployment.\nLimitations\nWe don't recommend hosting Highlight yourself if you have more than 10k monthly sessions or 50k monthly errors. The infrastructure configuration in the docker compose is not meant to scale beyond a small number of sessions, and isn't resilient to an outage or version upgrades.\nThat being said, if the benefits of self hosting Highlight are signficant enough, you may want to consider an enterprise deployment (see our Enterprise Self Hosted Docs).\nIf you have any questions, don't hesitate to reach out!"
		}
	},
	{
		"page": {
			"title": "Self-hosted [Enterprise]",
			"breadcrumbs": "Docs / Highlight Docs / Company / Open Source / Self-hosting / Self-hosted [Enterprise]",
			"content": "Our Enterprise Self-hosted Deployment\nInterested in deploying Highlight to your own VPC at a larger scale than the hobby deployment? Please contact us in our discord community to get in touch.\nPricing\nPricing for our self-hosted enterprise deployment starts at $3k / month. Contact us at jay@highlight.io, or message us on discord to get in touch."
		}
	},
	{
		"page": {
			"title": "Telemetry",
			"breadcrumbs": "Docs / Highlight Docs / Company / Open Source / Self-hosting / Telemetry",
			"content": "How Telemetry works for self-hosted deploys\nTelemetry helps us understand how folks use highlight, what operating systems and hardware capabilities they have, and what features they use most. The metrics we collect are anonymized so that we can associate usage with a particular deployment, but never with a particular user email or name. We use our own highlight cloud product to collect metrics, so you can find exactly how the telemetry metrics are recorded and then stored + queried. Check out the telemetry code here to learn more.\nWhen you start highlight for development or a hobby deploy, our scripts will share the telemetry policy. If you'd like to disable telemetry, you can do so by editing the IsOptedOut function in backend/phonehome/phonehome.go. For a hobby deploy, you'll need to build the docker images from source to persist such a change.\nHeartbeat Metrics\nNameDescriptionTypenum-cpuCPU Countintmem-used-percentPercent memory usedfloatmem-totalBytes of memory totalint\nSelf-reported User Attributes\nNameDescriptionTypeabout-you-roleEngineering / Productstringabout-you-referralSite visit referrerstring\nUsage Metrics\nNameDescriptionTypebackend-setupIs a backend SDK integratedboolsession-countNumber of sessions recordedinterror-countNumber of errors recordedintlog-countNumber of logs recordedintsession-view-countNumber of sessions viewedinterror-view-countNumber of errors viewedintlog-view-countNumber of logs viewedint\nGeneral Telemetry\nNameDescriptionTypeversionHighlight version shastringis-onpremValue of env var ON_PREMstringdoppler-configWhen doppler is used, the name of the environment.stringphone-home-deployment-idA randomly-generated deployment identifier.string"
		}
	},
	{
		"page": {
			"title": "Our Competitors",
			"breadcrumbs": "Docs / Highlight Docs / Company / Our Competitors",
			"content": "We respect our competitors. In fact, we're not in the business of trying to convince people to use our product when it's not the right fit for them. Explore details about some of our competitors below.\nSession Replay Competitors\nLogRocketLearn more about how we compare to LogRocket.HotjarLearn more about how we compare to Hotjar.FullstoryLearn more about how we compare to Fullstory.SmartlookLearn more about how we compare to Smartlook.InspectletLearn more about how we compare to Inspectlet.DatadogLearn more about how we compare to Datadog.SentryLearn more about how we compare to Sentry.\nError Monitoring Competitors\nDatadogLearn more about how we compare to Datadog.SentryLearn more about how we compare to Sentry.\nLogging Competitors\nDatadogLearn more about how we compare to Datadog."
		}
	},
	{
		"page": {
			"title": "Product Philosophy",
			"breadcrumbs": "Docs / Highlight Docs / Company / Product Philosophy",
			"content": "Overview\nThis doc acts as a reference for our product philosophy at highlight.io, or to be more exact, how we think about what we build (not necessarily how we build it). It acts as a way for our team to prioritize work. If you'd like to learn more about our company values, check this doc.\nOur mission is to support developers (like you) to ship with confidence. We do this by giving you the tools you need to uncover, resolve, and prevent issues in your web app.\nCohesion\n\nOur product philosophy at highlight.io is centered around the concept of \"cohesion\", or the idea that we're focused on building a tightly coupled suite of tools that helps developers ship software with confidence.\nPrior to working on highlight.io, we all worked at several tech companies of varying sizes, and had first-hand experience trying to stitch together numerous tools to reproduce bugs. It wasn't uncommon that we had to do something like: log into Sentry to see a stacktrace, log into Splunk to query logs, and after investigating with even more tools, give up and log in \"as the user\" to try and reproduce the issue.\nPeople may think that we're building multiple products (session replay, error monitoring, etc..) but we see it as one. To see this in action, see our fullstack mapping guide.\nWe build for today's developer.\nIf you're building software in today's ecosystem, you probably want to JUST focus on building software. We challenge ourselves to build developer tooling that’s simple, straightforward and opinionated, but configurable if you want to customize your setup. highlight.io is built for developers that want to develop. Leave the monitoring stuff to us 👍.\nThe Vision\nWith highlight.io, we're changing that by building monitoring software that \"wraps\" your infrastructure and application, and we do ALL the work to stitch everything together. Our long-term goal is that you can trace everything from a button click to a server-side regression with little to no effort.\nNow, if you were to ask, \"but that's a lot to build, no?\" we would reply with \"Yes, give us a hand?\"."
		}
	},
	{
		"page": {
			"title": "Session Replay Features",
			"breadcrumbs": "Docs / Highlight Docs / Product Features / Session Replay / Overview",
			"content": "Session replay gives your team visibility into how people use your web app and insight into WHY bugs happen. In highlight.io, we focus heavily on \"cohesion\", or the mapping of sessions, errors and logs across your stack; that way you get an accurate and comprehensive idea of what happens.\nGet Started\nGet Started.Get started with error monitoring by installing highlight.io\nFeatures\nRead more about the features we support in Session Replay below:\nShadow DOM & Web Components.Support for Shadow DOM & Web ComponentsProxying through your domain.Support for proxying highlight.io requests through your domain.Canvas & Iframe Recording.Support for Canvas & Iframe RecordingDevtools Data.Capturing of console logs, network requests and errors.Extracting the Session URLSDK support for extracting the session URL from your sessions.Filtering SessionsOptions for filtering sessions.Tracking Users & Events.SDK support for tracking users and their corresponding actions throughout a session.GraphQLGraphQL operation names and formatted payloads.Live Mode.Support for following a user session in real-time.Performance Impact.The performance impact of the highlight.io snippet.Privacy & Redaction.Options to redact specific data being recorded in your frontend.Rage Clicks.Record when users click a specific elemtent frequently.Session Search.Features that allow you to search for sessions in your app.Session Search Deep Linking.The URL Schema we use for deep linking sessions.Disable Session CachingFor highlight.io power users, we support disabling session caching to reduce memory usage."
		}
	},
	{
		"page": {
			"title": "Canvas & Iframe",
			"breadcrumbs": "Docs / Highlight Docs / Product Features / Session Replay / Canvas & Iframe",
			"content": "Recording canvas elements\nhighlight.io supports recording canvas (and therefore WebGL) elements, although due to the nature of canvas, there are caveats regarding the quality/fidelity of the recording. Read more about how to get started with this in our canvas configuration docs. Below is a video demo of what the video recording looks like:\n\n\nInstalling highlight.io in an iframe\nThe highlight.io snippet supports recording within an iframe, but given the security limitations, there are caveats. Read more about this in our sdk configuration docs.\nRecording Cross-origin iframes\nTo support recording a cross-origin iframe that you own, we've added functionality into our recording client that allows the iframe to forward its events to the parent session. Read more about this in our sdk configuration docs.\nIf you do not own the parent page that is embedding your iframe cross-origin but you still want to record the iframe contents, pass recordCrossOriginIframe: false to the H.init options to force the iframe to record as a standalone app.\nOtherwise, the iframe will wait for the parent page to start recording."
		}
	},
	{
		"page": {
			"title": "Dev-tool Window Recording",
			"breadcrumbs": "Docs / Highlight Docs / Product Features / Session Replay / Dev-tool Window Recording",
			"content": "Devtools Recording\nhighlight.io supports recording all of the resources that you see in the chrome dev-tools window; that is, console messages, network requests and errors. Read more about how to instrument this data in our sdk configuration docs. Here's a sneak peak of what this looks like:\n"
		}
	},
	{
		"page": {
			"title": "Tracking Users & Recording Events",
			"breadcrumbs": "Docs / Highlight Docs / Product Features / Session Replay / Tracking Users & Recording Events",
			"content": "Identifying Users & Tracking Events\nWith session replay, it can be useful to identify the actual users and track actions that they perform. By default, your users in highlight.io remain anonymous, but we offer the option to identify and track actions with our javascript SDK. Read more in our SDK Configuration guide.\n\nDefinition of a Session\nA highlight session starts when you H.init in your web application (or call H.start if you are manually delaying the recording start). Once a session starts, we will continue recording in the same session for up to 4 hours. Each browser tab / instance will start a distinct session, so if your web app is opened in 2 tabs at once, we will record 2 sessions.\nHowever, once a session starts, it can be resumed. If your web app is opened in a single tab, closed, and then reopened within 15 minutes of closing, we will resume the existing highlight session. If more than 15 minutes have passed, we will start a new session.\nActive time is the time when a user is interacting with your page with no more than a 10-second gap in activity. For example, if a user is moving their mouse / typing / clicking for 30 seconds with no gaps of longer than 10 seconds, that would count as 30 seconds of active time."
		}
	},
	{
		"page": {
			"title": "Filtering Sessions",
			"breadcrumbs": "Docs / Highlight Docs / Product Features / Session Replay / Filtering Sessions",
			"content": "highlight.io allows you to filter sessions that you don't want to see in your session feed. This is useful for sessions that you know are not relevant to your application, or that are not actionable.\nFiltered sessions do not count towards your billing quota.\nSet up ingestion filters\nYou can set up ingestion filters by product to limit the number of data points recorded. You can filter sessions, errors, logs, or traces in the following ways:\nSample a percentage of all data.\nFor example, you may configure ingestion of 1% of all sessions. For each session we receive, we will make a randomized decision that will result in storing only 1% of those. The random decision is based on the identifier of that product model for consistency. With traces, the Trace ID is used to make sure all children of the same trace are also ingested.Rate limit the maximum number of data points ingested in a 1 minute window.\nFor example, you may configure a rate limit of 100 sessions per minute. This will allow you to limit the number of sessions recorded in case of a significant spike in usage of your product.Set up an exclusion query.\nFor example, you may configure an exclusion query of environment: development. This will avoid ingesting all sessions tagged with the development environment.\nWith these filters, we will only bill you for data actually retained. For instance, setting up ingestion of only 1% of all sessions will mean that you will be billed only for 1% of all sessions (as measured by our definition of a session). You can configure the filters on your project settings page in highlight.\nFilter sessions by user identifier\nIn some cases, you may want to filter sessions from a specific user. You can do this by adding the user identifier to the \"Filtered Sessions\" input under the \"Session Replay\" tab in your project settings. Please note that we use the identifier (or first argument) sent in your H.identify method to filter against (SDK docs here).\nFiltering sessions without an error\nIf you're using Highlight mostly for error monitoring, enable the \"Filter sessions without an error\" in your project settings to only record sessions with an error.\nFiltering sessions using custom logic\nIf you'd like to filter sessions based on custom logic (e.g. filtering sessions from users who have not logged in), use the manualStart flag in your H.init configuration. This will allow you to start and stop a session at your discretion.\nH.init({\n  manualStart: true,\n  // ... other options\n})\n\nThen you can manually start a session by calling H.start:\nuseEffect(() => {\n  if (userIsLoggedIn) {\n    H.start()\n  }\n}, [userIsLoggedIn])\n\nDisable all session recording\nIf you're interested in using Highlight for the error monitoring or logging products without session replay, use the follow setting:\nimport { H } from 'highlight.run';\n\nH.init('<YOUR_PROJECT_ID>', {\n    disableSessionRecording: true,\n    // ...\n});\n\nWant to filter something else?\nIf you'd like an easier way to filter specific types of sessions, we're open to feedback. Please reach out to us in our discord community."
		}
	},
	{
		"page": {
			"title": "GraphQL",
			"breadcrumbs": "Docs / Highlight Docs / Product Features / Session Replay / GraphQL",
			"content": "Extract operation names\nGraphQL famously uses a single endpoint for every request. This makes tracking network requests a special chore.\nWe've extracted GraphQL operation names and surfaced them in the Session Replay network tab.\n\nPayload formatting\nGraphQL payloads can be inscrutable, so we've formatted them for you.\n"
		}
	},
	{
		"page": {
			"title": "Live Mode",
			"breadcrumbs": "Docs / Highlight Docs / Product Features / Session Replay / Live Mode",
			"content": "highlight.io supports tracking users in real-time as they user your web application. When you use highlight.io's Live Mode, the session viewer shows the latest data from users' sessions. It is enabled by default on sessions currently 'live' - eg. when a user is still on the page and sending session data.\nWhile you can view how a session looks to a user in real time, note that some events haven't been processed and will not be visible. Errors, console logs, and network traffic will only be visible when Live Mode is disabled, up to what's most recently processed. In Live Mode, time-scrubbing is disabled since you're always seeing the latest session view.\nYou can always turn off Live Mode by clicking the toggle button, which will show the session up to the latest data processed. Clicking on the session to write a comment will also disable Live Mode, since comments are associated with a particular timestamp."
		}
	},
	{
		"page": {
			"title": "Performance Impact",
			"breadcrumbs": "Docs / Highlight Docs / Product Features / Session Replay / Performance Impact",
			"content": "Overview\nWhen building Highlight, we've made technical decisions that prioritize putting your site's performance first. Highlight's performance impact on your site, therefore, is negligible, both from the perspective of your user's real-time experience as well as from a page-load perspective.\nBundle Size\nHighlight's gzipped bundle size is a mere 11 kb. From a page load perspective, your team should have no qualms regarding Highlight's impact on page load metrics.\nDOM Interaction Performance\nHighlight uses the well-maintained MutationObserver browser API in order to record DOM mutations. When sending these changes to our platform, we buffer events periodically to ensure that\n\nEvents aren't being held in memory for a prolonged time\n\nOutgoing network requests aren't interfering with user interactions\n\nNetwork\nYour client will send Highlight telemetry about every 3 seconds. We've taken extra care in making sure we don't overwhelm your end user's machine:\n\nOnly 1 request will be in-flight at a given time\n\nResponsive to your end user's network speed\n\nSession Replay\nConcerned about session replay impacting your web application? Read our blog post about it here."
		}
	},
	{
		"page": {
			"title": "Player Session Caching",
			"breadcrumbs": "Docs / Highlight Docs / Product Features / Session Replay / Player Session Caching",
			"content": "In most cases, the session replayer's local cache allows for a smoother experience when playing back sessions. However, for customers that run a very memory-intensive stack (using canvas recording, or even with lots of changes happening in the dom), the local session player can occosianally slow down the browser tab. We've added a new option to turn off session caching in the highlight dashboard.\nYou can find this option under Settings > Account Settings > Player Settings."
		}
	},
	{
		"page": {
			"title": "Rage Clicks",
			"breadcrumbs": "Docs / Highlight Docs / Product Features / Session Replay / Rage Clicks",
			"content": "Rage clicks are the equivalent of spamming a close elevator button when you just want to get up to your apartment. But, instead of a close elevator button, it's a space on your application. And instead of getting to your apartment, users usually rage click when a button isn't working as it should.\nHow do we identify rage clicks?\nA Rage Click is defined as a time periodic in which a user clicks the same area a certain number of times. This can help highlight points of frustration your users have with the app.\nBy default, we consider user activity as rage clicks when there exists a 2 second or longer period in which a user clicks 5 or more times within a radius of 8 pixels.\nCustomizing rage click sensitivity\nYou'll find fine-grained control over your project's rage click settings in your project settings page.\n\nElapsed Time (seconds): the maximum time interval during which clicks count toward a rage click.\n\nRadius (pixels): how close clicks must be to be determined as part of the same rage click.\n\nMinimum Clicks: the minimum number of nearby clicks required to count as a rage click.\n\n\nAlerting for rage clicks\nCreate a rage click alert within your project's alerts page to be notified on Slack or via email about a user rage clicking in your app!\n"
		}
	},
	{
		"page": {
			"title": "Request Proxying",
			"breadcrumbs": "Docs / Highlight Docs / Product Features / Session Replay / Request Proxying",
			"content": "Request Proxying\nWith tools that run from your browser, you run the risk of having requests blocked by ad blockers and chrome extensions. highlight.io supports proxying requests through your own domain."
		}
	},
	{
		"page": {
			"title": "Session Search",
			"breadcrumbs": "Docs / Highlight Docs / Product Features / Session Replay / Session Search",
			"content": "In highlight.io, you can search for a session by any of the data you send us (via the SDK) throughout a session. The data you send us can be in the form of:\n\ntrack calls\n\nidentify calls\n\nclick data\n\nWe cover how search/instrumentation for each type of these queries works below.\nTrack Searching\nFor track calls, you can search for sessions based on the properties that have a type of track. This looks like the following:\n\nIdentify Searching\nFor identify calls, you can search for sessions based on the properties that have a name of identify, and the value corresponds to the value sent to the first argument of H.init (see here). This looks like the following.\n\nSearching by User Clicks\nWhen using Highlight, you might be interested in querying for sessions where a user clicked a certain HTML element. Highlight records users' clicks on the page as two queryable properties: clickSelector and clickInnerText.\n\nclickSelector is the HTML Element's target's selector, concatinating the element's tag, id  and class values.\n\nclickTextContent is the HTML Element's target's textContent property. Only the first 2000 characters are sent.\n\nYou can then use the session filters to search for text in the two fields. An example of what the clickSelector filter looks like is below:\n\nSearching by Visited URL\nYou can also search for sessions based on the URL that the user visited. This is useful if you want to search for sessions where a user visited a certain page on your site.\nTo perform this search, you can use the Visited URL filter. This looks like the following:\n\nAnd like all of our filters, you can use contains, does not contain, is, and is not, etc.."
		}
	},
	{
		"page": {
			"title": "Extracting the Session URL",
			"breadcrumbs": "Docs / Highlight Docs / Product Features / Session Replay / Extracting the Session URL",
			"content": "In some cases, you may want to extract the Session URL at the time that a user visits your web application to send it your other tools. For example, if you have a customer support tool, many customers like to sent the session URL of their customers to the tool in order to help them debug their issues.\nYou can do this by using the the H.getSessionDetails method. This method will return an object with a url and urlWithTimestamp property. Usage is as follows:\n      H.getSessionDetails().then(({url, urlWithTimestamp}) => {\n          console.log(url, urlWithTimestamp);\n      });\n\nPlease refer to our SDK docs for more information."
		}
	},
	{
		"page": {
			"title": "Session Search Deep Linking",
			"breadcrumbs": "Docs / Highlight Docs / Product Features / Session Replay / Session Search Deep Linking",
			"content": "The queries you build when searching for sessions are reflected in the URL parameters. You can share these URLs with others to deep link to search results, or even create them programatically.\nSyntax\n/sessions?query={and|or}||{property1},{operator1},{valueA},{valueB}\n\nHighlight supports and and or queries\n\nUser properties:\nuser_{your_property_name}\n\nTrack properties:\ntrack_{your_property_name}\n\nSessions built-in properties (these are automatically populated by Highlight):\n\nuser_identifier \n\nsession_browser_version\n\nsession_browser_name\n\nsession_device_id\n\nsession_environment\n\nsession_os_name\n\nsession_os_version\n\nsession_referrer\n\nsession_reload\n\nsession_visited-url\n\ncustom_app_version\n\ncustom_created_at\n\ncustom_active_length\n\ncustom_viewed\n\ncustom_processed\n\ncustom_first_time\n\ncustom_starred\n\n\nOperators:\n\nis\n\nis_not\n\ncontains\n\nnot_contains\n\nexists\n\nnot_exists\n\nmatches (uses Lucene regex syntax)\n\nnot_matches (uses Lucene regex syntax)\n\nbetween (for active_length)\n\nnot_between (for active_length)\n\nbetween_date (for created_at)\n\nnot_between_date (for created_at)\n\n\nExamples\nViewing sessions for a particular user:\n/sessions?query=and||user_identifier,is,alice@example.com\nExcluding sessions from your organization:\n/sessions?query=and||user_identifier,not_contains,@yourdomain.com\nViewing sessions for a particular page in your app:\n/sessions?query=and||session_visited-url,contains,/your/path/name\nMultiple properties\n/sessions?query=or||user_identifier,is,Bob||user_email,is_not,alice@example.com"
		}
	},
	{
		"page": {
			"title": "Shadow Dom + Web Components",
			"breadcrumbs": "Docs / Highlight Docs / Product Features / Session Replay / Shadow Dom + Web Components",
			"content": "Shadow DOM & Web Components\nhighlight.io supports both Shadow DOM and Web Components out of the box."
		}
	},
	{
		"page": {
			"title": "Error Monitoring Features",
			"breadcrumbs": "Docs / Highlight Docs / Product Features / Error Monitoring / Overview",
			"content": "Error monitoring in highlight.io is different than most tools, in that we emphasize the mapping between your frontend and backend. Keep reading to learn more about our feature set and get started.\nGet started\nGet StartedGet started with session replay by installing highlight.io\nFeatures\nManually Reporting ErrorsManually report errors that are not caught by the SDK.Grouping ErrorsLogic for grouping errors to mitigate repetition.SourcemapsConfigure sourcemaps for your frontend errors.Versioning Errors.Send highlight.io metadata so you can version errors across deploys.Filtering and Ignoring ErrorsOptions for filtering and ignoring errors.Managing ErrorsFeatures for managing errors"
		}
	},
	{
		"page": {
			"title": "Enhancing Errors with GitHub",
			"breadcrumbs": "Docs / Highlight Docs / Product Features / Error Monitoring / Enhancing Errors with GitHub",
			"content": "Highlight has the capability to enhance your backend errors using GitHub (errors on the frontend are enhanced using sourcemaps). With our GitHub\nintegration, Highlight is able to enhance a stacktrace with context, as well as other enhancements such as \"link to a file\" and attribution to a code change.\nIn order to turn on GitHub Enhancements, 3 actions need to be completed for your project:\n1. Create a service via the SDK2. Add the GitHub Integration to Highlight3. Link your service to a GitHub repo\nCreate a service via the SDK\nServices are created to group your logs, errors, and traces by the application that is running the code. Having a service can make it helpful to decipher\nwhich application caused an error, especially in code paths shared by multiple applications. They can also be used also filters for logs and traces.\nServices are created by passing in a service name via the SDK. For example, in Golang, the following SDK will create a new service named \"my-app\":\nhighlight.SetProjectID(\"<YOUR_PROJECT_ID>\")\nhighlight.Start(\n    highlight.WithServiceName(\"my-app\"),\n    highlight.WithServiceVersion(\"git-sha\"),\n)\ndefer highlight.Stop()\n\nReference the SDK start up guides for more help. For more information about services, see Services documentation.\nNote: There is also a service version that is provided in the example above. This is not necessary to enable GitHub enhancements, but is recommended that this be the\ncurrent GIT SHA of the deployed code to use the most accurate files. If not provided, Highlight will fallback to your current default branch (e.g. main) GIT SHA.\nAdd the GitHub Integration to Highlight\nEnable GitHub on Highlight by going to the integrations and click the \"Connect\" button in the GitHub section.\nMore information on the GitHub Integration can be found at GitHub Integration.\nLink your service to a GitHub repo\nOnce a service is created, the service will be visible in the metadata of your error. The last step to enable stacktrace enhancements is to link your service to\nits respective GitHub repo, the one that should be used to enhance your errors. In addition to linking the repo, there are two fields to configure file path mappings from your\ndeployment process to the correct file in GitHub.\nBuild path prefix - This path prefix represents a path added in your deployment process, and is also the path in your server that contains your files.\nAfter removing this path (and possibly adding something else), you should be able to point this string to a GitHub file.GitHub path prefix - This path prefix is a string that can be appended to the front of the stacktracepath, and will be prepended to your files in order to correctly find the file in GitHub.\nIt is recommended to complete with the form while viewing an error, to be able to test your configuration on the viewed error. This can also be completed from the services table, where all your services can be viewed and managed.\n\nAn example:\n1. An error received has a stacktrace path /build/main.go.2. The GitHub repo was selected to be the Highlight repo.3. Since Highlight's deployment process moves all files out of the /backend directory and into the /build directory, we would set \"Build prefix path\"\nto /backend and GitHub prefix path to /backend.\nThis will result in the following mapping:\n/build/main.go -> https://github.com/highlight/highlight/blob/HEAD/backend/main.go.\nHaving Issues?\nYou may notice your service is in an \"error\" state, and is no longer attempting to enhance errors. This may be due to a bad configuration when linking your service to a repo. If this does not seem to be the case, please reach out to us in our discord community."
		}
	},
	{
		"page": {
			"title": "Filtering Errors",
			"breadcrumbs": "Docs / Highlight Docs / Product Features / Error Monitoring / Filtering Errors",
			"content": "highlight.io allows you to filter errors that you don't want to see in your error monitoring dashboard. This is useful for errors that you know are not relevant to your application, or for errors that you know are not actionable.\nFiltered errors do not count towards your billing quota.\nThere are several options for filtering errors, all of which can be found in the \"Error Monitoring\" tab of your project settings. Details on each option are below.\nSet up ingestion filters\nYou can set up ingestion filters by product to limit the number of data points recorded. You can filter sessions, errors, logs, or traces in the following ways:\nSample a percentage of all data.\nFor example, you may configure ingestion of 1% of all errors. For each session we receive, we will make a randomized decision that will result in storing only 1% of those. The random decision is based on the identifier of that product model for consistency. With traces, the Trace ID is used to make sure all children of the same trace are also ingested.Rate limit the maximum number of data points ingested in a 1 minute window.\nFor example, you may configure a rate limit of 100 errors per minute. This will allow you to limit the number of errors recorded in case of a significant spike in usage of your product.Set up an exclusion query.\nFor example, you may configure an exclusion query of environment: development. This will avoid ingesting all errors tagged with the development environment.\nWith these filters, we will only bill you for data actually retained. For instance, setting up ingestion of only 1% of all errors will mean that you will be billed only for 1% of all errors.\nShow errors that have an associated frontend session recorded.\nYou can use the disableSessionRecording setting to record frontend errors without recording a session.\nTo find errors that have a session associated, you can use the Has Sessions filter in the errors query builder\n\nOnce you open an error group instance view, check the Only instances with recorded sessions box to filter the instances.\n\nFilter errors emitted by browser extensions\nIf your users are using browser extensions, you may see errors that are not relevant to your application. You can filter these errors by checking the \"Filter errors thrown by browser extensions\" box in your project settings.\nIgnoring error groups from alerts\nIf you have alerts set up for your project, you can ignore specific error groups from triggering alerts. You can do this by clicking the \"Ignore\" button on the error group page.\nFilter errors by regex on the error body\nIf you'd like to filter specific errors by a regex pattern match against the error body, you can do so by adding error filters in your project settings as well.\nWant to filter something else?\nIf you'd like an easier way to filter specific types of errors, we're open to feedback. Please reach out to us in our discord community."
		}
	},
	{
		"page": {
			"title": "Grouping Errors",
			"breadcrumbs": "Docs / Highlight Docs / Product Features / Error Monitoring / Grouping Errors",
			"content": "Highlight groups errors together based on their error message and stack trace. When an error is thrown, Highlight finds the closest matching error and adds the new error instance to it.\nAn error is matched if:\n\nIt has the same error message OR\n\nIt has the same top stack frame and 3 of the next 4 stack frames are the same (in any order)\n\nA stack frame is matched if:\n\nIt has the same filename, function name, line number, and column number OR\n\nIt has the same source code and context (if sourcemaps are enabled)\n\nIf there is no match with an existing error, a new error group is created instead.\nGrouping Rules\nIf your errors are in JSON form, you can add JSONPath expressions in your project settings to select parts of your errors that you want to group on. For example, if your errors look like:\n{\n    \"type\": \"StackOverflowError\",\n    \"user\": \"alice\",\n    \"message\": \"Oh no! You got an error on line 41!!\"\n}\n\n{\n    \"type\": \"StackOverflowError\",\n    \"user\": \"bob\",\n    \"message\": \"Oh no! You got an error on line 50!!\"\n}\n\nThey would not be grouped together since the errors are not an exact match and since they were thrown at different lines in your code. In this case, if you wanted to group all errors of the same type into the same error group, you can add an expression $.type in your project settings."
		}
	},
	{
		"page": {
			"title": "Managing Errors",
			"breadcrumbs": "Docs / Highlight Docs / Product Features / Error Monitoring / Managing Errors",
			"content": "Keeping on top of errors is a challenging effort for any company. Bugs are rarely prioritized and typically don't get attention until a customer writes in about it. Very quickly, errors pile up and it is challenging to distinguish what is signal versus what is noise.\nResolving errors\nOnce an error has been fixed, update the status to \"Resolved\" to remove it from the main Errors view.\nAuto-resolving errors\nIn your project settings, you can auto-resolve errors that haven't been seen for a given time period. If you're trying to manage your error fatigue, we recommend setting this to something low like \"7 days\".\nSnoozing errors\nIf an error is frequently occurring and is causing lots of noise, you can Snooze until a certain time.\nWant additional management features?\nIf you'd like additional ways to manage errors, we're open to feedback. Please reach out to us in our discord community."
		}
	},
	{
		"page": {
			"title": "Manually Reporting Errors",
			"breadcrumbs": "Docs / Highlight Docs / Product Features / Error Monitoring / Manually Reporting Errors",
			"content": "In each of our language SDKs, highlight.io supports manually sending errors. This is useful for reporting errors that are not caught by the SDK, or that you would like to define internally as your own application errors.\nIn javascript, we support this via the H.consumeError method (see our SDK docs) and in other languages, we maintain this naming convention (pending casing conventions of the language in question.).\nExample in javascript:\nH.consumeError(error, 'Error in Highlight custom boundary!', {\n  component: 'JustThroughAnError.tsx',\n});\n"
		}
	},
	{
		"page": {
			"title": "Sourcemaps",
			"breadcrumbs": "Docs / Highlight Docs / Product Features / Error Monitoring / Sourcemaps",
			"content": "highlight.io has first-party support for enhancing minified stacktraces in javacript. We also support options for sending sourcemaps to us in the case that your sourcemaps aren't public. Read more about it in our getting started doc"
		}
	},
	{
		"page": {
			"title": "General Features",
			"breadcrumbs": "Docs / Highlight Docs / Product Features / General Features / Overview",
			"content": "Below are several highlight.io features that might be worth taking a look at.\nAlerts.Get alerts for sessions, errors, new users and more!Comments.Collaborate on bugs throughout your web app.Digests.Get a weekly digest of sessions that are worth watching.Environments.Version resources so that you know what environment events happened in.Segments.Create search filters so searching for sessions & errors is easy!Services.Create services to better group your errors, logs, and traces."
		}
	},
	{
		"page": {
			"title": "Alerts",
			"breadcrumbs": "Docs / Highlight Docs / Product Features / General Features / Alerts",
			"content": "Alerts are a way to keep your team in the loop as to what is happening on your app. Below is a description of the common components of Alerts, and more specific parameters are included in subsequent sections. To get started, visit app.highlight.io/alerts. The basic parameters for an alert look like the following image:\n\nConnecting a Slack Channel\nIf you haven't already integrated Highlight with Slack, clicking the \"Channels To Notify\" dropdown will prompt you to select a channel. Once this is done, you can add any number of channels to be pinged when an alert is thrown.\nExcluding Environments\nYou may want to exclude certain environments from generating alerts. For example, in your team's dev environment, it's unlikely that you want to be notified of every error. You can do this by adding an excluded environment option.\nLearn more about Environments.\nWebhook Notifications\nAll alerts can route notifications to webhooks via a HTTP POST JSON payload. Learn more about configuring webhooks."
		}
	},
	{
		"page": {
			"title": "Comments",
			"breadcrumbs": "Docs / Highlight Docs / Product Features / General Features / Comments",
			"content": "Comments can be made by you or anyone on your team on sessions and errors.\nSession Comments\nSession comments can be made by clicking anywhere on the session replay. Session comments are special because they connect a comment to a position on the screen and the current time. This is extremely powerful because now when you create a comment, you don't have to write more to provide the location/time context.\nNotifications\nIf you tag your team when creating a comment (learn more Slack Integration), Highlight will send them a message via email or Slack. Those messages will contain your comment text and a screenshot of the session at the current time.\n\nCollaboration\nYou can tag a teammate in a comment by typing @ and then picking your teammate. When you tag a teammate, they will receive a notification with the message you wrote.\nReplies\nWant to have a conversation relevant to what you're looking at? You can also reply to Session or Error comments on the side panel or directly via the popup.\n\nWhen participating in a comment, you become subscribed to future replies. Subsequent replies will notify you via Slack (learn more Slack Integration) or email. Any Slack channel or user tagged is also automatically subscribed.\nSlack Integration\nYou can tag Slack users or channels in comments after connecting Highlight with Slack (learn more Slack Integration). When you tag a Slack user or channel, Highlight will send them a message with your comment and a link to where the comment was made.\nLinear Integration\nYou can create issues in Linear as you add comments. Within a comment, select \"Create a Linear issue\" from the issues dropdown. On the next page, you'll be prompted to optionally edit the issue title and description. Once you save the comment, an issue is created and linked to in Linear."
		}
	},
	{
		"page": {
			"title": "Digests",
			"breadcrumbs": "Docs / Highlight Docs / Product Features / General Features / Digests",
			"content": "Highlight digests are weekly email summaries of interesting sessions, errors, and user activity. Highlight sends two separate digests each week:\nProject Overview summarizes aggregate user activity and lists the top errors and sessions for the weekSession Insights is a spotlight on the most interesting sessions\nGetting Started\nYou don't have to do anything to start receiving digests. If your project has 50+ sessions recorded in the past week, a digest for that week will automatically be emailed to all workspace members. To enable AI summaries in the Session Insights digest, you can opt in here.\nProject Overview features\nThe Project Overview digest contains multiple sections to showcase aggregate user activity, plus sessions and errors ordered by certain metrics.\nUser activity\nThis section shows aggregate user activity stats for last week and the change from the prior week. This includes total users (the count of unique users), total sessions, total errors, and average time spent (average active time per session).\n\nActive sessions\nThis section shows the top 5 sessions ordered by active time.\n\nErroneous sessions\nThis section shows the top 5 sessions ordered by error count.\n\nNew errors\nThis section shows the top 5 errors originating in the last week, ordered by the count of unique affected users.\n\nFrequent errors\nThis section shows the top 5 errors ordered by their frequency. Ignored errors are excluded.\n\nSession Insights features\nThe Sessions Insights digest lists the top 3 most interesting sessions for the week. These sessions are chosen by looking at the user journey in each session, and calculating which journeys are the least likely. These sessions tend to show users who may be frustrated or are using the app in unexpected ways.\nAI summaries\nAI summaries can be included in the Sessions Insights digest to describe what events happen in a session, so that you can tell at a glance what makes the session interesting and what it will contain.\nTo enable AI summaries, you can opt in here.\n"
		}
	},
	{
		"page": {
			"title": "Environments",
			"breadcrumbs": "Docs / Highlight Docs / Product Features / General Features / Environments",
			"content": "Environments can be assigned to sessions and errors by setting the environment option in H.init(). With the assignment, you can know search and filter sessions and errors based on the environment they come from.\nEnvironments are also used to determine whether Alerts are created.\nExample\nH.init('<YOUR_PROJECT_ID>', {\n  environment: process.env.ENVIRONMENT,\n})\n"
		}
	},
	{
		"page": {
			"title": "Segments",
			"breadcrumbs": "Docs / Highlight Docs / Product Features / General Features / Segments",
			"content": "Segments are a set of search filters that apply to sessions or errors. Segments are useful if you want to quickly view sessions or errors that relate to a certain population of your users.\nHighlight supports a variety of filters. Visit app.highlight.io/demo to experiment with real Highlight data.\n"
		}
	},
	{
		"page": {
			"title": "Services",
			"breadcrumbs": "Docs / Highlight Docs / Product Features / General Features / Services",
			"content": "Services are a useful tool to delineate your logs, errors, and traces. In order to create a new service, a service name must be provided to your SDK configuration.\nReference the SDK start up guides for more help.\nFor example, in Golang, the following SDK will create a new service named \"my-app\":\nhighlight.SetProjectID(\"<YOUR_PROJECT_ID>\")\nhighlight.Start(\n    highlight.WithServiceName(\"my-app\"),\n    highlight.WithServiceVersion(\"git-sha\"),\n)\ndefer highlight.Stop()\n\nCreated services are visible at https://app.highlight.io/settings/services.\n"
		}
	},
	{
		"page": {
			"title": "Webhooks",
			"breadcrumbs": "Docs / Highlight Docs / Product Features / General Features / Webhooks",
			"content": "All alerts can route notifications to webhooks via a HTTP POST JSON payload. For example, if you are hosting an HTTP webserver listening on https://example.com/api/webhook, you can configure alerts on Highlight.\nTo add an outgoing webhook destination, edit an alert and set the destination URL.\n\nHere's an example of a payload that is sent.\n{\n  \"Event\": \"ERROR_ALERT\",\n  \"ErrorCount\": 1,\n  \"ErrorTitle\": \"Oh no! An error occurred\",\n  \"SessionURL\": \"https://app.highlight.io/1/sessions/\",\n  \"ErrorURL\": \"https://app.highlight.io/1/errors/sqavrqpCyrkOdDoYjMF7iM0Md2WT/instances/11493\",\n  \"UserIdentifier\": \"vadim@highlight.io\",\n  \"VisitedURL\": \"https://app.highlight.io/1/alerts\"\n}\n\nSession alerts, user alerts, and metric monitors can all send webhook notifications. The payload resembles a similar format for all notification types.\nIf you are interested in customizing the payload or authenticating the webhook request with an authorization header, follow this issue on GitHub for updates.\nWebhook Payload Customization & Authentication #4697Outgoing Webhook Enhancements"
		}
	},
	{
		"page": {
			"title": "Logging Features",
			"breadcrumbs": "Docs / Highlight Docs / Product Features / Logging / Overview",
			"content": "You can find our logging product at app.highlight.io/logs.\nIf your language of choice isn't support in the \"Getting Started\" docs below, hit us up in our community or send us an email at support@highlight.io\nGet started with the resources below:\nGet StartedSet up logging for your application.Log Search SpecificationThe specification we use for ingesting and searching for logs.Log AlertsSet up alerts to be notified when logs exceed a threshold."
		}
	},
	{
		"page": {
			"title": "Log Alerts",
			"breadcrumbs": "Docs / Highlight Docs / Product Features / Logging / Log Alerts",
			"content": "Logs alerts are a way to get notified when the count of logs for a query is over or under a threshold for a specific time range.\nCreating an alert\n\nQuery\nWhen you set up an alert, you can include a query to count only the logs that match. The query format follows the same specification as on the logs page. You can read more here.\nAlert Threshold\nYou can control the number of logs needed to trigger an alert by setting an alert threshold. You can choose to alert if the actual log count is above or below this threshold.\nAlert Frequency\nYou can adjust the time range for which logs are searched and aggregated. Shorter frequencies can be helpful to be alerted quickly about an issue, while longer frequencies can help reduce noise by aggregating across a larger time range.\nNotifications\nLog alerts can be configured to notify you via Slack, Discord, email, or webhooks. For more details, see alerts."
		}
	},
	{
		"page": {
			"title": "Log Search Specification",
			"breadcrumbs": "Docs / Highlight Docs / Product Features / Logging / Log Search",
			"content": "Logs are broken down into two discrete concepts: messages and attributes. Given the following log:\nlogger.info('Queried table', {\n  table: 'users',\n  query: 'hello',\n}),\n\nThe log message is Queried table and the attributes are table:users and query:hello.\nSearching for logs\nMessages search\nTo search for a log message, simply type the text of the message. Given the following log:\nlog.info(\"excluding session due to no user interaction events\")\n\nWe can find this log by typing excluding session due to no user interaction events\n\nAttributes search\nTo search on a log attribute, add a : between search terms. Given the following log:\nlog.info({\n  user_id: 42,\n})\n\nWe can search for it via:\nuser_id:42 matches every log where user_id is 42level:info matches every log where level is info\nWe can exclude logs that match an attribute by prefixing it with -:\nuser_id:-42 matches every log where user_id is not 42level:-info matches every log where level is not info\nAND vs OR\nWhen multiple attributes are included, they work as an AND operator:\nuser_id:42 level:info - matches every log where user_id is 42 and level is info\nWhen the same attribute is included twice in a search, it works as an OR operator:\nuser_id:42 level:info level:warn - matches every log where user_id is 42 and (level is info or level is warn)\nWildcard search\nTo perform a wildcard search, use the * symbol:\nservice:frontend* matches every log that has a service starting with frontendfrontend* matches all log messages starting with the word frontend*frontend matches all log messages ending with the word frontend\nAutoinjected attributes\nBy default, Highlight's SDKs will autoinject attributes to provide additional context as well as assisting in linking sessions and errors to their respective logs.\nAttributeDescriptionExamplecode.filepathFile path emitting the log./build/backend/worker/worker.gocode.functionFunction emitting the log.github.com/highlight-run/highlight/backend/worker.(*Worker).Start.func3code.linenoLine number of the file where the log was emitted.20host.nameHostnameip-172-31-5-211.us-east-2.compute.internalos.descriptionDescription of the operating systemAlpine Linux 3.17.2 (Linux ip-172-31-5-211.us-east-2.compute.internal 5.10.167-147.601.amzn2.aarch64 #1 SMP Tue Feb 14 21:50:23 UTC 2023 aarch64)os.typeType of operating systemlinuxlevelThe log levelinfomessageThe log messagepublic-graph graphql request failedspan.idSpan id that contains this log528a54addf6f91cc"
		}
	},
	{
		"page": {
			"title": "Integrations Overview",
			"breadcrumbs": "Docs / Highlight Docs / Integrations / Integrations Overview",
			"content": "Read more about highlight.io's integrations! Have a questions or want to request a new integration? Hit us up in our community.\nAmplitude.Instrument highlight.io to send amplitude events.Mixpanel.Instrument highlight.io to send mixpanel events.Clickup.Create clickup tickets within highlight.ioFront.View highlight.io sessions directly in your front inbox.Linear.Create linear tickets within highlight.ioGitHub.Create GitHub Issues within highlight.ioSegment.Instrument highlight.io to send segment events.Height.Create height tickets within highlight.ioJira.Create Jira tasks within highlight.ioIntercom.Access highlight.io sessions within your intercom dashboard.Slack.Send highlight.io alerts to slack.Vercel.Automate uploading of sourcemaps and integrationDiscord.Create discord tickets within highlight.ioPendo.Instrument highlight.io to send pendo events."
		}
	},
	{
		"page": {
			"title": "Amplitude Integration",
			"breadcrumbs": "Docs / Highlight Docs / Integrations / Amplitude Integration",
			"content": "We've made it easy to use Amplitude with Highlight. When you initialize Highlight, you can set your Amplitude API Key.\nH.init('<YOUR_PROJECT_ID>', {\n  integrations: {\n    amplitude: {\n      apiKey: '<AMPLITUDE_API_KEY>',\n    },\n  },\n})\n\nAPI\nlogEvent()\nCalling H.track() will forward the data to Amplitude's logEvent().\nH.track('signup_button_clicked', {\n  firstTime: true,\n  impressions: 10,\n})\n\n// The Highlight track call is equivalent to this logEvent call\namplitudeClient.logEvent('signup_button_clicked', {\n  firstTime: true,\n  impressions: 10,\n  // This property is added by Highlight. This shows you the session where this event happened.\n  highlightSessionURL: 'https://app.highlight.io/sessions/123',\n})\n\nsetUserId() and identify()\nCalling H.identify() will forward the data to Amplitude's setUserId() and identify().\nH.identify('eliza@corp.com', {\n  planType: 'premium',\n  verified: false,\n})\n\n// The Highlight identify call is equivalent to setUserId and identify.\namplitudeClient.setUserId('eliza@corp.com')\namplitudeClient.identify(new amplitude.Identify().set('planType', 'premium').set('verified', false))\n\nIf you want to disable this behavior, you can set enabled: false for the integration:\nH.init('<YOUR_PROJECT_ID>', {\n  integrations: {\n    amplitude: {\n      enabled: false,\n    },\n  },\n})\n"
		}
	},
	{
		"page": {
			"title": "ClickUp Integration",
			"breadcrumbs": "Docs / Highlight Docs / Integrations / ClickUp Integration",
			"content": "When you enable the ClickUp integration, Highlight will allow creating Tasks from the session replay and errors viewer. Track bugs or enhancements for your app as you triage frontend and backend errors or watch your users' replays.\nTo get started, go to the integrations and click the \"Connect\" button in the ClickUp section.\nFeatures\nComments can create a ClickUp task filled out with the body of the comment and link back to the Session.Grouping Errors shows a shortcut to create a ClickUp task pre-populated with the error linking to the full context of how the error occurred."
		}
	},
	{
		"page": {
			"title": "Discord Integration",
			"breadcrumbs": "Docs / Highlight Docs / Integrations / Discord Integration",
			"content": "By connecting Highlight with Discord, Highlight can send you and your team real-time messages based on different sessions, errors and more.\nTo get started, go to app.highlight.io/integrations and click the toggle to turn on the discord integration.\n\nOnce you do this, you will see an option to add discord channels on any of the alerts found at https://app.highlight.io/alerts. It'll look like this:\n"
		}
	},
	{
		"page": {
			"title": "Electron Support",
			"breadcrumbs": "Docs / Highlight Docs / Integrations / Electron Support",
			"content": "If you are running Highlight in Electron, a Desktop based JS framework, you can benefit from the additional functionality that tracks main process window events to stop and start Highlight recording when your app is minimized.\nPlease ensure you are using Highlight SDK version highlight.run@4.3.4. or higher. Call configureElectronHighlight with a BrowserWindow object to instrument Electron events.\nconst mainWindow = new BrowserWindow(...)\nconfigureElectronHighlight(mainWindow)\n\nUnder the hood, the function will forward the focus and blur events to your renderer process so that the highlight recording SDK can track them.\nmainWindow.on('focus', () => {\n    mainWindow.webContents.send('highlight.run', { visible: true });\n});\nwindow.on('blur', () => {\n    mainWindow.webContents.send('highlight.run', { visible: false });\n });\n\nThis will stop all highlight recording when the app is not visible and resume the session when the app regains visibility to help minimize performance and battery impact that Highlight may have on Electron users."
		}
	},
	{
		"page": {
			"title": "Front Integration",
			"breadcrumbs": "Docs / Highlight Docs / Integrations / Front Integration",
			"content": "Do you use Front.com to communicate with your customers? Add the Highlight plugin and view Highlight sessions right from the conversation.\n\nSimply visit https://app.frontapp.com/settings/tools and add the Highlight plugin in one click.\nClick the Get Started button to add Highlight to your Front workspace."
		}
	},
	{
		"page": {
			"title": "GitHub Integration",
			"breadcrumbs": "Docs / Highlight Docs / Integrations / GitHub Integration",
			"content": "When you enable the GitHub integration, Highlight will allow creating Issues from the session replay and errors viewer. Track bugs or enhancements for your app as you triage frontend and backend errors or watch your users' replays. Enhance backend error stacktraces with GitHub's file context.\nTo get started, go to the integrations and click the \"Connect\" button in the GitHub section.\nFeatures\n\nComments can create a GitHub issue filled out with the body of the comment and link back to the Session.\n\nGrouping Errors shows a shortcut to create a GitHub issue pre-populated with the error linking to the full context of how the error occurred.\n\nEnhance Error Stacktraces by using context fetched from files on GitHub.\n"
		}
	},
	{
		"page": {
			"title": "Grafana Integration",
			"breadcrumbs": "Docs / Highlight Docs / Integrations / Grafana Integration",
			"content": "We support integrating with Grafana to visualize metrics from your applications frontend and backend.\nTrack network request latency, application errors, and backend traces all in one place. You'll get customization\ninto aggregate query types (p50, p99, etc.) for performance and availability metrics automatically captured from\nour SDKs, with the ability to report custom metrics and traces as well.\n\nHow it works\nWe expose a Grafana Data Source that you can configure in your own self-hosted or cloud-managed Grafana instance.\nOnce you have your highlight.io account connected, you can build your own dashboards and write queries to our\nAPI. We also support exposing our backing analytics data store, ClickHouse, so that your team can write\nSQL queries and get raw access to slice / dice the data.\n\nInterested in getting this set up? Reach out to us at support@highlight.io."
		}
	},
	{
		"page": {
			"title": "Height Integration",
			"breadcrumbs": "Docs / Highlight Docs / Integrations / Height Integration",
			"content": "When you enable the Height integration, Highlight will allow creating Tasks from the session replay and errors viewer. Track bugs or enhancements for your app as you triage frontend and backend errors or watch your users' replays.\nTo get started, go to the integrations and click the \"Connect\" button in the Height section.\nFeatures\n\nComments can create a Height task filled out with the body of the comment and link back to the Session.\n\nGrouping Errors shows a shortcut to create a Height task pre-populated with the error linking to the full context of how the error occurred.\n"
		}
	},
	{
		"page": {
			"title": "Intercom Integration",
			"breadcrumbs": "Docs / Highlight Docs / Integrations / Intercom Integration",
			"content": "Highlight makes it easy to send events to Intercom. If you have both Highlight and Intercom already configured, then you're all set. We've already set things up for you in the background.\nIf you want to disable this integration, you can set enabled: false for the integration in your client config:\nH.init('<YOUR_PROJECT_ID>', {\n  integrations: {\n    intercom: {\n      enabled: false,\n    },\n  },\n})\n\nMessaging\nWhenever a user sends you a message on Intercom, Highlight will add a custom user attribute called highlightSessionUrl to the user. This is the URL for the latest session created by that user. This is helpful to see what the user was doing that led up to the user sending a message.\nAPI\ntrackEvent\nCalling H.track will forward the data to Intercom's Intercom('trackEvent').\nH.track('signup_button_clicked', {\n  firstTime: true,\n  impressions: 10,\n})\n\n// The Highlight track call is equivalent to this Intercom call\nIntercom('trackEvent', 'signup_button_clicked', {\n  firstTime: true,\n  impressions: 10,\n})\n"
		}
	},
	{
		"page": {
			"title": "Jira Integration",
			"breadcrumbs": "Docs / Highlight Docs / Integrations / Jira Integration",
			"content": "When you enable the Jira integration, Highlight will allow creating Tasks from the session replay and errors viewer. Track bugs or enhancements for your app as you triage frontend and backend errors or watch your users' replays.\nTo get started, go to the integrations and click the \"Connect\" button in the Jira section.\nFeatures\n\nComments can create a Jira task filled out with the body of the comment and link back to the Session.\n\nGrouping Errors shows a shortcut to create a Jira task pre-populated with the error linking to the full context of how the error occurred.\n"
		}
	},
	{
		"page": {
			"title": "Linear Integration",
			"breadcrumbs": "Docs / Highlight Docs / Integrations / Linear Integration",
			"content": "When you enable the Linear integration, Highlight will allow creating Issues from the session replay and errors viewer. Track bugs or enhancements for your app as you triage frontend and backend errors or watch your users' replays.\nTo get started, go to the integrations and click the \"Connect\" button in the Linear section.\nFeatures\n\nComments can create a Linear issue filled out with the body of the comment and link back to the Session.\n\nGrouping Errors shows a shortcut to create a Linear task pre-populated with the error linking to the full context of how the error occurred.\n"
		}
	},
	{
		"page": {
			"title": "Mixpanel Integration",
			"breadcrumbs": "Docs / Highlight Docs / Integrations / Mixpanel Integration",
			"content": "We've made it easy to use Mixpanel with Highlight. If you don't already have Mixpanel initialized in your app, you can have Highlight initialize it for you by specifying your Mixpanel Project Token in the config.\nH.init('<YOUR_PROJECT_ID>', {\n  integrations: {\n    mixpanel: {\n      projectToken: '<MIXPANEL_PROJECT_TOKEN>',\n    },\n  },\n})\n\nWhenever you call H.track() or H.identify() it will forward that data to Mixpanel's track and identify calls. If you want to disable this behavior, you can set enabled: false for the integration:\nH.init('<YOUR_PROJECT_ID>', {\n  integrations: {\n    mixpanel: {\n      enabled: false,\n    },\n  },\n})\n\nAPI\ntrack()\nCalling H.track() will forward the data to Mixpanel's track(). Highlight will also add a Mixpanel property called highlightSessionURL which contains the URL to the Highlight session where the track event happened.\nidentify()\nCalling H.identify() will forward the data to Mixpanel's identify()."
		}
	},
	{
		"page": {
			"title": "Pendo Integration",
			"breadcrumbs": "Docs / Highlight Docs / Integrations / Pendo Integration",
			"content": "Highlight's Pendo integration is in alpha. In order to use it, you must request access from Highlight support.\nWe've made it easy to use Pendo with Highlight. If you don't already have Pendo initialized in your app, you can have Highlight initialize it for you by specifying your Pendo Project Token in the config.\nH.init('<YOUR_PROJECT_ID>', {\n  integrations: {\n    pendo: {\n      projectToken: '<PENDO_PROJECT_TOKEN>',\n    },\n  },\n})\n\nWhenever you call H.track() or H.identify() it will forward that data to Pendo's track and identify calls. If you want to disable this behavior, you can set enabled: false for the integration:\nH.init('<YOUR_PROJECT_ID>', {\n  integrations: {\n    pendo: {\n      enabled: false,\n    },\n  },\n})\n\nAPI\ntrack()\nCalling H.track() will forward the data to Pendo's track(). Highlight will also add a Pendo property called highlightSessionURL which contains the URL to the Highlight session where the track event happened.\nidentify()\nCalling H.identify() will forward the data to Pendo's identify()."
		}
	},
	{
		"page": {
			"title": "Segment Integration",
			"breadcrumbs": "Docs / Highlight Docs / Integrations / Segment Integration",
			"content": "If you have an existing codebase calling Segment's identify() and track() methods, then you won't have to call Highlight's. Highlight will automatically forward data sent to Segment to your Highlight sessions.\nWe are currently working with Segment on an official integration where you can enable, configure, and send data to Highlight. If you'd like to use this, then upvote this feature request.\nEnabling the Segment Integration\nH.init('<YOUR_PROJECT_ID>', {\n  enableSegmentIntegration: true,\n})\n\nSegment's identify() calls will now start forwarding to Highlight.\nEnabling Track data forwarding\nTo forward analytics.track() calls to Highlight, you will need to use the HighlightSegmentMiddleware. This is available in the highlight.run package starting in version 2.10.0.\nimport { H, HighlightSegmentMiddleware } from 'highlight.run'\n\nH.init('<YOUR_PROJECT_ID>', {\n  enableSegmentIntegration: true,\n})\nanalytics.addSourceMiddleware(HighlightSegmentMiddleware)\n\nSearching for segment events\nSearching for segment events is as easy as using the segment-event filter in the session search UI. This is what it looks like.\n"
		}
	},
	{
		"page": {
			"title": "Slack Integration",
			"breadcrumbs": "Docs / Highlight Docs / Integrations / Slack Integration",
			"content": "By connecting Highlight with Slack, Highlight can send you and your team real-time messages based on different events that happen on your app and Highlight.\nTo get started, go to https://app.highlight.io/alerts and click the \"Sync with Slack\" button.\nFeatures\n\nComments will send a Slack message to whoever is tagged in a comment\n\nAlerts will send a Slack message to channels or users who want to receive alerts\n"
		}
	},
	{
		"page": {
			"title": "Vercel Integration",
			"breadcrumbs": "Docs / Highlight Docs / Integrations / Vercel Integration",
			"content": "If you use Vercel to deploy your app, you can install the Vercel Highlight integration here: https://vercel.com/integrations/highlight/. Below are the details of what this integration provides.\nVercel SDK Integrations\nAfter linking your Vercel projects to your Highlight projects, Highlight will automatically set the HIGHLIGHT_SOURCEMAP_API_KEY environment variable. If you're using @higlight-run/sourcemap-uploader or withHighlightConfig to upload your sourcemaps, those tools will check for this API key.\nMore details on calling these methods here.\nVercel Log Drain Integrations\nIf you use Vercel to deploy your server-side applications, the Vercel integration will also send your logs to Highlight. Vercel will forward build logs, lambda and edge function (server-side) logs, and static access logs. You can view these logs in the Highlight UI by clicking on the \"Logs\" tab in your dashboard. To configure whether to collect logs in highlight.io, you can do this by limiting logs in your billing settings.\nMore details on turning on this integration here."
		}
	},
	{
		"page": {
			"title": "Changelog Overview",
			"breadcrumbs": "Docs / Highlight Docs / Highlight.io Changelog / Overview",
			"content": "Stay up to date with what we work on week over week:\nChangelog 26Client-side network sanitizing, Tracing beta improvements, Next.js tracing, Java 11 support.Changelog 25GitHub stack trace settings, Next.js Edge runtime support, Large session exportsChangelog 24GitHub-enhanced stack traces, Session search on ClickHouse, Algora.io open-source bountiesChangelog 23Error list visual indicator, Poll for new sessions, Pino.js support, Alerts redesign Changelog 22Remix SDK, Render.com Log Stream, Go & Python SDK updatesChangelog 21GitHub Auth, Invite detection, AllContributor AppChangelog 20User Management, New logging connectorsChangelog 19Demo project, Comment UI facelift, etc.Changelog 18Error boundary improvements, GitHub ticket integration, etc.Changelog 17New Setup Page, Session caching, etc.Changelog 16Logging is in Alpha!Changelog 15New Product Pages & Devtools Improvements!Changelog 14New Signup Flow, Python Guides, & Session Replay Fixes!Changelog 13HackerNews Launch, SDK Docs, DocSearch, etc.Changelog 12Open Source, Smoother UX, & New SDKs!"
		}
	},
	{
		"page": {
			"title": "Changelog 12 (02/17)",
			"breadcrumbs": "Docs / Highlight Docs / Highlight.io Changelog / Changelog 12 (02/17)",
			"content": "Open Source!\nhighlight.io is open source at https://github.com/highlight/highlight (would appreciate a star ⭐️). We've also got lots of updates to share on this front as we grow, so stay tuned!\nChanging the status of an error is now instant!\nWe're now using optimisticResponses in apollo to update the state of an error. When you change the status, this now happens instantly in the UI 🤯.\nPR Link\nSmoother frontend routing logic.\nWe upgraded react router this week, which has made some significant performance improvements to the app; switching between errors/sessions is now silky smooth.\nPR Link\nNew SDKs!!\nWe now support several more Python SDKs: Flask, Django, Python Azure Functions.\nPython Docs\nCloudflare Docs"
		}
	},
	{
		"page": {
			"title": "Changelog 13 (02/24)",
			"breadcrumbs": "Docs / Highlight Docs / Highlight.io Changelog / Changelog 13 (02/24)",
			"content": "The new CommandBar!\nType out \"Cmd + K\" in your dashboard to search for fields on sessions, errors and more. Here's a sneak peak:\n\nWe launched on HackerNews\nWe launched on hackernews a few days ago, and gained surpassed 1.5k github stars!!! Check out our launch and if you haven't already, check us out on github.\nContributing a new SDK:\nInterested in adding a new SDK for your for your backend (that isn't support here)? Check out our new docs on adding an SDK. We're powered by opentelemetry, so adding something for your framework shouldn't be too tough; we're also down to work with you on it!\nBetter Doc Search\nThanks to our friends at Algolia, search in our docs is much smoother now! Give it a try with CMD+K.\nNew SDKs!!\nWe've shipped even more SDKS this week:\nGo Fiber\nPython Fast API\nOur new logging product (🤫)\nWe're making a lot of progress on our new logging product; want to join the beta? Shoot us a message in discord\nImprovements\nSelf-hosting improvements (docs)\nLots of work on logging!"
		}
	},
	{
		"page": {
			"title": "Changelog 14 (03/03)",
			"breadcrumbs": "Docs / Highlight Docs / Highlight.io Changelog / Changelog 14 (03/03)",
			"content": "Our New Signup Flow!\nWe just shipped a new signup flow on app.highlight.io. Feel free to give a try :)\n\nFixes to Replay Jitters\nThis week, we made quite a lot of improvements to jitter/jank on the replay timeline. Notably, there was a bug related to inactive periods as well as the timeline UI resetting multiple times.\nPR Link\nNew Python Guide Homepage\nOur python guides now have a new home; check them out here.\nMore Logging Updates (🤫)\nWe're making a lot of progress on our new logging product; want to join the beta? Shoot us a message in discord."
		}
	},
	{
		"page": {
			"title": "Changelog 15 (03/11)",
			"breadcrumbs": "Docs / Highlight Docs / Highlight.io Changelog / Changelog 15 (03/11)",
			"content": "Added a \"goto\" button on each devtools resource.\nIn the devtools panel, you can now directly click a \"goto\" icon on an error, network request, or log. Check it out:\nPR Link\n\nMore improvements to replay speed + jitters.\nSmall issues related to caching the time of a given session across multiple sesions.\nPR Link\nSlack alerts link to a specific instance.\nSlack alerts normally linked to the error group, but didn't link to the specific instance. We now link to the exact instance of an error that way you click into the relevant session.\nPR Link\nNew product pages on our landing page.\nWe just added some new product pages on our landing page. Take a look and share feedback if you like:\n\nhighlight.io/session-replay\n\nhighlight.io/error-monitoring\n\nhighlight.io/logging\n\nSVB Exposure\nHighlight.io luckily had no exposure to the revent SVB situation, however, we understand that many of our customers might. If this is the case, and you need payment relief for your subscription, please reach out to us at support@highlight.io."
		}
	},
	{
		"page": {
			"title": "Changelog 16 (03/19)",
			"breadcrumbs": "Docs / Highlight Docs / Highlight.io Changelog / Changelog 16 (03/19)",
			"content": "Logging is in Alpha!\nLots more to come on the logging front, but please check give our logging product a peak at https://app.highlight.io/logs!\n\nAdded support for Nest.js\nGuide link here."
		}
	},
	{
		"page": {
			"title": "Changelog 17 (04/07)",
			"breadcrumbs": "Docs / Highlight Docs / Highlight.io Changelog / Changelog 17 (04/07)",
			"content": "\nNew setup page just dropped!\nWe just launched a new setup page that makes it easier to get started with highlight.io. Check it out at https://app.highlight.io/setup.\nAbility to turn off session caching for high-memory playback.\nFor customers that run a very memory-intensive stack (using canvas recording, or even with lots of changes happening in the dom), the local session player can occosianally slow down the browser tab. We've added a new option to the highlight.io config to turn off session caching. See docs here.\nPR Link\nSetting up alerts no longer require a slack connection.\nBefore this change, there was a bug that made it difficult to set up alerts without a slack channel. This is no longer the case.\nPR LInk\nDocs and landing (at highlight.io) now live in our main repo.\nIts now easier to contribute to our docs and landing page now that they both live in the same repo!\nPR Link\nSupport for codespaces for contributors.\nInterested in contributing to highlight.io? Its now easier than ever to get started with our new codespaces setup. Check out our contributing guide for more info.\nPR Link\nLots of logging updates!\nLaunch coming soon..."
		}
	},
	{
		"page": {
			"title": "Changelog 18 (04/26)",
			"breadcrumbs": "Docs / Highlight Docs / Highlight.io Changelog / Changelog 18 (04/26)",
			"content": "\nError boundary improvements!\nWe just shipped a bunch of improvements to our error boundary. Namely:\nNo longer required to import a .css file.Lots of design updates (see above)\nGitHub Integration is live\nOur GitHub integration is now live. Checkout the docs here.\nDocs for our hobby deploy is live\nYou can now deploy Highlight.io on a hobby instance. It's important to note that this is different from our dev deploy, which is used for developing on Highlight (useful for contributors). The hobby deploy is for folks that want to self-host Highlight for a low-traffic setup. Docs here.\nOpen Source Updates\nLaunch week recap\nInterested in hearing about how our launch week went last week? Take a look on our blog here.\nGitHub Discussion on Error Monitoring\nWe're focusing on improving our error monitoring product this upcoming quarter. Please share on this GitHub discussion."
		}
	},
	{
		"page": {
			"title": "Changelog 19 (05/22)",
			"breadcrumbs": "Docs / Highlight Docs / Highlight.io Changelog / Changelog 19 (05/22)",
			"content": "\nDemo Project\nCheck out our new demo project.\nYou can play around and see how the Highlight application works with a live project with plenty of data.\nLook closely. You might be able to find your own highlight.io sessions recorded on the demo project. That's right! We use Highlight ourselves, and we pipe all of our data to the demo project.\n\nComment UI Facelift\nWe've given the Comment UI a facelift.\nIt fits better with our design system.We have a new draggable handle just below the session timeline.New inline issue creation for connected issue trackers (GitHub, Linear, Height)\n\nWinston.js Highlight Transport\nCheck out our new Winston.js Highlight Transporter!\nYou can log to Winston as per usual, and Highlight will capture your logs and display them on your Highlight application.\nCanvas recording is getting even more powerful\nWe dug deep into our most complex Canvas implementation with multiple overlaying canvases on a single page.\nWe're snapshotting blob videos using Canvas and capturing frames from multiple canvases, regardless of overlays.\n\nOption to only record session with errors\nHighlight users with an enormous number of sessions may not want to record all of them.\nYou can now opt into error-only recording. If the session throws an error, we'll record it. If not, that session never hits your Dashboard.\n"
		}
	},
	{
		"page": {
			"title": "Changelog 20 (06/06)",
			"breadcrumbs": "Docs / Highlight Docs / Highlight.io Changelog / Changelog 20 (06/06)",
			"content": "\nUser management features\nSpencer Amarantides joined our team last week and has already shipped his first feature!\nWe can now create, view and delete Highlight team invites.\n\nAnd the email that invited users receive is now cleaner and easier to understand.\n\nNew Logging connectors\n\nAWS Kinesis\n\nFluent Forward\n\nFilesystem\n\nLoguru\n\nThese new connectors make Highlight much easier to use with AWS, Docker, custom VMs and Python!\nWe've long supported Open Telemetry's logging protocol, but now we also support Fluent Forward, which will make working with AWS and other Fluent-Forward-compatible systems much easier."
		}
	},
	{
		"page": {
			"title": "Changelog 21 (06/21)",
			"breadcrumbs": "Docs / Highlight Docs / Highlight.io Changelog / Changelog 21 (06/21)",
			"content": "GitHub Authentication\nBy popular request, we've implemented GitHub sign up. We've linked it to your primary GitHub email through Firebase authentication.\nInvite detection\nMany users come directly to Highlight because their team is using the product but they don't realize that they need to come through an invite link in order to join their workspace.\nWe now check for available workspace invitations on sign up, so team members will be more likely to join their workspace as intended.\n\nAllContributor GitHub App\nWe've installed the AllContributor GitHub app and integrated it with our codebase.\n\nNew Slack Embed\nWe already support tagging a Slack channel in a session comment.\nNow we take a screenshot of that session and embed it in the Slack channel to add extra context to the message.\n\nHobby Deploy off localhost\nThe Hobby Deploy assumed that it would always host itself on localhost.\nWe fixed that issue by passing REACT_APP_PRIVATE_GRAPH_URI and REACT_APP_PUBLIC_GRAPH_URI to the Docker containers, so you can configure the endpoints to run on any domain you like.\nPython 3.11 Support\nOur SDK now supports Python 3.11."
		}
	},
	{
		"page": {
			"title": "Changelog 22 (08/07)",
			"breadcrumbs": "Docs / Highlight Docs / Highlight.io Changelog / Changelog 22 (08/07)",
			"content": "Remix SDK at v0\nRemix works great with Highlight. It was surprisingly easy to instrument.\nCheck out our @highlight-run/remix docs for an easy walkthrough.\n\nRender.com Log Stream\nQuickly and easily configure a Render log drain with Highlight: https://dub.sh/UmfNHwu\n\nCanvas Manual Snapshotting\n@Vadman97 solved a long-standing issue with WebGL double buffering. The WebGL memory would render a transparent image even though the GPU was rending the image correctly. This caused missing images in Session Replay.\nTake full control over your Canvas snapshots with the manual snapshotting docs\n\nSet \"Service Name\" and \"Service Version\" with the Python and Go SDKs\nWe've added service_name and service_version parameters to the Python SDK and the Go SDK.\nThese params make logs much more searchable.\n\n🚨Community Contribution 🚨\nRepaired scrolling in metadata\nShout out to to Kalkidan Betre—@kalibetre on GitHub—for their open source contribution. They noticed that our Metadata window on the Session Replay screen wasn't scrolling correctly, and they sent in a pull request to fix it.\nThanks Kalkidan!\n"
		}
	},
	{
		"page": {
			"title": "Changelog 23 (08/22)",
			"breadcrumbs": "Docs / Highlight Docs / Highlight.io Changelog / Changelog 23 (08/22)",
			"content": "Visual indicator in Session Replay devtools\nSessions can be long and contain huge lists of items.\nAs you watch your session replay, you can now see the items progress through the list automatically, with an indicator that tells you if the item is before or after the current timestamp.\n\nPoll for new session, errors and logs\nWe often found ourselves refreshing our Highlight dashboard to update our data.\nHighlight's web app now polls for new sessions, errors and logs, so you don't have to refresh the page every few seconds.\nNew results cause a button to pop up, prompting you to load the new records.\n\nPino.js log support\nWe've added support for yet another logging provider!\nWelcome pino.js to the Highlight log family.\n\nAlerts redesign\nWe're working through a series of redesigns for our Alerts forms.\nCheck out our progress 👇\n"
		}
	},
	{
		"page": {
			"title": "Changelog 24 (09/11)",
			"breadcrumbs": "Docs / Highlight Docs / Highlight.io Changelog / Changelog 24 (09/11)",
			"content": "GitHub-enhanced stack traces\nHighlight is all about tight integrations. We’ve expanded our GitHub integration to link stack traces directly to the relevant files in your GitHub repo.\nIt’s easy to enable and even easier to use.\nIt seems like a tiny feature at first, but it’ll spoil you. You’ll question how you ever lived without it.\nGitHub Integration Docs\n\nSession search moves to ClickHouse\nWe’ve shipped a new UI for searching sessions, and session search is now fully powered by ClickHouse. That means you get a snappy search experience with real-time previews of the keys you can use to search.\n\nAlgora open-source bounties\nWe’ve been posting bounties to Algora.io, and folks have been claiming them!\nOur core team is stretched thin enough with feature work and the tricky, involved bugs that we prioritize every day, which leaves all the small bugs to languish, unaddressed. Until now!\nAlgora is helping us stay focused while incentivizing the Highlight community to close out bugs and claim some cold, hard cash.\nIf this program keeps growing, will we even need a core team???\n\nError tag embeddings\nWe’ve been playing around with Large Language Model (LLM) embeddings and applying them to our error data.\nNow that we’re saving embeddings for each of our errors, we might as well make those embeddings searchable!\nVisit app.highlight.io/error-tags to see our latest experiment. We’ve made our internal Highlight App errors taggable and searchable via LLM. Toss in an error message of your own, or test one of our error messages to see how the system categorizes it.\n"
		}
	},
	{
		"page": {
			"title": "Changelog 25 (10/03)",
			"breadcrumbs": "Docs / Highlight Docs / Highlight.io Changelog / Changelog 25 (10/03)",
			"content": "GitHub Enhancement Settings\nWe recently released GitHub-enhanced stack traces, and now we've surfaced your enhancement settings right next to your stack traces. It's a quality-of-life enhancement that unearths your buried settings and puts them right where you need them.\n\nEdge-compatible Next.js\nWe've got errors, logs and sessions working on Vercel's Edge runtime with both Page and App Router!\nThe docs are a work-in-progress, but they're all available on our Next.js Walkthrough page.\nWe've got new API endpoint wrappers that work with Vercel's serverless Node.js functions. And we've got a new Edge-specific API endpoint wrapper that's compatible with Edge's stripped-down API.\n\nSession Exporting is getting easier.\nCanvas rendering can get huge, which was causing problems with session export.\nWe're now rendering each Canvas chunk to a separate mp4 file so that they can export within Lambda timeout limits.\n"
		}
	},
	{
		"page": {
			"title": "Changelog 26 (11/08)",
			"breadcrumbs": "Docs / Highlight Docs / Highlight.io Changelog / Changelog 26 (11/08)",
			"content": "Client-side network sanitizing\nSanitize your network requests on the client, preventing sensitive data from ever reaching Highlight's servers.\nCheck out the docs for our web client's requestResponseSanitizer function.\n\nTracing improvements\nWe're hard at work on Tracing, building out new features every day.\nCheck out the latest two features:\n\nTraces embedded in Session Replay network requests:\n\n\nA fresh, new flame graph to better visualize sources of latency:\n\n\nNext.js tracing support\nWe continue to roll out improvements to our popular Next.js SDK, prioritizing Vercel support.\nHighlight can now consume Next.js's built-in OpenTelemetry instrumentation. This means free request/response spans for Next's Node runtime. We've also re-worked our Next.js SDK docs to streamline your integrations.\nWe have walkthroughs for both the Page and App Routers, as well as details on our Edge Runtime support.\nJava 11 support\nWe got a request for Java 11 support, so we hopped on it!\nIntegrate your Java 11 application with our Java docs today."
		}
	},
	{
		"page": {
			"title": "Welcome to highlight.io",
			"breadcrumbs": "Docs / Highlight Docs / Welcome to highlight.io",
			"content": "highlight.io is monitoring software for the next generation of developers. And it's all open source :).\nhighlight.io gives you fullstack visibility into your application by pairing session replay, error monitoring, and logging, allowing you to tie frontend issues with backend logs and performance issues.\nWhen highlight.io is fully integrated, this is what it looks like:\n\nAnd to get started:\nGet StartedGet started with highlight.io. Instrument your frontend & backend.\nAbout us\nMission & Values.Details about our company, our values, and open source.Compliance & Security.Our security certificates, and contact details.Contributing to highlight.ioOpen source, self hosting highlight, and contributing.Self hosting highlight.ioOpen source, self hosting highlight, and contributing.\nFeatures\nSession Replay.Session replay features, how to get started, etc..Error Monitoring.Error monitoring features, how to get started, etc..Logging.Logging features, how to get started, etc.."
		}
	},
	{
		"page": {
			"title": "Get Started",
			"breadcrumbs": "Docs / Highlight Docs / Get Started",
			"content": "Get StartedIntegrate highlight.io into your web app."
		}
	},
	{
		"page": {
			"title": "Our Public Roadmap",
			"breadcrumbs": "Docs / Highlight Docs / Roadmap",
			"content": "Read about what we’re considering, what we have planned, and what we’re building!\nFeature RequestView on GitHubUnder ConsiderationThe features and improvements on our radar. Feel free to contribute.Session Replaywebgl / canvas recording at dynamic bitrate via webrtc #4517👍5Vote on GitHubError MonitoringImprove error search experience #4693👍1Vote on GitHubSupport for searching issues when creating them #4460❤️1🚀1Vote on GitHubLink to session errors feed from session #4474❤️1👍1🚀1Vote on GitHubLoggingUX for declaring searchable/indexed fields on logs #4658👍1Vote on GitHubFilter log lines by user details #4680Vote on GitHubFuture WorkSending and Visualizing Metrics #4447👍3Vote on GitHubSending and Visualizing Traces #4446❤️10🚀1Vote on GitHubMobile + React Native Session Recording #4444👀3👍36🚀5❤️3🎉3Vote on GitHubIn ProgressCheck out what we're currently bringing to life.Error MonitoringSupport multiple sourcemap paths in `sourcemap-uploader` #4463👍1🚀1🎉1Vote on GitHubLoggingOutstanding SDK Support #4452👍1👀1Vote on GitHubLogging Exporter Support #4450❤️1Vote on GitHubShipped 🚢What we've delivered so far.Session ReplayWebsocket message recording #4403👀1❤️4🚀2Read the ChangelogPrivacy SDK Improvements #4461👍4🚀2👀2Read the ChangelogReplace client fingerprint.js implementation with generated client ID #4475🎉1🚀1Read the ChangelogAdd a \"goto\" for each resource in the devtools tab #4512Read the ChangelogAdd new filters/fields to network requests #4456👍1❤️1Read the ChangelogError Monitoringnext.js sdk should trace ISR `getStaticProps` invocations and errors #4774Read the ChangelogGitHub integration for creating issues #4459👍1Read the ChangelogError Boundary Updates & Enhancements #4288❤️1🎉1Read the ChangelogLoggingLog Alerting & Visualization #4451👍2😄1Read the ChangelogLog Search #4454❤️1Read the ChangelogLogging SDK Support #4449👍1👀1Read the Changelog"
		}
	},
	{
		"page": {
			"title": "Values",
			"breadcrumbs": "Docs / Highlight Docs / Company / Values",
			"content": "Overview\nThis doc acts as a reference for our values at highlight.io, which includes how we work and we build things. It acts a way for us to understand how we should operate and what the \"startup mentality\" means to us. If you'd like to learn more about our product philosophy (which is more related to our product) see this doc.\nWe build in public.\nWith everything we build, we maintain an unwavering promise to use open source technologies so that you and your team don't have a dependency on our hosted offerings.\nWe strive to build in public in every way we can. This means sharing our roadmap, product specs, and company strategy. We see this as giving you all the more reason to consider joining us in building highlight.\nWe execute quickly and fail fast.\nGiven that most of the things we build are zero to one, there's often no better way to learn than to build. It's hard to predict how something will scale or be interacted w/ without building something and getting early feedback. With this philosophy, however, it's easy to ship low quality work. To address this, we always prefer to \"cut scope, not quality\"; we build out a few, very polished modules rather than many half-baked ones.\nABC: Always be chilling....\nThough working at highlight.io can be fast-paced at times, we keep it chill. This means aking time for social events, taking time off, and learning about each other beyond just work. We're all humans, and we all have lives outside of work.\n"
		}
	},
	{
		"page": {
			"title": "Compliance & Security",
			"breadcrumbs": "Docs / Highlight Docs / Company / Compliance & Security",
			"content": "Security Certifications\nWe take compliance and security very seriously at highlight.io. We officially have a SOC 2 Type2 report, GDPR compliance and are currently in the process of attaining HIPAA.\n\nRequesting information\nIf you're evaluating highlight.io at your company and want to request documentation of any of our certifications, request a DPA, or have questions on the security end, please shoot us an email at security@highlight.io.\nSubprocessors\nBelow is a list of our subprocessors:\nSubprocessorProcessing UsageCountry of locationAmazon Web Services (AWS)Data hosting and processingUSAGoogleData StorageUSAMixpanelAnalyticsUSAHubspotCRM, Marketing AutomationUSAIntercomSupport ServicesUSASendgridEmail DeliveryUSADatadogMetricsUSAStripePayment ProcessingUSAClickhouseData storageUSA\nAvoiding Cookie Consent (disabling localStorage)\nIf you're using the highlight.io browser client and would like to avoid requesting cookie consent from your users,\nyou can pass the storageMode: 'sessionStorage' option to H.init to make sure that highlight will not persist\nany data in window.localStorage. This will mean that if a user leaves your site and returns later, a new\nhighlight recording will start regardless of the time since they left,\nsince we will not persist any metadata in the browser."
		}
	},
	{
		"page": {
			"title": "Contributing Overview",
			"breadcrumbs": "Docs / Highlight Docs / Company / Open Source / Contributing / Overview",
			"content": "How do I spin up highlight.io locally?\nLocal Development Guide.Running a docker version of highlight.io for development.GitHub Code Spaces GuideRunning highlight.io in a Code Spaces environment.\nWhat is the app architecture?\nApp ArchitectureOverall architecture guide.SDK DesignAdding an SDK.\nHow do I develop in ...?\nFrontendFrontend React.js development for app.highlight.io.BackendBackend GraphQL development for app.highlight.io.Landing SiteFrontend Next.js development for highlight.io landing site.DocsFrontend Next.js development for highlight.io/docs\nWhat are development best practices?\nGood First IssuesGood first issues to start with.Code StyleDefining our code styles."
		}
	},
	{
		"page": {
			"title": "GraphQL Backend",
			"breadcrumbs": "Docs / Highlight Docs / Company / Open Source / Contributing / GraphQL Backend",
			"content": "Frequently Asked Questions\nHow do I migrate schema changes to PostgreSQL?\nSchema changes to model.go will be automigrated. New tables should be added to Models. Migrations happen automatically in dev and in a GitHub action as part of our production deploy.\nHow do I inspect the PostgreSQL database?\ncd docker;\ndocker compose exec postgres psql -h localhost -U postgres postgres;\n\nwill put you in a postgresql cli connected to your local postgres docker container.\nRun commands such as \\d to list all tables, \\d projects to describe the schema of a\ntable (i.e. projects), or show * from sessions to look at data (i.e. rows in the sessions table).\nHow to generate the GraphQL server definitions?\nPer the Makefile, cd backend; make private-gen for changes to private schema.graphqls and cd backend; make public-gen for changes to public schema.graphqls. The commands can also be executed inside docker:\ncd backend;\nmake private-gen;\nmake public-gen;\n"
		}
	},
	{
		"page": {
			"title": "Frontend (app.highlight.io)",
			"breadcrumbs": "Docs / Highlight Docs / Company / Open Source / Contributing / Frontend (app.highlight.io)",
			"content": "Frequently Asked Questions\nHow do I change the Apollo Client GraphQL definitions?\nThe frontend is set up to host the Apollo Client definitions in frontend/src/graph/operators. Query definitions reside in query.gql while mutation definitions reside in mutation.gql.\nChanging these two files regenerates frontend hooks and other Typescript definitions. Having the frontend running will watch these two files for changes and update generated code. See the development docs for more info on running the frontend."
		}
	},
	{
		"page": {
			"title": "Landing Site (highlight.io)",
			"breadcrumbs": "Docs / Highlight Docs / Company / Open Source / Contributing / Landing Site (highlight.io)",
			"content": "Getting Started\nThe documentation rendered on https://highlight.io/docs is rendered from the docs-content directory. The code for rendering the landing page resides in highlight.io directory.\nTo run the app locally, install dependencies and call yarn dev as follows:\nyarn install;\nyarn dev:highlight.io;\nopen http://localhost:4000/\n\nChanges to docs-content may require refreshing the browser.\nFrequently Asked Questions\nHow do I test the blog locally?\nBlog posts rely on Hygraph for rendering and use an environment variable. Reach our on our discord if you need to work on the blog."
		}
	},
	{
		"page": {
			"title": "Documentation",
			"breadcrumbs": "Docs / Highlight Docs / Company / Open Source / Contributing / Documentation",
			"content": "Getting Started\nThe documentation rendered on https://highlight.io/docs is rendered from the docs-content directory. See the landing site contributing docs for more info."
		}
	},
	{
		"page": {
			"title": "Adding an SDK",
			"breadcrumbs": "Docs / Highlight Docs / Company / Open Source / Contributing / Adding an SDK",
			"content": "The highlight.io SDKs are powered by OpenTelemetry under the hood, and therefore report data to our deployed OpenTelemetry collector. For a better understanding of the architecture, take a look at the architecture page for a diagram of how data is sent to the collector and the public graph.\nIn our SDKs, we instantiate the following constructs to exports data over OTLP HTTPS to https://otel.highlight.io:4318/v1/traces and https://otel.highlight.io:4318/v1/logs respectively.\n\nTracerProvider - sets the global otel sdk configuration for traces\n\nBatchSpanProcessor - batches traces so they are exported in sets\n\nOTLPSpanExporter - exports traces to our collector over OTLP HTTPS\n\nLoggerProvider - sets the global otel sdk configuration for logs\n\nBatchLogRecordProcessor - batches logs so they are exported in sets\n\nOTLPLogExporter - exports logs to our collector over OTLP HTTPS\n\nThe SDK provides common methods for recording exceptions or logging, but this may depend on the language. For example, in Go, a logger hook API is provided to be configured by the application, but in Python, we automatically ingest a hook into the built in logging package.\nRecording an Error\nData we send over the OpenTelemetry specification is as a Trace with attributes set per the semantic conventions.\nWhen we create a Trace, we set three additional SpanAttributes to carry the Highlight context:\n\nhighlight.project_id - Highlight Project ID provided to the SDK\n\nhighlight.session_id - Session ID provided as part of the X-Highlight-Request header on the network request\n\nhighlight.trace_id - Request ID provided as part of the X-Highlight-Request header on the network request\n\nReporting an Error as an OTEL Trace\nAn exception is represented in OpenTelemetry as a Trace Event, per the semantic convention for exceptions.\nMany OpenTelemetry SDK implementations offer a span.record_exception(exc) method that automatically populates the semantic convention attributes with the correct values.\n\n# create a trace for the current invocation\nwith self.tracer.start_as_current_span(\"my-span-name\") as span:\n    span.set_attributes({\"highlight.project_id\": _project_id})\n    span.set_attributes({\"highlight.session_id\": session_id})\n    span.set_attributes({\"highlight.trace_id\": request_id})\n    try:\n        # contextmanager yields execution to the code using the contextmanager\n        yield\n    except Exception as e:\n        # if an exception is raised, record it on the current span\n        span.record_exception(e)\n        raise\n\n\nReporting a Log as an OTEL Trace\nIf a language's OpenTelemetry SDK does not support sending logs natively, we choose to send the message data as a Trace Event.\n\nEvent name - log\n\nlog.severity event attribute - the log severity level string\n\nlog.message event attribute - the log message payload.\n\nTo associate the highlight context with a log, we use the LogRecord Attributes with the following convention:\n\nhighlight.project_id - Highlight Project ID provided to the SDK\n\nhighlight.session_id - Session ID provided as part of the X-Highlight-Request header on the network request\n\nhighlight.trace_id - Request ID provided as part of the X-Highlight-Request header on the network request\n\n\npackage main\n\nimport \"github.com/highlight/highlight/sdk/highlight-go\"\n\nfunc RecordLog(log string) {\n\tspan, _ := highlight.StartTrace(context.TODO(), \"highlight-go/logrus\")\n\tdefer highlight.EndTrace(span)\n\n\tattrs := []attribute.KeyValue{\n\t\tLogSeverityKey.String(\"ERROR\"),\n\t\tLogMessageKey.String(entry.Message),\n\t}\n\tspan.AddEvent(highlight.LogEvent, trace.WithAttributes(attrs...))\n}\n\n\nRecording a Log\nIf an SDK supports the experimental logs ingest endpoint (v1/logs), prefer using that. Otherwise, see above for reporting the log as a trace event.\nA LogRecord is exported with an associated trace. Specific attributes for the file logging, line number, and more are set based on the logging semantic convention keys.\nHere's an example of the interception of python logging calls in our Python SDK to emit an OpenTelemetry LogRecord.\n\nattributes = span.attributes.copy()\nattributes[\"code.function\"] = record.funcName\nattributes[\"code.namespace\"] = record.module\nattributes[\"code.filepath\"] = record.pathname\nattributes[\"code.lineno\"] = record.lineno\nr = LogRecord(\n    timestamp=int(record.created * 1000.0 * 1000.0 * 1000.0),\n    trace_id=ctx.trace_id,\n    span_id=ctx.span_id,\n    trace_flags=ctx.trace_flags,\n    severity_text=record.levelname,\n    severity_number=std_to_otel(record.levelno),\n    body=record.getMessage(),\n    resource=span.resource,\n    attributes=attributes,\n)\n\n"
		}
	},
	{
		"page": {
			"title": "Application Architecture",
			"breadcrumbs": "Docs / Highlight Docs / Company / Open Source / Contributing / Application Architecture",
			"content": "Here's the high level structure of the code that you'll want to start tinkering with.\n\nSDKs sdk/\n\nFirstload\n\nClient\n\nhighlight-node / other SDKs\n\n\nPublic Graph backend/public-graph/graph/schema.resolvers.go SDK data ingest GraphQL endpoint, hosted locally at https://localhost:8082/public\n\nPrivate Graph backend/private-graph/graph/schema.resolvers.go GraphQL endpoint for frontend, hosted locally at https://localhost:8082/private\n\nWorkers backend/worker.go\n\nPublic graph worker processPublicWorkerMessage\n\nAsync worker Start\n\n\nGeneral Architecture Diagram\n\nCode Structure Diagram\n\nKafka Diagram\n\nInfluxDB Diagram\n\nOpenTelemetry Diagram\n"
		}
	},
	{
		"page": {
			"title": "GitHub Code Spaces",
			"breadcrumbs": "Docs / Highlight Docs / Company / Open Source / Contributing / GitHub Code Spaces",
			"content": "Running on GitHub Codepsaces (in browser or in VS Code)\nMake sure you've forked the repoVisit https://github.com/codespaces and start a codepsace for highlight/highlightInstall the VS Code Extension \"GitHub Codespaces\"Using VS Code, enter codespace - CMD + Shift + P, type codespace, select the Highlight codespaceIf docker is not running (try docker ps), run a full rebuild: press CMD + Shift + P, select Codespaces: Full Rebuild Container\n# from highlight/\ncd docker\n./run.sh\n# View `https://localhost:3000`\n"
		}
	},
	{
		"page": {
			"title": "Code Style",
			"breadcrumbs": "Docs / Highlight Docs / Company / Open Source / Contributing / Code Style",
			"content": "Code Style\nOur main priority is to keep our code to be easy to read and add to. We've codified and automated all style preferences as part of CI and development workflows (such as husky) so that there is one consistent source of truth. If you have ideas on how to improve our style linting, open a PR and let us know!\nLicense\nHighlight is Apache 2 licensed.\nBy contributing to Highlight, you agree that your contributions will be licensed under its Apache 2 license."
		}
	},
	{
		"page": {
			"title": "Good First Issues",
			"breadcrumbs": "Docs / Highlight Docs / Company / Open Source / Contributing / Good First Issues",
			"content": "First issues to take on\nIt's best to start with issues marked as \"good first issue\". We mark these issues based on how well-defined and testable they are. If you're interested in a larger project, adding support for new programming languages via a new SDK would always greatly appreciated. If there is a feature you're missing in Highlight, reach out on our discussions or on our discord to get a conversation started about the best implementation."
		}
	},
	{
		"page": {
			"title": "Self-hosted [Dev]",
			"breadcrumbs": "Docs / Highlight Docs / Company / Open Source / Self-hosting / Self-hosted [Dev]",
			"content": "Our Development Deployment\nInterested in deploying highlight.io on your local machine for developing in the Highlight codebase?\nDevelopment Deployment GuideGetting started with our developer deployment.\nIf you have any questions, don't hesitate to reach out!"
		}
	},
	{
		"page": {
			"title": "Self-hosted [Hobby]",
			"breadcrumbs": "Docs / Highlight Docs / Company / Open Source / Self-hosting / Self-hosted [Hobby]",
			"content": "Our Hobby Self-hosted Deployment\nInterested in deploying highlight.io on your local machine or on a small remote instance? You're in the right place. Here's a walkthrough on getting this set up:\nHobby Deployment GuideGetting started with our hobby deployment.\nLimitations\nWe don't recommend hosting Highlight yourself if you have more than 10k monthly sessions or 50k monthly errors. The infrastructure configuration in the docker compose is not meant to scale beyond a small number of sessions, and isn't resilient to an outage or version upgrades.\nThat being said, if the benefits of self hosting Highlight are signficant enough, you may want to consider an enterprise deployment (see our Enterprise Self Hosted Docs).\nIf you have any questions, don't hesitate to reach out!"
		}
	},
	{
		"page": {
			"title": "Self-hosted [Enterprise]",
			"breadcrumbs": "Docs / Highlight Docs / Company / Open Source / Self-hosting / Self-hosted [Enterprise]",
			"content": "Our Enterprise Self-hosted Deployment\nInterested in deploying Highlight to your own VPC at a larger scale than the hobby deployment? Please contact us in our discord community to get in touch.\nPricing\nPricing for our self-hosted enterprise deployment starts at $3k / month. Contact us at jay@highlight.io, or message us on discord to get in touch."
		}
	},
	{
		"page": {
			"title": "Telemetry",
			"breadcrumbs": "Docs / Highlight Docs / Company / Open Source / Self-hosting / Telemetry",
			"content": "How Telemetry works for self-hosted deploys\nTelemetry helps us understand how folks use highlight, what operating systems and hardware capabilities they have, and what features they use most. The metrics we collect are anonymized so that we can associate usage with a particular deployment, but never with a particular user email or name. We use our own highlight cloud product to collect metrics, so you can find exactly how the telemetry metrics are recorded and then stored + queried. Check out the telemetry code here to learn more.\nWhen you start highlight for development or a hobby deploy, our scripts will share the telemetry policy. If you'd like to disable telemetry, you can do so by editing the IsOptedOut function in backend/phonehome/phonehome.go. For a hobby deploy, you'll need to build the docker images from source to persist such a change.\nHeartbeat Metrics\nNameDescriptionTypenum-cpuCPU Countintmem-used-percentPercent memory usedfloatmem-totalBytes of memory totalint\nSelf-reported User Attributes\nNameDescriptionTypeabout-you-roleEngineering / Productstringabout-you-referralSite visit referrerstring\nUsage Metrics\nNameDescriptionTypebackend-setupIs a backend SDK integratedboolsession-countNumber of sessions recordedinterror-countNumber of errors recordedintlog-countNumber of logs recordedintsession-view-countNumber of sessions viewedinterror-view-countNumber of errors viewedintlog-view-countNumber of logs viewedint\nGeneral Telemetry\nNameDescriptionTypeversionHighlight version shastringis-onpremValue of env var ON_PREMstringdoppler-configWhen doppler is used, the name of the environment.stringphone-home-deployment-idA randomly-generated deployment identifier.string"
		}
	},
	{
		"page": {
			"title": "Our Competitors",
			"breadcrumbs": "Docs / Highlight Docs / Company / Our Competitors",
			"content": "We respect our competitors. In fact, we're not in the business of trying to convince people to use our product when it's not the right fit for them. Explore details about some of our competitors below.\nSession Replay Competitors\nLogRocketLearn more about how we compare to LogRocket.HotjarLearn more about how we compare to Hotjar.FullstoryLearn more about how we compare to Fullstory.SmartlookLearn more about how we compare to Smartlook.InspectletLearn more about how we compare to Inspectlet.DatadogLearn more about how we compare to Datadog.SentryLearn more about how we compare to Sentry.\nError Monitoring Competitors\nDatadogLearn more about how we compare to Datadog.SentryLearn more about how we compare to Sentry.\nLogging Competitors\nDatadogLearn more about how we compare to Datadog."
		}
	},
	{
		"page": {
			"title": "Product Philosophy",
			"breadcrumbs": "Docs / Highlight Docs / Company / Product Philosophy",
			"content": "Overview\nThis doc acts as a reference for our product philosophy at highlight.io, or to be more exact, how we think about what we build (not necessarily how we build it). It acts as a way for our team to prioritize work. If you'd like to learn more about our company values, check this doc.\nOur mission is to support developers (like you) to ship with confidence. We do this by giving you the tools you need to uncover, resolve, and prevent issues in your web app.\nCohesion\n\nOur product philosophy at highlight.io is centered around the concept of \"cohesion\", or the idea that we're focused on building a tightly coupled suite of tools that helps developers ship software with confidence.\nPrior to working on highlight.io, we all worked at several tech companies of varying sizes, and had first-hand experience trying to stitch together numerous tools to reproduce bugs. It wasn't uncommon that we had to do something like: log into Sentry to see a stacktrace, log into Splunk to query logs, and after investigating with even more tools, give up and log in \"as the user\" to try and reproduce the issue.\nPeople may think that we're building multiple products (session replay, error monitoring, etc..) but we see it as one. To see this in action, see our fullstack mapping guide.\nWe build for today's developer.\nIf you're building software in today's ecosystem, you probably want to JUST focus on building software. We challenge ourselves to build developer tooling that’s simple, straightforward and opinionated, but configurable if you want to customize your setup. highlight.io is built for developers that want to develop. Leave the monitoring stuff to us 👍.\nThe Vision\nWith highlight.io, we're changing that by building monitoring software that \"wraps\" your infrastructure and application, and we do ALL the work to stitch everything together. Our long-term goal is that you can trace everything from a button click to a server-side regression with little to no effort.\nNow, if you were to ask, \"but that's a lot to build, no?\" we would reply with \"Yes, give us a hand?\"."
		}
	},
	{
		"page": {
			"title": "Session Replay Features",
			"breadcrumbs": "Docs / Highlight Docs / Product Features / Session Replay / Overview",
			"content": "Session replay gives your team visibility into how people use your web app and insight into WHY bugs happen. In highlight.io, we focus heavily on \"cohesion\", or the mapping of sessions, errors and logs across your stack; that way you get an accurate and comprehensive idea of what happens.\nGet Started\nGet Started.Get started with error monitoring by installing highlight.io\nFeatures\nRead more about the features we support in Session Replay below:\nShadow DOM & Web Components.Support for Shadow DOM & Web ComponentsProxying through your domain.Support for proxying highlight.io requests through your domain.Canvas & Iframe Recording.Support for Canvas & Iframe RecordingDevtools Data.Capturing of console logs, network requests and errors.Extracting the Session URLSDK support for extracting the session URL from your sessions.Filtering SessionsOptions for filtering sessions.Tracking Users & Events.SDK support for tracking users and their corresponding actions throughout a session.GraphQLGraphQL operation names and formatted payloads.Live Mode.Support for following a user session in real-time.Performance Impact.The performance impact of the highlight.io snippet.Privacy & Redaction.Options to redact specific data being recorded in your frontend.Rage Clicks.Record when users click a specific elemtent frequently.Session Search.Features that allow you to search for sessions in your app.Session Search Deep Linking.The URL Schema we use for deep linking sessions.Disable Session CachingFor highlight.io power users, we support disabling session caching to reduce memory usage."
		}
	},
	{
		"page": {
			"title": "Canvas & Iframe",
			"breadcrumbs": "Docs / Highlight Docs / Product Features / Session Replay / Canvas & Iframe",
			"content": "Recording canvas elements\nhighlight.io supports recording canvas (and therefore WebGL) elements, although due to the nature of canvas, there are caveats regarding the quality/fidelity of the recording. Read more about how to get started with this in our canvas configuration docs. Below is a video demo of what the video recording looks like:\n\n\nInstalling highlight.io in an iframe\nThe highlight.io snippet supports recording within an iframe, but given the security limitations, there are caveats. Read more about this in our sdk configuration docs.\nRecording Cross-origin iframes\nTo support recording a cross-origin iframe that you own, we've added functionality into our recording client that allows the iframe to forward its events to the parent session. Read more about this in our sdk configuration docs.\nIf you do not own the parent page that is embedding your iframe cross-origin but you still want to record the iframe contents, pass recordCrossOriginIframe: false to the H.init options to force the iframe to record as a standalone app.\nOtherwise, the iframe will wait for the parent page to start recording."
		}
	},
	{
		"page": {
			"title": "Dev-tool Window Recording",
			"breadcrumbs": "Docs / Highlight Docs / Product Features / Session Replay / Dev-tool Window Recording",
			"content": "Devtools Recording\nhighlight.io supports recording all of the resources that you see in the chrome dev-tools window; that is, console messages, network requests and errors. Read more about how to instrument this data in our sdk configuration docs. Here's a sneak peak of what this looks like:\n"
		}
	},
	{
		"page": {
			"title": "Tracking Users & Recording Events",
			"breadcrumbs": "Docs / Highlight Docs / Product Features / Session Replay / Tracking Users & Recording Events",
			"content": "Identifying Users & Tracking Events\nWith session replay, it can be useful to identify the actual users and track actions that they perform. By default, your users in highlight.io remain anonymous, but we offer the option to identify and track actions with our javascript SDK. Read more in our SDK Configuration guide.\n\nDefinition of a Session\nA highlight session starts when you H.init in your web application (or call H.start if you are manually delaying the recording start). Once a session starts, we will continue recording in the same session for up to 4 hours. Each browser tab / instance will start a distinct session, so if your web app is opened in 2 tabs at once, we will record 2 sessions.\nHowever, once a session starts, it can be resumed. If your web app is opened in a single tab, closed, and then reopened within 15 minutes of closing, we will resume the existing highlight session. If more than 15 minutes have passed, we will start a new session.\nActive time is the time when a user is interacting with your page with no more than a 10-second gap in activity. For example, if a user is moving their mouse / typing / clicking for 30 seconds with no gaps of longer than 10 seconds, that would count as 30 seconds of active time."
		}
	},
	{
		"page": {
			"title": "Filtering Sessions",
			"breadcrumbs": "Docs / Highlight Docs / Product Features / Session Replay / Filtering Sessions",
			"content": "highlight.io allows you to filter sessions that you don't want to see in your session feed. This is useful for sessions that you know are not relevant to your application, or that are not actionable.\nFiltered sessions do not count towards your billing quota.\nSet up ingestion filters\nYou can set up ingestion filters by product to limit the number of data points recorded. You can filter sessions, errors, logs, or traces in the following ways:\nSample a percentage of all data.\nFor example, you may configure ingestion of 1% of all sessions. For each session we receive, we will make a randomized decision that will result in storing only 1% of those. The random decision is based on the identifier of that product model for consistency. With traces, the Trace ID is used to make sure all children of the same trace are also ingested.Rate limit the maximum number of data points ingested in a 1 minute window.\nFor example, you may configure a rate limit of 100 sessions per minute. This will allow you to limit the number of sessions recorded in case of a significant spike in usage of your product.Set up an exclusion query.\nFor example, you may configure an exclusion query of environment: development. This will avoid ingesting all sessions tagged with the development environment.\nWith these filters, we will only bill you for data actually retained. For instance, setting up ingestion of only 1% of all sessions will mean that you will be billed only for 1% of all sessions (as measured by our definition of a session). You can configure the filters on your project settings page in highlight.\nFilter sessions by user identifier\nIn some cases, you may want to filter sessions from a specific user. You can do this by adding the user identifier to the \"Filtered Sessions\" input under the \"Session Replay\" tab in your project settings. Please note that we use the identifier (or first argument) sent in your H.identify method to filter against (SDK docs here).\nFiltering sessions without an error\nIf you're using Highlight mostly for error monitoring, enable the \"Filter sessions without an error\" in your project settings to only record sessions with an error.\nFiltering sessions using custom logic\nIf you'd like to filter sessions based on custom logic (e.g. filtering sessions from users who have not logged in), use the manualStart flag in your H.init configuration. This will allow you to start and stop a session at your discretion.\nH.init({\n  manualStart: true,\n  // ... other options\n})\n\nThen you can manually start a session by calling H.start:\nuseEffect(() => {\n  if (userIsLoggedIn) {\n    H.start()\n  }\n}, [userIsLoggedIn])\n\nDisable all session recording\nIf you're interested in using Highlight for the error monitoring or logging products without session replay, use the follow setting:\nimport { H } from 'highlight.run';\n\nH.init('<YOUR_PROJECT_ID>', {\n    disableSessionRecording: true,\n    // ...\n});\n\nWant to filter something else?\nIf you'd like an easier way to filter specific types of sessions, we're open to feedback. Please reach out to us in our discord community."
		}
	},
	{
		"page": {
			"title": "GraphQL",
			"breadcrumbs": "Docs / Highlight Docs / Product Features / Session Replay / GraphQL",
			"content": "Extract operation names\nGraphQL famously uses a single endpoint for every request. This makes tracking network requests a special chore.\nWe've extracted GraphQL operation names and surfaced them in the Session Replay network tab.\n\nPayload formatting\nGraphQL payloads can be inscrutable, so we've formatted them for you.\n"
		}
	},
	{
		"page": {
			"title": "Live Mode",
			"breadcrumbs": "Docs / Highlight Docs / Product Features / Session Replay / Live Mode",
			"content": "highlight.io supports tracking users in real-time as they user your web application. When you use highlight.io's Live Mode, the session viewer shows the latest data from users' sessions. It is enabled by default on sessions currently 'live' - eg. when a user is still on the page and sending session data.\nWhile you can view how a session looks to a user in real time, note that some events haven't been processed and will not be visible. Errors, console logs, and network traffic will only be visible when Live Mode is disabled, up to what's most recently processed. In Live Mode, time-scrubbing is disabled since you're always seeing the latest session view.\nYou can always turn off Live Mode by clicking the toggle button, which will show the session up to the latest data processed. Clicking on the session to write a comment will also disable Live Mode, since comments are associated with a particular timestamp."
		}
	},
	{
		"page": {
			"title": "Performance Impact",
			"breadcrumbs": "Docs / Highlight Docs / Product Features / Session Replay / Performance Impact",
			"content": "Overview\nWhen building Highlight, we've made technical decisions that prioritize putting your site's performance first. Highlight's performance impact on your site, therefore, is negligible, both from the perspective of your user's real-time experience as well as from a page-load perspective.\nBundle Size\nHighlight's gzipped bundle size is a mere 11 kb. From a page load perspective, your team should have no qualms regarding Highlight's impact on page load metrics.\nDOM Interaction Performance\nHighlight uses the well-maintained MutationObserver browser API in order to record DOM mutations. When sending these changes to our platform, we buffer events periodically to ensure that\n\nEvents aren't being held in memory for a prolonged time\n\nOutgoing network requests aren't interfering with user interactions\n\nNetwork\nYour client will send Highlight telemetry about every 3 seconds. We've taken extra care in making sure we don't overwhelm your end user's machine:\n\nOnly 1 request will be in-flight at a given time\n\nResponsive to your end user's network speed\n\nSession Replay\nConcerned about session replay impacting your web application? Read our blog post about it here."
		}
	},
	{
		"page": {
			"title": "Player Session Caching",
			"breadcrumbs": "Docs / Highlight Docs / Product Features / Session Replay / Player Session Caching",
			"content": "In most cases, the session replayer's local cache allows for a smoother experience when playing back sessions. However, for customers that run a very memory-intensive stack (using canvas recording, or even with lots of changes happening in the dom), the local session player can occosianally slow down the browser tab. We've added a new option to turn off session caching in the highlight dashboard.\nYou can find this option under Settings > Account Settings > Player Settings."
		}
	},
	{
		"page": {
			"title": "Rage Clicks",
			"breadcrumbs": "Docs / Highlight Docs / Product Features / Session Replay / Rage Clicks",
			"content": "Rage clicks are the equivalent of spamming a close elevator button when you just want to get up to your apartment. But, instead of a close elevator button, it's a space on your application. And instead of getting to your apartment, users usually rage click when a button isn't working as it should.\nHow do we identify rage clicks?\nA Rage Click is defined as a time periodic in which a user clicks the same area a certain number of times. This can help highlight points of frustration your users have with the app.\nBy default, we consider user activity as rage clicks when there exists a 2 second or longer period in which a user clicks 5 or more times within a radius of 8 pixels.\nCustomizing rage click sensitivity\nYou'll find fine-grained control over your project's rage click settings in your project settings page.\n\nElapsed Time (seconds): the maximum time interval during which clicks count toward a rage click.\n\nRadius (pixels): how close clicks must be to be determined as part of the same rage click.\n\nMinimum Clicks: the minimum number of nearby clicks required to count as a rage click.\n\n\nAlerting for rage clicks\nCreate a rage click alert within your project's alerts page to be notified on Slack or via email about a user rage clicking in your app!\n"
		}
	},
	{
		"page": {
			"title": "Request Proxying",
			"breadcrumbs": "Docs / Highlight Docs / Product Features / Session Replay / Request Proxying",
			"content": "Request Proxying\nWith tools that run from your browser, you run the risk of having requests blocked by ad blockers and chrome extensions. highlight.io supports proxying requests through your own domain."
		}
	},
	{
		"page": {
			"title": "Session Search",
			"breadcrumbs": "Docs / Highlight Docs / Product Features / Session Replay / Session Search",
			"content": "In highlight.io, you can search for a session by any of the data you send us (via the SDK) throughout a session. The data you send us can be in the form of:\n\ntrack calls\n\nidentify calls\n\nclick data\n\nWe cover how search/instrumentation for each type of these queries works below.\nTrack Searching\nFor track calls, you can search for sessions based on the properties that have a type of track. This looks like the following:\n\nIdentify Searching\nFor identify calls, you can search for sessions based on the properties that have a name of identify, and the value corresponds to the value sent to the first argument of H.init (see here). This looks like the following.\n\nSearching by User Clicks\nWhen using Highlight, you might be interested in querying for sessions where a user clicked a certain HTML element. Highlight records users' clicks on the page as two queryable properties: clickSelector and clickInnerText.\n\nclickSelector is the HTML Element's target's selector, concatinating the element's tag, id  and class values.\n\nclickTextContent is the HTML Element's target's textContent property. Only the first 2000 characters are sent.\n\nYou can then use the session filters to search for text in the two fields. An example of what the clickSelector filter looks like is below:\n\nSearching by Visited URL\nYou can also search for sessions based on the URL that the user visited. This is useful if you want to search for sessions where a user visited a certain page on your site.\nTo perform this search, you can use the Visited URL filter. This looks like the following:\n\nAnd like all of our filters, you can use contains, does not contain, is, and is not, etc.."
		}
	},
	{
		"page": {
			"title": "Extracting the Session URL",
			"breadcrumbs": "Docs / Highlight Docs / Product Features / Session Replay / Extracting the Session URL",
			"content": "In some cases, you may want to extract the Session URL at the time that a user visits your web application to send it your other tools. For example, if you have a customer support tool, many customers like to sent the session URL of their customers to the tool in order to help them debug their issues.\nYou can do this by using the the H.getSessionDetails method. This method will return an object with a url and urlWithTimestamp property. Usage is as follows:\n      H.getSessionDetails().then(({url, urlWithTimestamp}) => {\n          console.log(url, urlWithTimestamp);\n      });\n\nPlease refer to our SDK docs for more information."
		}
	},
	{
		"page": {
			"title": "Session Search Deep Linking",
			"breadcrumbs": "Docs / Highlight Docs / Product Features / Session Replay / Session Search Deep Linking",
			"content": "The queries you build when searching for sessions are reflected in the URL parameters. You can share these URLs with others to deep link to search results, or even create them programatically.\nSyntax\n/sessions?query={and|or}||{property1},{operator1},{valueA},{valueB}\n\nHighlight supports and and or queries\n\nUser properties:\nuser_{your_property_name}\n\nTrack properties:\ntrack_{your_property_name}\n\nSessions built-in properties (these are automatically populated by Highlight):\n\nuser_identifier \n\nsession_browser_version\n\nsession_browser_name\n\nsession_device_id\n\nsession_environment\n\nsession_os_name\n\nsession_os_version\n\nsession_referrer\n\nsession_reload\n\nsession_visited-url\n\ncustom_app_version\n\ncustom_created_at\n\ncustom_active_length\n\ncustom_viewed\n\ncustom_processed\n\ncustom_first_time\n\ncustom_starred\n\n\nOperators:\n\nis\n\nis_not\n\ncontains\n\nnot_contains\n\nexists\n\nnot_exists\n\nmatches (uses Lucene regex syntax)\n\nnot_matches (uses Lucene regex syntax)\n\nbetween (for active_length)\n\nnot_between (for active_length)\n\nbetween_date (for created_at)\n\nnot_between_date (for created_at)\n\n\nExamples\nViewing sessions for a particular user:\n/sessions?query=and||user_identifier,is,alice@example.com\nExcluding sessions from your organization:\n/sessions?query=and||user_identifier,not_contains,@yourdomain.com\nViewing sessions for a particular page in your app:\n/sessions?query=and||session_visited-url,contains,/your/path/name\nMultiple properties\n/sessions?query=or||user_identifier,is,Bob||user_email,is_not,alice@example.com"
		}
	},
	{
		"page": {
			"title": "Shadow Dom + Web Components",
			"breadcrumbs": "Docs / Highlight Docs / Product Features / Session Replay / Shadow Dom + Web Components",
			"content": "Shadow DOM & Web Components\nhighlight.io supports both Shadow DOM and Web Components out of the box."
		}
	},
	{
		"page": {
			"title": "Error Monitoring Features",
			"breadcrumbs": "Docs / Highlight Docs / Product Features / Error Monitoring / Overview",
			"content": "Error monitoring in highlight.io is different than most tools, in that we emphasize the mapping between your frontend and backend. Keep reading to learn more about our feature set and get started.\nGet started\nGet StartedGet started with session replay by installing highlight.io\nFeatures\nManually Reporting ErrorsManually report errors that are not caught by the SDK.Grouping ErrorsLogic for grouping errors to mitigate repetition.SourcemapsConfigure sourcemaps for your frontend errors.Versioning Errors.Send highlight.io metadata so you can version errors across deploys.Filtering and Ignoring ErrorsOptions for filtering and ignoring errors.Managing ErrorsFeatures for managing errors"
		}
	},
	{
		"page": {
			"title": "Enhancing Errors with GitHub",
			"breadcrumbs": "Docs / Highlight Docs / Product Features / Error Monitoring / Enhancing Errors with GitHub",
			"content": "Highlight has the capability to enhance your backend errors using GitHub (errors on the frontend are enhanced using sourcemaps). With our GitHub\nintegration, Highlight is able to enhance a stacktrace with context, as well as other enhancements such as \"link to a file\" and attribution to a code change.\nIn order to turn on GitHub Enhancements, 3 actions need to be completed for your project:\n1. Create a service via the SDK2. Add the GitHub Integration to Highlight3. Link your service to a GitHub repo\nCreate a service via the SDK\nServices are created to group your logs, errors, and traces by the application that is running the code. Having a service can make it helpful to decipher\nwhich application caused an error, especially in code paths shared by multiple applications. They can also be used also filters for logs and traces.\nServices are created by passing in a service name via the SDK. For example, in Golang, the following SDK will create a new service named \"my-app\":\nhighlight.SetProjectID(\"<YOUR_PROJECT_ID>\")\nhighlight.Start(\n    highlight.WithServiceName(\"my-app\"),\n    highlight.WithServiceVersion(\"git-sha\"),\n)\ndefer highlight.Stop()\n\nReference the SDK start up guides for more help. For more information about services, see Services documentation.\nNote: There is also a service version that is provided in the example above. This is not necessary to enable GitHub enhancements, but is recommended that this be the\ncurrent GIT SHA of the deployed code to use the most accurate files. If not provided, Highlight will fallback to your current default branch (e.g. main) GIT SHA.\nAdd the GitHub Integration to Highlight\nEnable GitHub on Highlight by going to the integrations and click the \"Connect\" button in the GitHub section.\nMore information on the GitHub Integration can be found at GitHub Integration.\nLink your service to a GitHub repo\nOnce a service is created, the service will be visible in the metadata of your error. The last step to enable stacktrace enhancements is to link your service to\nits respective GitHub repo, the one that should be used to enhance your errors. In addition to linking the repo, there are two fields to configure file path mappings from your\ndeployment process to the correct file in GitHub.\nBuild path prefix - This path prefix represents a path added in your deployment process, and is also the path in your server that contains your files.\nAfter removing this path (and possibly adding something else), you should be able to point this string to a GitHub file.GitHub path prefix - This path prefix is a string that can be appended to the front of the stacktracepath, and will be prepended to your files in order to correctly find the file in GitHub.\nIt is recommended to complete with the form while viewing an error, to be able to test your configuration on the viewed error. This can also be completed from the services table, where all your services can be viewed and managed.\n\nAn example:\n1. An error received has a stacktrace path /build/main.go.2. The GitHub repo was selected to be the Highlight repo.3. Since Highlight's deployment process moves all files out of the /backend directory and into the /build directory, we would set \"Build prefix path\"\nto /backend and GitHub prefix path to /backend.\nThis will result in the following mapping:\n/build/main.go -> https://github.com/highlight/highlight/blob/HEAD/backend/main.go.\nHaving Issues?\nYou may notice your service is in an \"error\" state, and is no longer attempting to enhance errors. This may be due to a bad configuration when linking your service to a repo. If this does not seem to be the case, please reach out to us in our discord community."
		}
	},
	{
		"page": {
			"title": "Filtering Errors",
			"breadcrumbs": "Docs / Highlight Docs / Product Features / Error Monitoring / Filtering Errors",
			"content": "highlight.io allows you to filter errors that you don't want to see in your error monitoring dashboard. This is useful for errors that you know are not relevant to your application, or for errors that you know are not actionable.\nFiltered errors do not count towards your billing quota.\nThere are several options for filtering errors, all of which can be found in the \"Error Monitoring\" tab of your project settings. Details on each option are below.\nSet up ingestion filters\nYou can set up ingestion filters by product to limit the number of data points recorded. You can filter sessions, errors, logs, or traces in the following ways:\nSample a percentage of all data.\nFor example, you may configure ingestion of 1% of all errors. For each session we receive, we will make a randomized decision that will result in storing only 1% of those. The random decision is based on the identifier of that product model for consistency. With traces, the Trace ID is used to make sure all children of the same trace are also ingested.Rate limit the maximum number of data points ingested in a 1 minute window.\nFor example, you may configure a rate limit of 100 errors per minute. This will allow you to limit the number of errors recorded in case of a significant spike in usage of your product.Set up an exclusion query.\nFor example, you may configure an exclusion query of environment: development. This will avoid ingesting all errors tagged with the development environment.\nWith these filters, we will only bill you for data actually retained. For instance, setting up ingestion of only 1% of all errors will mean that you will be billed only for 1% of all errors.\nShow errors that have an associated frontend session recorded.\nYou can use the disableSessionRecording setting to record frontend errors without recording a session.\nTo find errors that have a session associated, you can use the Has Sessions filter in the errors query builder\n\nOnce you open an error group instance view, check the Only instances with recorded sessions box to filter the instances.\n\nFilter errors emitted by browser extensions\nIf your users are using browser extensions, you may see errors that are not relevant to your application. You can filter these errors by checking the \"Filter errors thrown by browser extensions\" box in your project settings.\nIgnoring error groups from alerts\nIf you have alerts set up for your project, you can ignore specific error groups from triggering alerts. You can do this by clicking the \"Ignore\" button on the error group page.\nFilter errors by regex on the error body\nIf you'd like to filter specific errors by a regex pattern match against the error body, you can do so by adding error filters in your project settings as well.\nWant to filter something else?\nIf you'd like an easier way to filter specific types of errors, we're open to feedback. Please reach out to us in our discord community."
		}
	},
	{
		"page": {
			"title": "Grouping Errors",
			"breadcrumbs": "Docs / Highlight Docs / Product Features / Error Monitoring / Grouping Errors",
			"content": "Highlight groups errors together based on their error message and stack trace. When an error is thrown, Highlight finds the closest matching error and adds the new error instance to it.\nAn error is matched if:\n\nIt has the same error message OR\n\nIt has the same top stack frame and 3 of the next 4 stack frames are the same (in any order)\n\nA stack frame is matched if:\n\nIt has the same filename, function name, line number, and column number OR\n\nIt has the same source code and context (if sourcemaps are enabled)\n\nIf there is no match with an existing error, a new error group is created instead.\nGrouping Rules\nIf your errors are in JSON form, you can add JSONPath expressions in your project settings to select parts of your errors that you want to group on. For example, if your errors look like:\n{\n    \"type\": \"StackOverflowError\",\n    \"user\": \"alice\",\n    \"message\": \"Oh no! You got an error on line 41!!\"\n}\n\n{\n    \"type\": \"StackOverflowError\",\n    \"user\": \"bob\",\n    \"message\": \"Oh no! You got an error on line 50!!\"\n}\n\nThey would not be grouped together since the errors are not an exact match and since they were thrown at different lines in your code. In this case, if you wanted to group all errors of the same type into the same error group, you can add an expression $.type in your project settings."
		}
	},
	{
		"page": {
			"title": "Managing Errors",
			"breadcrumbs": "Docs / Highlight Docs / Product Features / Error Monitoring / Managing Errors",
			"content": "Keeping on top of errors is a challenging effort for any company. Bugs are rarely prioritized and typically don't get attention until a customer writes in about it. Very quickly, errors pile up and it is challenging to distinguish what is signal versus what is noise.\nResolving errors\nOnce an error has been fixed, update the status to \"Resolved\" to remove it from the main Errors view.\nAuto-resolving errors\nIn your project settings, you can auto-resolve errors that haven't been seen for a given time period. If you're trying to manage your error fatigue, we recommend setting this to something low like \"7 days\".\nSnoozing errors\nIf an error is frequently occurring and is causing lots of noise, you can Snooze until a certain time.\nWant additional management features?\nIf you'd like additional ways to manage errors, we're open to feedback. Please reach out to us in our discord community."
		}
	},
	{
		"page": {
			"title": "Manually Reporting Errors",
			"breadcrumbs": "Docs / Highlight Docs / Product Features / Error Monitoring / Manually Reporting Errors",
			"content": "In each of our language SDKs, highlight.io supports manually sending errors. This is useful for reporting errors that are not caught by the SDK, or that you would like to define internally as your own application errors.\nIn javascript, we support this via the H.consumeError method (see our SDK docs) and in other languages, we maintain this naming convention (pending casing conventions of the language in question.).\nExample in javascript:\nH.consumeError(error, 'Error in Highlight custom boundary!', {\n  component: 'JustThroughAnError.tsx',\n});\n"
		}
	},
	{
		"page": {
			"title": "Sourcemaps",
			"breadcrumbs": "Docs / Highlight Docs / Product Features / Error Monitoring / Sourcemaps",
			"content": "highlight.io has first-party support for enhancing minified stacktraces in javacript. We also support options for sending sourcemaps to us in the case that your sourcemaps aren't public. Read more about it in our getting started doc"
		}
	},
	{
		"page": {
			"title": "General Features",
			"breadcrumbs": "Docs / Highlight Docs / Product Features / General Features / Overview",
			"content": "Below are several highlight.io features that might be worth taking a look at.\nAlerts.Get alerts for sessions, errors, new users and more!Comments.Collaborate on bugs throughout your web app.Digests.Get a weekly digest of sessions that are worth watching.Environments.Version resources so that you know what environment events happened in.Segments.Create search filters so searching for sessions & errors is easy!Services.Create services to better group your errors, logs, and traces."
		}
	},
	{
		"page": {
			"title": "Alerts",
			"breadcrumbs": "Docs / Highlight Docs / Product Features / General Features / Alerts",
			"content": "Alerts are a way to keep your team in the loop as to what is happening on your app. Below is a description of the common components of Alerts, and more specific parameters are included in subsequent sections. To get started, visit app.highlight.io/alerts. The basic parameters for an alert look like the following image:\n\nConnecting a Slack Channel\nIf you haven't already integrated Highlight with Slack, clicking the \"Channels To Notify\" dropdown will prompt you to select a channel. Once this is done, you can add any number of channels to be pinged when an alert is thrown.\nExcluding Environments\nYou may want to exclude certain environments from generating alerts. For example, in your team's dev environment, it's unlikely that you want to be notified of every error. You can do this by adding an excluded environment option.\nLearn more about Environments.\nWebhook Notifications\nAll alerts can route notifications to webhooks via a HTTP POST JSON payload. Learn more about configuring webhooks."
		}
	},
	{
		"page": {
			"title": "Comments",
			"breadcrumbs": "Docs / Highlight Docs / Product Features / General Features / Comments",
			"content": "Comments can be made by you or anyone on your team on sessions and errors.\nSession Comments\nSession comments can be made by clicking anywhere on the session replay. Session comments are special because they connect a comment to a position on the screen and the current time. This is extremely powerful because now when you create a comment, you don't have to write more to provide the location/time context.\nNotifications\nIf you tag your team when creating a comment (learn more Slack Integration), Highlight will send them a message via email or Slack. Those messages will contain your comment text and a screenshot of the session at the current time.\n\nCollaboration\nYou can tag a teammate in a comment by typing @ and then picking your teammate. When you tag a teammate, they will receive a notification with the message you wrote.\nReplies\nWant to have a conversation relevant to what you're looking at? You can also reply to Session or Error comments on the side panel or directly via the popup.\n\nWhen participating in a comment, you become subscribed to future replies. Subsequent replies will notify you via Slack (learn more Slack Integration) or email. Any Slack channel or user tagged is also automatically subscribed.\nSlack Integration\nYou can tag Slack users or channels in comments after connecting Highlight with Slack (learn more Slack Integration). When you tag a Slack user or channel, Highlight will send them a message with your comment and a link to where the comment was made.\nLinear Integration\nYou can create issues in Linear as you add comments. Within a comment, select \"Create a Linear issue\" from the issues dropdown. On the next page, you'll be prompted to optionally edit the issue title and description. Once you save the comment, an issue is created and linked to in Linear."
		}
	},
	{
		"page": {
			"title": "Digests",
			"breadcrumbs": "Docs / Highlight Docs / Product Features / General Features / Digests",
			"content": "Highlight digests are weekly email summaries of interesting sessions, errors, and user activity. Highlight sends two separate digests each week:\nProject Overview summarizes aggregate user activity and lists the top errors and sessions for the weekSession Insights is a spotlight on the most interesting sessions\nGetting Started\nYou don't have to do anything to start receiving digests. If your project has 50+ sessions recorded in the past week, a digest for that week will automatically be emailed to all workspace members. To enable AI summaries in the Session Insights digest, you can opt in here.\nProject Overview features\nThe Project Overview digest contains multiple sections to showcase aggregate user activity, plus sessions and errors ordered by certain metrics.\nUser activity\nThis section shows aggregate user activity stats for last week and the change from the prior week. This includes total users (the count of unique users), total sessions, total errors, and average time spent (average active time per session).\n\nActive sessions\nThis section shows the top 5 sessions ordered by active time.\n\nErroneous sessions\nThis section shows the top 5 sessions ordered by error count.\n\nNew errors\nThis section shows the top 5 errors originating in the last week, ordered by the count of unique affected users.\n\nFrequent errors\nThis section shows the top 5 errors ordered by their frequency. Ignored errors are excluded.\n\nSession Insights features\nThe Sessions Insights digest lists the top 3 most interesting sessions for the week. These sessions are chosen by looking at the user journey in each session, and calculating which journeys are the least likely. These sessions tend to show users who may be frustrated or are using the app in unexpected ways.\nAI summaries\nAI summaries can be included in the Sessions Insights digest to describe what events happen in a session, so that you can tell at a glance what makes the session interesting and what it will contain.\nTo enable AI summaries, you can opt in here.\n"
		}
	},
	{
		"page": {
			"title": "Environments",
			"breadcrumbs": "Docs / Highlight Docs / Product Features / General Features / Environments",
			"content": "Environments can be assigned to sessions and errors by setting the environment option in H.init(). With the assignment, you can know search and filter sessions and errors based on the environment they come from.\nEnvironments are also used to determine whether Alerts are created.\nExample\nH.init('<YOUR_PROJECT_ID>', {\n  environment: process.env.ENVIRONMENT,\n})\n"
		}
	},
	{
		"page": {
			"title": "Segments",
			"breadcrumbs": "Docs / Highlight Docs / Product Features / General Features / Segments",
			"content": "Segments are a set of search filters that apply to sessions or errors. Segments are useful if you want to quickly view sessions or errors that relate to a certain population of your users.\nHighlight supports a variety of filters. Visit app.highlight.io/demo to experiment with real Highlight data.\n"
		}
	},
	{
		"page": {
			"title": "Services",
			"breadcrumbs": "Docs / Highlight Docs / Product Features / General Features / Services",
			"content": "Services are a useful tool to delineate your logs, errors, and traces. In order to create a new service, a service name must be provided to your SDK configuration.\nReference the SDK start up guides for more help.\nFor example, in Golang, the following SDK will create a new service named \"my-app\":\nhighlight.SetProjectID(\"<YOUR_PROJECT_ID>\")\nhighlight.Start(\n    highlight.WithServiceName(\"my-app\"),\n    highlight.WithServiceVersion(\"git-sha\"),\n)\ndefer highlight.Stop()\n\nCreated services are visible at https://app.highlight.io/settings/services.\n"
		}
	},
	{
		"page": {
			"title": "Webhooks",
			"breadcrumbs": "Docs / Highlight Docs / Product Features / General Features / Webhooks",
			"content": "All alerts can route notifications to webhooks via a HTTP POST JSON payload. For example, if you are hosting an HTTP webserver listening on https://example.com/api/webhook, you can configure alerts on Highlight.\nTo add an outgoing webhook destination, edit an alert and set the destination URL.\n\nHere's an example of a payload that is sent.\n{\n  \"Event\": \"ERROR_ALERT\",\n  \"ErrorCount\": 1,\n  \"ErrorTitle\": \"Oh no! An error occurred\",\n  \"SessionURL\": \"https://app.highlight.io/1/sessions/\",\n  \"ErrorURL\": \"https://app.highlight.io/1/errors/sqavrqpCyrkOdDoYjMF7iM0Md2WT/instances/11493\",\n  \"UserIdentifier\": \"vadim@highlight.io\",\n  \"VisitedURL\": \"https://app.highlight.io/1/alerts\"\n}\n\nSession alerts, user alerts, and metric monitors can all send webhook notifications. The payload resembles a similar format for all notification types.\nIf you are interested in customizing the payload or authenticating the webhook request with an authorization header, follow this issue on GitHub for updates.\nWebhook Payload Customization & Authentication #4697Outgoing Webhook Enhancements"
		}
	},
	{
		"page": {
			"title": "Logging Features",
			"breadcrumbs": "Docs / Highlight Docs / Product Features / Logging / Overview",
			"content": "You can find our logging product at app.highlight.io/logs.\nIf your language of choice isn't support in the \"Getting Started\" docs below, hit us up in our community or send us an email at support@highlight.io\nGet started with the resources below:\nGet StartedSet up logging for your application.Log Search SpecificationThe specification we use for ingesting and searching for logs.Log AlertsSet up alerts to be notified when logs exceed a threshold."
		}
	},
	{
		"page": {
			"title": "Log Alerts",
			"breadcrumbs": "Docs / Highlight Docs / Product Features / Logging / Log Alerts",
			"content": "Logs alerts are a way to get notified when the count of logs for a query is over or under a threshold for a specific time range.\nCreating an alert\n\nQuery\nWhen you set up an alert, you can include a query to count only the logs that match. The query format follows the same specification as on the logs page. You can read more here.\nAlert Threshold\nYou can control the number of logs needed to trigger an alert by setting an alert threshold. You can choose to alert if the actual log count is above or below this threshold.\nAlert Frequency\nYou can adjust the time range for which logs are searched and aggregated. Shorter frequencies can be helpful to be alerted quickly about an issue, while longer frequencies can help reduce noise by aggregating across a larger time range.\nNotifications\nLog alerts can be configured to notify you via Slack, Discord, email, or webhooks. For more details, see alerts."
		}
	},
	{
		"page": {
			"title": "Log Search Specification",
			"breadcrumbs": "Docs / Highlight Docs / Product Features / Logging / Log Search",
			"content": "Logs are broken down into two discrete concepts: messages and attributes. Given the following log:\nlogger.info('Queried table', {\n  table: 'users',\n  query: 'hello',\n}),\n\nThe log message is Queried table and the attributes are table:users and query:hello.\nSearching for logs\nMessages search\nTo search for a log message, simply type the text of the message. Given the following log:\nlog.info(\"excluding session due to no user interaction events\")\n\nWe can find this log by typing excluding session due to no user interaction events\n\nAttributes search\nTo search on a log attribute, add a : between search terms. Given the following log:\nlog.info({\n  user_id: 42,\n})\n\nWe can search for it via:\nuser_id:42 matches every log where user_id is 42level:info matches every log where level is info\nWe can exclude logs that match an attribute by prefixing it with -:\nuser_id:-42 matches every log where user_id is not 42level:-info matches every log where level is not info\nAND vs OR\nWhen multiple attributes are included, they work as an AND operator:\nuser_id:42 level:info - matches every log where user_id is 42 and level is info\nWhen the same attribute is included twice in a search, it works as an OR operator:\nuser_id:42 level:info level:warn - matches every log where user_id is 42 and (level is info or level is warn)\nWildcard search\nTo perform a wildcard search, use the * symbol:\nservice:frontend* matches every log that has a service starting with frontendfrontend* matches all log messages starting with the word frontend*frontend matches all log messages ending with the word frontend\nAutoinjected attributes\nBy default, Highlight's SDKs will autoinject attributes to provide additional context as well as assisting in linking sessions and errors to their respective logs.\nAttributeDescriptionExamplecode.filepathFile path emitting the log./build/backend/worker/worker.gocode.functionFunction emitting the log.github.com/highlight-run/highlight/backend/worker.(*Worker).Start.func3code.linenoLine number of the file where the log was emitted.20host.nameHostnameip-172-31-5-211.us-east-2.compute.internalos.descriptionDescription of the operating systemAlpine Linux 3.17.2 (Linux ip-172-31-5-211.us-east-2.compute.internal 5.10.167-147.601.amzn2.aarch64 #1 SMP Tue Feb 14 21:50:23 UTC 2023 aarch64)os.typeType of operating systemlinuxlevelThe log levelinfomessageThe log messagepublic-graph graphql request failedspan.idSpan id that contains this log528a54addf6f91cc"
		}
	},
	{
		"page": {
			"title": "Integrations Overview",
			"breadcrumbs": "Docs / Highlight Docs / Integrations / Integrations Overview",
			"content": "Read more about highlight.io's integrations! Have a questions or want to request a new integration? Hit us up in our community.\nAmplitude.Instrument highlight.io to send amplitude events.Mixpanel.Instrument highlight.io to send mixpanel events.Clickup.Create clickup tickets within highlight.ioFront.View highlight.io sessions directly in your front inbox.Linear.Create linear tickets within highlight.ioGitHub.Create GitHub Issues within highlight.ioSegment.Instrument highlight.io to send segment events.Height.Create height tickets within highlight.ioJira.Create Jira tasks within highlight.ioIntercom.Access highlight.io sessions within your intercom dashboard.Slack.Send highlight.io alerts to slack.Vercel.Automate uploading of sourcemaps and integrationDiscord.Create discord tickets within highlight.ioPendo.Instrument highlight.io to send pendo events."
		}
	},
	{
		"page": {
			"title": "Amplitude Integration",
			"breadcrumbs": "Docs / Highlight Docs / Integrations / Amplitude Integration",
			"content": "We've made it easy to use Amplitude with Highlight. When you initialize Highlight, you can set your Amplitude API Key.\nH.init('<YOUR_PROJECT_ID>', {\n  integrations: {\n    amplitude: {\n      apiKey: '<AMPLITUDE_API_KEY>',\n    },\n  },\n})\n\nAPI\nlogEvent()\nCalling H.track() will forward the data to Amplitude's logEvent().\nH.track('signup_button_clicked', {\n  firstTime: true,\n  impressions: 10,\n})\n\n// The Highlight track call is equivalent to this logEvent call\namplitudeClient.logEvent('signup_button_clicked', {\n  firstTime: true,\n  impressions: 10,\n  // This property is added by Highlight. This shows you the session where this event happened.\n  highlightSessionURL: 'https://app.highlight.io/sessions/123',\n})\n\nsetUserId() and identify()\nCalling H.identify() will forward the data to Amplitude's setUserId() and identify().\nH.identify('eliza@corp.com', {\n  planType: 'premium',\n  verified: false,\n})\n\n// The Highlight identify call is equivalent to setUserId and identify.\namplitudeClient.setUserId('eliza@corp.com')\namplitudeClient.identify(new amplitude.Identify().set('planType', 'premium').set('verified', false))\n\nIf you want to disable this behavior, you can set enabled: false for the integration:\nH.init('<YOUR_PROJECT_ID>', {\n  integrations: {\n    amplitude: {\n      enabled: false,\n    },\n  },\n})\n"
		}
	},
	{
		"page": {
			"title": "ClickUp Integration",
			"breadcrumbs": "Docs / Highlight Docs / Integrations / ClickUp Integration",
			"content": "When you enable the ClickUp integration, Highlight will allow creating Tasks from the session replay and errors viewer. Track bugs or enhancements for your app as you triage frontend and backend errors or watch your users' replays.\nTo get started, go to the integrations and click the \"Connect\" button in the ClickUp section.\nFeatures\nComments can create a ClickUp task filled out with the body of the comment and link back to the Session.Grouping Errors shows a shortcut to create a ClickUp task pre-populated with the error linking to the full context of how the error occurred."
		}
	},
	{
		"page": {
			"title": "Discord Integration",
			"breadcrumbs": "Docs / Highlight Docs / Integrations / Discord Integration",
			"content": "By connecting Highlight with Discord, Highlight can send you and your team real-time messages based on different sessions, errors and more.\nTo get started, go to app.highlight.io/integrations and click the toggle to turn on the discord integration.\n\nOnce you do this, you will see an option to add discord channels on any of the alerts found at https://app.highlight.io/alerts. It'll look like this:\n"
		}
	},
	{
		"page": {
			"title": "Electron Support",
			"breadcrumbs": "Docs / Highlight Docs / Integrations / Electron Support",
			"content": "If you are running Highlight in Electron, a Desktop based JS framework, you can benefit from the additional functionality that tracks main process window events to stop and start Highlight recording when your app is minimized.\nPlease ensure you are using Highlight SDK version highlight.run@4.3.4. or higher. Call configureElectronHighlight with a BrowserWindow object to instrument Electron events.\nconst mainWindow = new BrowserWindow(...)\nconfigureElectronHighlight(mainWindow)\n\nUnder the hood, the function will forward the focus and blur events to your renderer process so that the highlight recording SDK can track them.\nmainWindow.on('focus', () => {\n    mainWindow.webContents.send('highlight.run', { visible: true });\n});\nwindow.on('blur', () => {\n    mainWindow.webContents.send('highlight.run', { visible: false });\n });\n\nThis will stop all highlight recording when the app is not visible and resume the session when the app regains visibility to help minimize performance and battery impact that Highlight may have on Electron users."
		}
	},
	{
		"page": {
			"title": "Front Integration",
			"breadcrumbs": "Docs / Highlight Docs / Integrations / Front Integration",
			"content": "Do you use Front.com to communicate with your customers? Add the Highlight plugin and view Highlight sessions right from the conversation.\n\nSimply visit https://app.frontapp.com/settings/tools and add the Highlight plugin in one click.\nClick the Get Started button to add Highlight to your Front workspace."
		}
	},
	{
		"page": {
			"title": "GitHub Integration",
			"breadcrumbs": "Docs / Highlight Docs / Integrations / GitHub Integration",
			"content": "When you enable the GitHub integration, Highlight will allow creating Issues from the session replay and errors viewer. Track bugs or enhancements for your app as you triage frontend and backend errors or watch your users' replays. Enhance backend error stacktraces with GitHub's file context.\nTo get started, go to the integrations and click the \"Connect\" button in the GitHub section.\nFeatures\n\nComments can create a GitHub issue filled out with the body of the comment and link back to the Session.\n\nGrouping Errors shows a shortcut to create a GitHub issue pre-populated with the error linking to the full context of how the error occurred.\n\nEnhance Error Stacktraces by using context fetched from files on GitHub.\n"
		}
	},
	{
		"page": {
			"title": "Grafana Integration",
			"breadcrumbs": "Docs / Highlight Docs / Integrations / Grafana Integration",
			"content": "We support integrating with Grafana to visualize metrics from your applications frontend and backend.\nTrack network request latency, application errors, and backend traces all in one place. You'll get customization\ninto aggregate query types (p50, p99, etc.) for performance and availability metrics automatically captured from\nour SDKs, with the ability to report custom metrics and traces as well.\n\nHow it works\nWe expose a Grafana Data Source that you can configure in your own self-hosted or cloud-managed Grafana instance.\nOnce you have your highlight.io account connected, you can build your own dashboards and write queries to our\nAPI. We also support exposing our backing analytics data store, ClickHouse, so that your team can write\nSQL queries and get raw access to slice / dice the data.\n\nInterested in getting this set up? Reach out to us at support@highlight.io."
		}
	},
	{
		"page": {
			"title": "Height Integration",
			"breadcrumbs": "Docs / Highlight Docs / Integrations / Height Integration",
			"content": "When you enable the Height integration, Highlight will allow creating Tasks from the session replay and errors viewer. Track bugs or enhancements for your app as you triage frontend and backend errors or watch your users' replays.\nTo get started, go to the integrations and click the \"Connect\" button in the Height section.\nFeatures\n\nComments can create a Height task filled out with the body of the comment and link back to the Session.\n\nGrouping Errors shows a shortcut to create a Height task pre-populated with the error linking to the full context of how the error occurred.\n"
		}
	},
	{
		"page": {
			"title": "Intercom Integration",
			"breadcrumbs": "Docs / Highlight Docs / Integrations / Intercom Integration",
			"content": "Highlight makes it easy to send events to Intercom. If you have both Highlight and Intercom already configured, then you're all set. We've already set things up for you in the background.\nIf you want to disable this integration, you can set enabled: false for the integration in your client config:\nH.init('<YOUR_PROJECT_ID>', {\n  integrations: {\n    intercom: {\n      enabled: false,\n    },\n  },\n})\n\nMessaging\nWhenever a user sends you a message on Intercom, Highlight will add a custom user attribute called highlightSessionUrl to the user. This is the URL for the latest session created by that user. This is helpful to see what the user was doing that led up to the user sending a message.\nAPI\ntrackEvent\nCalling H.track will forward the data to Intercom's Intercom('trackEvent').\nH.track('signup_button_clicked', {\n  firstTime: true,\n  impressions: 10,\n})\n\n// The Highlight track call is equivalent to this Intercom call\nIntercom('trackEvent', 'signup_button_clicked', {\n  firstTime: true,\n  impressions: 10,\n})\n"
		}
	},
	{
		"page": {
			"title": "Jira Integration",
			"breadcrumbs": "Docs / Highlight Docs / Integrations / Jira Integration",
			"content": "When you enable the Jira integration, Highlight will allow creating Tasks from the session replay and errors viewer. Track bugs or enhancements for your app as you triage frontend and backend errors or watch your users' replays.\nTo get started, go to the integrations and click the \"Connect\" button in the Jira section.\nFeatures\n\nComments can create a Jira task filled out with the body of the comment and link back to the Session.\n\nGrouping Errors shows a shortcut to create a Jira task pre-populated with the error linking to the full context of how the error occurred.\n"
		}
	},
	{
		"page": {
			"title": "Linear Integration",
			"breadcrumbs": "Docs / Highlight Docs / Integrations / Linear Integration",
			"content": "When you enable the Linear integration, Highlight will allow creating Issues from the session replay and errors viewer. Track bugs or enhancements for your app as you triage frontend and backend errors or watch your users' replays.\nTo get started, go to the integrations and click the \"Connect\" button in the Linear section.\nFeatures\n\nComments can create a Linear issue filled out with the body of the comment and link back to the Session.\n\nGrouping Errors shows a shortcut to create a Linear task pre-populated with the error linking to the full context of how the error occurred.\n"
		}
	},
	{
		"page": {
			"title": "Mixpanel Integration",
			"breadcrumbs": "Docs / Highlight Docs / Integrations / Mixpanel Integration",
			"content": "We've made it easy to use Mixpanel with Highlight. If you don't already have Mixpanel initialized in your app, you can have Highlight initialize it for you by specifying your Mixpanel Project Token in the config.\nH.init('<YOUR_PROJECT_ID>', {\n  integrations: {\n    mixpanel: {\n      projectToken: '<MIXPANEL_PROJECT_TOKEN>',\n    },\n  },\n})\n\nWhenever you call H.track() or H.identify() it will forward that data to Mixpanel's track and identify calls. If you want to disable this behavior, you can set enabled: false for the integration:\nH.init('<YOUR_PROJECT_ID>', {\n  integrations: {\n    mixpanel: {\n      enabled: false,\n    },\n  },\n})\n\nAPI\ntrack()\nCalling H.track() will forward the data to Mixpanel's track(). Highlight will also add a Mixpanel property called highlightSessionURL which contains the URL to the Highlight session where the track event happened.\nidentify()\nCalling H.identify() will forward the data to Mixpanel's identify()."
		}
	},
	{
		"page": {
			"title": "Pendo Integration",
			"breadcrumbs": "Docs / Highlight Docs / Integrations / Pendo Integration",
			"content": "Highlight's Pendo integration is in alpha. In order to use it, you must request access from Highlight support.\nWe've made it easy to use Pendo with Highlight. If you don't already have Pendo initialized in your app, you can have Highlight initialize it for you by specifying your Pendo Project Token in the config.\nH.init('<YOUR_PROJECT_ID>', {\n  integrations: {\n    pendo: {\n      projectToken: '<PENDO_PROJECT_TOKEN>',\n    },\n  },\n})\n\nWhenever you call H.track() or H.identify() it will forward that data to Pendo's track and identify calls. If you want to disable this behavior, you can set enabled: false for the integration:\nH.init('<YOUR_PROJECT_ID>', {\n  integrations: {\n    pendo: {\n      enabled: false,\n    },\n  },\n})\n\nAPI\ntrack()\nCalling H.track() will forward the data to Pendo's track(). Highlight will also add a Pendo property called highlightSessionURL which contains the URL to the Highlight session where the track event happened.\nidentify()\nCalling H.identify() will forward the data to Pendo's identify()."
		}
	},
	{
		"page": {
			"title": "Segment Integration",
			"breadcrumbs": "Docs / Highlight Docs / Integrations / Segment Integration",
			"content": "If you have an existing codebase calling Segment's identify() and track() methods, then you won't have to call Highlight's. Highlight will automatically forward data sent to Segment to your Highlight sessions.\nWe are currently working with Segment on an official integration where you can enable, configure, and send data to Highlight. If you'd like to use this, then upvote this feature request.\nEnabling the Segment Integration\nH.init('<YOUR_PROJECT_ID>', {\n  enableSegmentIntegration: true,\n})\n\nSegment's identify() calls will now start forwarding to Highlight.\nEnabling Track data forwarding\nTo forward analytics.track() calls to Highlight, you will need to use the HighlightSegmentMiddleware. This is available in the highlight.run package starting in version 2.10.0.\nimport { H, HighlightSegmentMiddleware } from 'highlight.run'\n\nH.init('<YOUR_PROJECT_ID>', {\n  enableSegmentIntegration: true,\n})\nanalytics.addSourceMiddleware(HighlightSegmentMiddleware)\n\nSearching for segment events\nSearching for segment events is as easy as using the segment-event filter in the session search UI. This is what it looks like.\n"
		}
	},
	{
		"page": {
			"title": "Slack Integration",
			"breadcrumbs": "Docs / Highlight Docs / Integrations / Slack Integration",
			"content": "By connecting Highlight with Slack, Highlight can send you and your team real-time messages based on different events that happen on your app and Highlight.\nTo get started, go to https://app.highlight.io/alerts and click the \"Sync with Slack\" button.\nFeatures\n\nComments will send a Slack message to whoever is tagged in a comment\n\nAlerts will send a Slack message to channels or users who want to receive alerts\n"
		}
	},
	{
		"page": {
			"title": "Vercel Integration",
			"breadcrumbs": "Docs / Highlight Docs / Integrations / Vercel Integration",
			"content": "If you use Vercel to deploy your app, you can install the Vercel Highlight integration here: https://vercel.com/integrations/highlight/. Below are the details of what this integration provides.\nVercel SDK Integrations\nAfter linking your Vercel projects to your Highlight projects, Highlight will automatically set the HIGHLIGHT_SOURCEMAP_API_KEY environment variable. If you're using @higlight-run/sourcemap-uploader or withHighlightConfig to upload your sourcemaps, those tools will check for this API key.\nMore details on calling these methods here.\nVercel Log Drain Integrations\nIf you use Vercel to deploy your server-side applications, the Vercel integration will also send your logs to Highlight. Vercel will forward build logs, lambda and edge function (server-side) logs, and static access logs. You can view these logs in the Highlight UI by clicking on the \"Logs\" tab in your dashboard. To configure whether to collect logs in highlight.io, you can do this by limiting logs in your billing settings.\nMore details on turning on this integration here."
		}
	},
	{
		"page": {
			"title": "Changelog Overview",
			"breadcrumbs": "Docs / Highlight Docs / Highlight.io Changelog / Overview",
			"content": "Stay up to date with what we work on week over week:\nChangelog 26Client-side network sanitizing, Tracing beta improvements, Next.js tracing, Java 11 support.Changelog 25GitHub stack trace settings, Next.js Edge runtime support, Large session exportsChangelog 24GitHub-enhanced stack traces, Session search on ClickHouse, Algora.io open-source bountiesChangelog 23Error list visual indicator, Poll for new sessions, Pino.js support, Alerts redesign Changelog 22Remix SDK, Render.com Log Stream, Go & Python SDK updatesChangelog 21GitHub Auth, Invite detection, AllContributor AppChangelog 20User Management, New logging connectorsChangelog 19Demo project, Comment UI facelift, etc.Changelog 18Error boundary improvements, GitHub ticket integration, etc.Changelog 17New Setup Page, Session caching, etc.Changelog 16Logging is in Alpha!Changelog 15New Product Pages & Devtools Improvements!Changelog 14New Signup Flow, Python Guides, & Session Replay Fixes!Changelog 13HackerNews Launch, SDK Docs, DocSearch, etc.Changelog 12Open Source, Smoother UX, & New SDKs!"
		}
	},
	{
		"page": {
			"title": "Changelog 12 (02/17)",
			"breadcrumbs": "Docs / Highlight Docs / Highlight.io Changelog / Changelog 12 (02/17)",
			"content": "Open Source!\nhighlight.io is open source at https://github.com/highlight/highlight (would appreciate a star ⭐️). We've also got lots of updates to share on this front as we grow, so stay tuned!\nChanging the status of an error is now instant!\nWe're now using optimisticResponses in apollo to update the state of an error. When you change the status, this now happens instantly in the UI 🤯.\nPR Link\nSmoother frontend routing logic.\nWe upgraded react router this week, which has made some significant performance improvements to the app; switching between errors/sessions is now silky smooth.\nPR Link\nNew SDKs!!\nWe now support several more Python SDKs: Flask, Django, Python Azure Functions.\nPython Docs\nCloudflare Docs"
		}
	},
	{
		"page": {
			"title": "Changelog 13 (02/24)",
			"breadcrumbs": "Docs / Highlight Docs / Highlight.io Changelog / Changelog 13 (02/24)",
			"content": "The new CommandBar!\nType out \"Cmd + K\" in your dashboard to search for fields on sessions, errors and more. Here's a sneak peak:\n\nWe launched on HackerNews\nWe launched on hackernews a few days ago, and gained surpassed 1.5k github stars!!! Check out our launch and if you haven't already, check us out on github.\nContributing a new SDK:\nInterested in adding a new SDK for your for your backend (that isn't support here)? Check out our new docs on adding an SDK. We're powered by opentelemetry, so adding something for your framework shouldn't be too tough; we're also down to work with you on it!\nBetter Doc Search\nThanks to our friends at Algolia, search in our docs is much smoother now! Give it a try with CMD+K.\nNew SDKs!!\nWe've shipped even more SDKS this week:\nGo Fiber\nPython Fast API\nOur new logging product (🤫)\nWe're making a lot of progress on our new logging product; want to join the beta? Shoot us a message in discord\nImprovements\nSelf-hosting improvements (docs)\nLots of work on logging!"
		}
	},
	{
		"page": {
			"title": "Changelog 14 (03/03)",
			"breadcrumbs": "Docs / Highlight Docs / Highlight.io Changelog / Changelog 14 (03/03)",
			"content": "Our New Signup Flow!\nWe just shipped a new signup flow on app.highlight.io. Feel free to give a try :)\n\nFixes to Replay Jitters\nThis week, we made quite a lot of improvements to jitter/jank on the replay timeline. Notably, there was a bug related to inactive periods as well as the timeline UI resetting multiple times.\nPR Link\nNew Python Guide Homepage\nOur python guides now have a new home; check them out here.\nMore Logging Updates (🤫)\nWe're making a lot of progress on our new logging product; want to join the beta? Shoot us a message in discord."
		}
	},
	{
		"page": {
			"title": "Changelog 15 (03/11)",
			"breadcrumbs": "Docs / Highlight Docs / Highlight.io Changelog / Changelog 15 (03/11)",
			"content": "Added a \"goto\" button on each devtools resource.\nIn the devtools panel, you can now directly click a \"goto\" icon on an error, network request, or log. Check it out:\nPR Link\n\nMore improvements to replay speed + jitters.\nSmall issues related to caching the time of a given session across multiple sesions.\nPR Link\nSlack alerts link to a specific instance.\nSlack alerts normally linked to the error group, but didn't link to the specific instance. We now link to the exact instance of an error that way you click into the relevant session.\nPR Link\nNew product pages on our landing page.\nWe just added some new product pages on our landing page. Take a look and share feedback if you like:\n\nhighlight.io/session-replay\n\nhighlight.io/error-monitoring\n\nhighlight.io/logging\n\nSVB Exposure\nHighlight.io luckily had no exposure to the revent SVB situation, however, we understand that many of our customers might. If this is the case, and you need payment relief for your subscription, please reach out to us at support@highlight.io."
		}
	},
	{
		"page": {
			"title": "Changelog 16 (03/19)",
			"breadcrumbs": "Docs / Highlight Docs / Highlight.io Changelog / Changelog 16 (03/19)",
			"content": "Logging is in Alpha!\nLots more to come on the logging front, but please check give our logging product a peak at https://app.highlight.io/logs!\n\nAdded support for Nest.js\nGuide link here."
		}
	},
	{
		"page": {
			"title": "Changelog 17 (04/07)",
			"breadcrumbs": "Docs / Highlight Docs / Highlight.io Changelog / Changelog 17 (04/07)",
			"content": "\nNew setup page just dropped!\nWe just launched a new setup page that makes it easier to get started with highlight.io. Check it out at https://app.highlight.io/setup.\nAbility to turn off session caching for high-memory playback.\nFor customers that run a very memory-intensive stack (using canvas recording, or even with lots of changes happening in the dom), the local session player can occosianally slow down the browser tab. We've added a new option to the highlight.io config to turn off session caching. See docs here.\nPR Link\nSetting up alerts no longer require a slack connection.\nBefore this change, there was a bug that made it difficult to set up alerts without a slack channel. This is no longer the case.\nPR LInk\nDocs and landing (at highlight.io) now live in our main repo.\nIts now easier to contribute to our docs and landing page now that they both live in the same repo!\nPR Link\nSupport for codespaces for contributors.\nInterested in contributing to highlight.io? Its now easier than ever to get started with our new codespaces setup. Check out our contributing guide for more info.\nPR Link\nLots of logging updates!\nLaunch coming soon..."
		}
	},
	{
		"page": {
			"title": "Changelog 18 (04/26)",
			"breadcrumbs": "Docs / Highlight Docs / Highlight.io Changelog / Changelog 18 (04/26)",
			"content": "\nError boundary improvements!\nWe just shipped a bunch of improvements to our error boundary. Namely:\nNo longer required to import a .css file.Lots of design updates (see above)\nGitHub Integration is live\nOur GitHub integration is now live. Checkout the docs here.\nDocs for our hobby deploy is live\nYou can now deploy Highlight.io on a hobby instance. It's important to note that this is different from our dev deploy, which is used for developing on Highlight (useful for contributors). The hobby deploy is for folks that want to self-host Highlight for a low-traffic setup. Docs here.\nOpen Source Updates\nLaunch week recap\nInterested in hearing about how our launch week went last week? Take a look on our blog here.\nGitHub Discussion on Error Monitoring\nWe're focusing on improving our error monitoring product this upcoming quarter. Please share on this GitHub discussion."
		}
	},
	{
		"page": {
			"title": "Changelog 19 (05/22)",
			"breadcrumbs": "Docs / Highlight Docs / Highlight.io Changelog / Changelog 19 (05/22)",
			"content": "\nDemo Project\nCheck out our new demo project.\nYou can play around and see how the Highlight application works with a live project with plenty of data.\nLook closely. You might be able to find your own highlight.io sessions recorded on the demo project. That's right! We use Highlight ourselves, and we pipe all of our data to the demo project.\n\nComment UI Facelift\nWe've given the Comment UI a facelift.\nIt fits better with our design system.We have a new draggable handle just below the session timeline.New inline issue creation for connected issue trackers (GitHub, Linear, Height)\n\nWinston.js Highlight Transport\nCheck out our new Winston.js Highlight Transporter!\nYou can log to Winston as per usual, and Highlight will capture your logs and display them on your Highlight application.\nCanvas recording is getting even more powerful\nWe dug deep into our most complex Canvas implementation with multiple overlaying canvases on a single page.\nWe're snapshotting blob videos using Canvas and capturing frames from multiple canvases, regardless of overlays.\n\nOption to only record session with errors\nHighlight users with an enormous number of sessions may not want to record all of them.\nYou can now opt into error-only recording. If the session throws an error, we'll record it. If not, that session never hits your Dashboard.\n"
		}
	},
	{
		"page": {
			"title": "Changelog 20 (06/06)",
			"breadcrumbs": "Docs / Highlight Docs / Highlight.io Changelog / Changelog 20 (06/06)",
			"content": "\nUser management features\nSpencer Amarantides joined our team last week and has already shipped his first feature!\nWe can now create, view and delete Highlight team invites.\n\nAnd the email that invited users receive is now cleaner and easier to understand.\n\nNew Logging connectors\n\nAWS Kinesis\n\nFluent Forward\n\nFilesystem\n\nLoguru\n\nThese new connectors make Highlight much easier to use with AWS, Docker, custom VMs and Python!\nWe've long supported Open Telemetry's logging protocol, but now we also support Fluent Forward, which will make working with AWS and other Fluent-Forward-compatible systems much easier."
		}
	},
	{
		"page": {
			"title": "Changelog 21 (06/21)",
			"breadcrumbs": "Docs / Highlight Docs / Highlight.io Changelog / Changelog 21 (06/21)",
			"content": "GitHub Authentication\nBy popular request, we've implemented GitHub sign up. We've linked it to your primary GitHub email through Firebase authentication.\nInvite detection\nMany users come directly to Highlight because their team is using the product but they don't realize that they need to come through an invite link in order to join their workspace.\nWe now check for available workspace invitations on sign up, so team members will be more likely to join their workspace as intended.\n\nAllContributor GitHub App\nWe've installed the AllContributor GitHub app and integrated it with our codebase.\n\nNew Slack Embed\nWe already support tagging a Slack channel in a session comment.\nNow we take a screenshot of that session and embed it in the Slack channel to add extra context to the message.\n\nHobby Deploy off localhost\nThe Hobby Deploy assumed that it would always host itself on localhost.\nWe fixed that issue by passing REACT_APP_PRIVATE_GRAPH_URI and REACT_APP_PUBLIC_GRAPH_URI to the Docker containers, so you can configure the endpoints to run on any domain you like.\nPython 3.11 Support\nOur SDK now supports Python 3.11."
		}
	},
	{
		"page": {
			"title": "Changelog 22 (08/07)",
			"breadcrumbs": "Docs / Highlight Docs / Highlight.io Changelog / Changelog 22 (08/07)",
			"content": "Remix SDK at v0\nRemix works great with Highlight. It was surprisingly easy to instrument.\nCheck out our @highlight-run/remix docs for an easy walkthrough.\n\nRender.com Log Stream\nQuickly and easily configure a Render log drain with Highlight: https://dub.sh/UmfNHwu\n\nCanvas Manual Snapshotting\n@Vadman97 solved a long-standing issue with WebGL double buffering. The WebGL memory would render a transparent image even though the GPU was rending the image correctly. This caused missing images in Session Replay.\nTake full control over your Canvas snapshots with the manual snapshotting docs\n\nSet \"Service Name\" and \"Service Version\" with the Python and Go SDKs\nWe've added service_name and service_version parameters to the Python SDK and the Go SDK.\nThese params make logs much more searchable.\n\n🚨Community Contribution 🚨\nRepaired scrolling in metadata\nShout out to to Kalkidan Betre—@kalibetre on GitHub—for their open source contribution. They noticed that our Metadata window on the Session Replay screen wasn't scrolling correctly, and they sent in a pull request to fix it.\nThanks Kalkidan!\n"
		}
	},
	{
		"page": {
			"title": "Changelog 23 (08/22)",
			"breadcrumbs": "Docs / Highlight Docs / Highlight.io Changelog / Changelog 23 (08/22)",
			"content": "Visual indicator in Session Replay devtools\nSessions can be long and contain huge lists of items.\nAs you watch your session replay, you can now see the items progress through the list automatically, with an indicator that tells you if the item is before or after the current timestamp.\n\nPoll for new session, errors and logs\nWe often found ourselves refreshing our Highlight dashboard to update our data.\nHighlight's web app now polls for new sessions, errors and logs, so you don't have to refresh the page every few seconds.\nNew results cause a button to pop up, prompting you to load the new records.\n\nPino.js log support\nWe've added support for yet another logging provider!\nWelcome pino.js to the Highlight log family.\n\nAlerts redesign\nWe're working through a series of redesigns for our Alerts forms.\nCheck out our progress 👇\n"
		}
	},
	{
		"page": {
			"title": "Changelog 24 (09/11)",
			"breadcrumbs": "Docs / Highlight Docs / Highlight.io Changelog / Changelog 24 (09/11)",
			"content": "GitHub-enhanced stack traces\nHighlight is all about tight integrations. We’ve expanded our GitHub integration to link stack traces directly to the relevant files in your GitHub repo.\nIt’s easy to enable and even easier to use.\nIt seems like a tiny feature at first, but it’ll spoil you. You’ll question how you ever lived without it.\nGitHub Integration Docs\n\nSession search moves to ClickHouse\nWe’ve shipped a new UI for searching sessions, and session search is now fully powered by ClickHouse. That means you get a snappy search experience with real-time previews of the keys you can use to search.\n\nAlgora open-source bounties\nWe’ve been posting bounties to Algora.io, and folks have been claiming them!\nOur core team is stretched thin enough with feature work and the tricky, involved bugs that we prioritize every day, which leaves all the small bugs to languish, unaddressed. Until now!\nAlgora is helping us stay focused while incentivizing the Highlight community to close out bugs and claim some cold, hard cash.\nIf this program keeps growing, will we even need a core team???\n\nError tag embeddings\nWe’ve been playing around with Large Language Model (LLM) embeddings and applying them to our error data.\nNow that we’re saving embeddings for each of our errors, we might as well make those embeddings searchable!\nVisit app.highlight.io/error-tags to see our latest experiment. We’ve made our internal Highlight App errors taggable and searchable via LLM. Toss in an error message of your own, or test one of our error messages to see how the system categorizes it.\n"
		}
	},
	{
		"page": {
			"title": "Changelog 25 (10/03)",
			"breadcrumbs": "Docs / Highlight Docs / Highlight.io Changelog / Changelog 25 (10/03)",
			"content": "GitHub Enhancement Settings\nWe recently released GitHub-enhanced stack traces, and now we've surfaced your enhancement settings right next to your stack traces. It's a quality-of-life enhancement that unearths your buried settings and puts them right where you need them.\n\nEdge-compatible Next.js\nWe've got errors, logs and sessions working on Vercel's Edge runtime with both Page and App Router!\nThe docs are a work-in-progress, but they're all available on our Next.js Walkthrough page.\nWe've got new API endpoint wrappers that work with Vercel's serverless Node.js functions. And we've got a new Edge-specific API endpoint wrapper that's compatible with Edge's stripped-down API.\n\nSession Exporting is getting easier.\nCanvas rendering can get huge, which was causing problems with session export.\nWe're now rendering each Canvas chunk to a separate mp4 file so that they can export within Lambda timeout limits.\n"
		}
	},
	{
		"page": {
			"title": "Changelog 26 (11/08)",
			"breadcrumbs": "Docs / Highlight Docs / Highlight.io Changelog / Changelog 26 (11/08)",
			"content": "Client-side network sanitizing\nSanitize your network requests on the client, preventing sensitive data from ever reaching Highlight's servers.\nCheck out the docs for our web client's requestResponseSanitizer function.\n\nTracing improvements\nWe're hard at work on Tracing, building out new features every day.\nCheck out the latest two features:\n\nTraces embedded in Session Replay network requests:\n\n\nA fresh, new flame graph to better visualize sources of latency:\n\n\nNext.js tracing support\nWe continue to roll out improvements to our popular Next.js SDK, prioritizing Vercel support.\nHighlight can now consume Next.js's built-in OpenTelemetry instrumentation. This means free request/response spans for Next's Node runtime. We've also re-worked our Next.js SDK docs to streamline your integrations.\nWe have walkthroughs for both the Page and App Routers, as well as details on our Edge Runtime support.\nJava 11 support\nWe got a request for Java 11 support, so we hopped on it!\nIntegrate your Java 11 application with our Java docs today."
		}
	},
	{
		"page": {
			"title": "Getting Started - highlight.io",
			"breadcrumbs": "Docs / Getting Started / Get Started",
			"content": "Highlight.io allows you to get full-stack visibility into issues across your whole stack, all the way from a user's button click to an error in your backend infrastructure. Read more about how to get started below.\nFor your Frontend\nInstalling highlight.io in javascript will automatically instrument frontend error collection and session replay. highlight.io supports any framework that uses modern web browsers (i.e. depends on using the DOM) under the hood, and we support all modern browsers to date. Take a look at our guides for the following frameworks:\nReactGet started in your React.js appAngularGet started in your Angular.js appGatsbyGet started in your Gatsby appNext.jsGet started in your Next.js appRemixGet started in your Remix appVueJSGet started in your VueJS appSvelteKitGet started in your SvelteKit appOther HTMLGet started in any HTML/JS app\nFor your Backend: Error Monitoring\nHighlight.io also supports reporting errors from your backend and mapping these to corresponding sessions. This gives you and your team a full picture of your application's state. Supported frameworks / languages below:\nPythonGet started with error monitoring in PythonGoGet started with error monitoring in GoJS / TSGet started with error monitoring in JavascriptRubyGet started with error monitoring in RubyJavaGet started with error monitoring in Java\nFor your Backend: Logging\nHighlight.io also supports logging from your backend and mapping these to corresponding errors and sessions. This gives you and your team a full picture of your application's state. Supported frameworks / languages below:\nApplication Logging\nGoGet started with logging in GoJS / TSGet started with logging in JavascriptPythonGet started with logging in PythonRubyGet started with logging in RubyJavaGet started with logging in Java\nHosting Platform Logging\nCloudLog from your Cloud Hosting EnvironmentcurlSend logs over HTTPSDockerStream Docker logsFluent ForwardSend Fluent Forward (Fluentd / Fluent Bit) logsFileStream any log file\nSomething missing?\nIf there's a guide missing for your framework, feel free to create an issue or message us on discord."
		}
	},
	{
		"page": {
			"title": "Fullstack Mapping",
			"breadcrumbs": "Docs / Getting Started / Fullstack Mapping",
			"content": "What's this?\nIn order to make the most out of highlight.io, we suggest instrumenting your frontend and backend so that you can attribute frontend requests with backend errors and logs. See an example below, where you can view an error's details alongside frontend session replay, allowing you to get the full context you need.\n\nBelow, we detail the requirements to get this working as well as how to troubleshoot.\nHow can I start using this?\nInstall the client bundle\nIf you haven't already, you need to install our client javascript bundle in the framework of your choice. Get started below:\nGetting Started (Client)Install the `highlight.run` client bundle in your app.\nTurn on tracingOrigins\nSet the tracingOrigins option to an array of patterns matching the location of your backend. You may also simply specify true, which will default tracingOrigins to all subdomains/domains of the url for your frontend app.\nH.init(\"<YOUR_PROJECT_ID>\", {\n\ttracingOrigins: ['localhost', 'example.myapp.com/backend'],\n    ...\n});\n\nTurn on networkRecording\nH.init(\"<YOUR_PROJECT_ID>\", {\n\tnetworkRecording: {\n\t\tenabled: true,\n\t\trecordHeadersAndBody: true,\n\t},\n\t...\n});\n\nBackend Changes\nBackend changes are dependent on the underlying language/framework used on the server-side codebase. All you need to add is a middleware and code to capture errors.\nBelow are solutions for what we support today. If you'd like us to support a new framework, feel free to shoot us a message at support@highlight.io or drop us a note in our discord.\n\nGo Backend Integration\n\nJS Backend Integration\n\nPython Backend Integration\n\nJava Backend Integration\n\nDistributed Tracing\nYour backend might be a distributed system with multiple services. Say, for example, a\nfrontend Next.js application with a Next.js backend ,which makes HTTP requests to\na Python FastAPI microservice. In a case like that, you may want errors and logs from your Python service to be\nattributed to the frontend sessions in Highlight.\nOur frontend -> backend tracing uses the x-highlight-request HTTP header to attribute frontend requests with backend errors and logs. So, in the case of the example above, assuming all of your services have the highlight sdk installed, if your Next.js backend performs an HTTP request to a FastAPI backend and you forward the x-highlight-request header along, the trace will carry over information about the frontend session.\nawait fetch('my-fastapi-backend:8000/api', { headers: {'x-highlight-request': request.headers.get(`x-highlight-request`)} })\n\nA more complex application might not make HTTP requests between backend services, however. Instead, it may\nuse a message broker like Kafka to queue up jobs. In that case, you'll need to add a way to\nstore the x-highlight-request you receive from the frontend along with your enqueued messages.\nThe service that consumes the messages can then pass the value to the highlight SDK via custom\nerror wrapping or logging code as per usual.\n// the receiving example references `request.headers`, but this could be read from another service-to-service protocol (ie. gRPC, Apache Kafka message)\nconst parsed = H.parseHeaders(request.headers)\nH.consumeError(error, parsed.secureSessionId, parsed.requestId)\n\nTroubleshooting\n\nEnsure tracingOrigins and networkRecording are properly set.\n\nEnsure your backend has CORS configured for your frontend hostname, explicitly allowing header x-highlight-request.\n\nFor debugging the backend SDK of your choice, in order to debug, we suggest enabling verbose logging. For example, in Go, add highlight.SetDebugMode(myLogger)\n\nIf all else fails, please email us at support@highlight.io or join the #support channel on our discord.\n"
		}
	},
	{
		"page": {
			"title": "Using highlight.io with React.js",
			"breadcrumbs": "Docs / Getting Started / Frontend / React.js",
			"content": "Learn how to set up highlight.io with your React application.1Install the npm package & SDK.Install the npm package highlight.run in your terminal.# with npm\nnpm install highlight.run @highlight-run/react# with yarn\nyarn add highlight.run @highlight-run/react# with pnpm\npnpm add highlight.run @highlight-run/react2Initialize the SDK in your frontend.Grab your project ID from app.highlight.io/setup, and pass it as the first parameter of the H.init() method.To get started, we recommend setting tracingOrigins and networkRecording so that we can pass a header to pair frontend and backend errors. Refer to our docs on SDK configuration and Fullstack Mapping to read more about these options....\nimport { H } from 'highlight.run';\n\nH.init('<YOUR_PROJECT_ID>', {\n\tserviceName: \"frontend-app\",\n\ttracingOrigins: true,\n\tnetworkRecording: {\n\t\tenabled: true,\n\t\trecordHeadersAndBody: true,\n\t\turlBlocklist: [\n\t\t\t// insert full or partial urls that you don't want to record here\n\t\t\t// Out of the box, Highlight will not record these URLs (they can be safely removed):\n\t\t\t\"https://www.googleapis.com/identitytoolkit\",\n\t\t\t\"https://securetoken.googleapis.com\",\n\t\t],\n\t},\n});\n\n...\n// rendering code.3Add the ErrorBoundary component. (optional)The ErrorBoundary component wraps your component tree and catches crashes/exceptions from your react app. When a crash happens, your users will be prompted with a modal to share details about what led up to the crash. Read more here.import { ErrorBoundary } from '@highlight-run/react';\n\nReactDOM.render(\n    <ErrorBoundary>\n        <App />\n    </ErrorBoundary>,\n    document.getElementById('root')\n);4Identify users.Identify users after the authentication flow of your web app. We recommend doing this in any asynchronous, client-side context.\nThe first argument of identify will be searchable via the property identifier, and the second property is searchable by the key of each item in the object.\nFor more details, read about session search or how to identify users.\nimport { H } from 'highlight.run';\n\nfunction Login(username: string, password: string) {\n\t// login logic here...\n\t// pass the user details from your auth provider to the H.identify call\n\t\n\tH.identify('jay@highlight.io', {\n\t\tid: 'very-secure-id',\n\t\tphone: '867-5309',\n\t\tbestFriend: 'jenny'\n\t});\n}\n5Verify installationCheck your dashboard for a new session. Make sure to remove the Status is Completed filter to see ongoing sessions. Don't see anything? Send us a message in our community and we can help debug.6Configure sourcemaps in CI. (optional)To get properly enhanced stacktraces of your javascript app, we recommend instrumenting sourcemaps. If you deploy public sourcemaps, you can skip this step. Refer to our docs on sourcemaps to read more about this option.# Upload sourcemaps to Highlight\n...\nnpx --yes @highlight-run/sourcemap-uploader upload --apiKey ${YOUR_ORG_API_KEY} --path ./build\n...7Instrument your backend.The next step is instrumenting your backend to tie logs/errors to your frontend sessions. Read more about this in our backend instrumentation section."
		}
	},
	{
		"page": {
			"title": "Next.js Quick Start",
			"breadcrumbs": "Docs / Getting Started / Frontend / Next.js Quick Start",
			"content": "Learn how to set up highlight.io with your Next (frontend) application.1Install the npm package & SDK.Install the npm package @highlight-run/next in your terminal.\n# with npm\nnpm install @highlight-run/next\n\t\t\t\t\t2Initialize the client SDK.Grab your project ID from app.highlight.io/setup, and set it as the projectID in the <HighlightInit/> component.If you're using the original Next.js Page router, drop <HighlightInit /> in your _app.tsx file. For the App Router, add it to your top-level layout.tsx file.\n// src/app/layout.tsx\nimport { HighlightInit } from '@highlight-run/next/client'\n\nexport default function RootLayout({ children }: { children: React.ReactNode }) {\n\treturn (\n\t\t<>\n\t\t\t<HighlightInit\n\t\t\t\tprojectId={'<YOUR_PROJECT_ID>'}\n\t\t\t\tserviceName=\"my-nextjs-frontend\"\n\t\t\t\ttracingOrigins\n\t\t\t\tnetworkRecording={{\n\t\t\t\t\tenabled: true,\n\t\t\t\t\trecordHeadersAndBody: true,\n\t\t\t\t\turlBlocklist: [],\n\t\t\t\t}}\n\t\t\t/>\n\n\t\t\t<html lang=\"en\">\n\t\t\t\t<body>{children}</body>\n\t\t\t</html>\n\t\t</>\n\t)\n}\n\t\t\t\t3Verify installationCheck your dashboard for a new session. Make sure to remove the Status is Completed filter to see ongoing sessions. Don't see anything? Send us a message in our community and we can help debug.4More Next.js features?See our fullstack Next.js guide for more information on how to use Highlight with Next.js."
		}
	},
	{
		"page": {
			"title": "Using highlight.io with Remix",
			"breadcrumbs": "Docs / Getting Started / Frontend / Remix",
			"content": "Learn how to set up highlight.io with your Remix application.1Install the npm package & SDK.Install the @highlight-run/remix npm package in your terminal.\n# with npm\nnpm install @highlight-run/remix\n\t\t\t\t\t\n# with yarn\nyarn add @highlight-run/remix\n\t\t\t\t\n# with pnpm\npnpm add @highlight-run/remix\n\t\t\t\t2Initialize the client SDK.Grab your project ID from app.highlight.io/setup, inject it into your client application using the loader export from your root.tsx file, and set the projectID in the <HighlightInit/> component.\n// app/root.tsx\nimport { useLoaderData } from '@remix-run/react'\n\nimport { HighlightInit } from '@highlight-run/remix/client'\nimport { json } from '@remix-run/node'\n\n\nexport async function loader() {\n\treturn json({\n\t\tENV: {\n\t\t\tHIGHLIGHT_PROJECT_ID: process.env.HIGHLIGHT_PROJECT_ID,\n\t\t},\n\t})\n}\n\nexport default function App() {\n\tconst { ENV } = useLoaderData()\n\n\treturn (\n\t\t<html lang=\"en\">\n\t\t\t<HighlightInit\n\t\t\t\tprojectId={ENV.HIGHLIGHT_PROJECT_ID}\n\t\t\t\tserviceName=\"my-remix-frontend\"\n\t\t\t\ttracingOrigins\n\t\t\t\tnetworkRecording={{ enabled: true, recordHeadersAndBody: true }}\n\t\t\t/>\n\n\t\t\t{/* Render head, body, <Outlet />, etc. */}\n\t\t</html>\n\t)\n}\n\t\t\t\t3Export a custom ErrorBoundary handler (optional)The ErrorBoundary component wraps your component tree and catches crashes/exceptions from your react app. When a crash happens, your users will be prompted with a modal to share details about what led up to the crash. Read more here.\n// app/components/error-boundary.tsx\nimport { isRouteErrorResponse, useRouteError } from '@remix-run/react'\nimport { ReportDialog } from '@highlight-run/remix/report-dialog'\n\nexport function ErrorBoundary() {\n\tconst error = useRouteError()\n\n\tif (isRouteErrorResponse(error)) {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<h1>\n\t\t\t\t\t{error.status} {error.statusText}\n\t\t\t\t</h1>\n\t\t\t\t<p>{error.data}</p>\n\t\t\t</div>\n\t\t)\n\t} else if (error instanceof Error) {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<script src=\"https://unpkg.com/highlight.run\"></script>\n\t\t\t\t<script\n\t\t\t\t\tdangerouslySetInnerHTML={{\n\t\t\t\t\t\t__html: `\n\t\t\t\t\t\t\tH.init('${process.env.HIGHLIGHT_PROJECT_ID}');\n\t\t\t\t\t\t`,\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t\t<h1>Error</h1>\n\t\t\t\t<p>{error.message}</p>\n\t\t\t\t<p>The stack trace is:</p>\n\t\t\t\t<pre>{error.stack}</pre>\n\n\t\t\t\t<ReportDialog />\n\t\t\t</div>\n\t\t)\n\t} else {\n\t\treturn <h1>Unknown Error</h1>\n\t}\n}\n\t\t\t\n// app/root.tsx\nexport { ErrorBoundary } from '~/components/error-boundary'\n}\n\t\t\t4Identify users.Identify users after the authentication flow of your web app. We recommend doing this in a useEffect call or in any asynchronous, client-side context.\nThe first argument of identify will be searchable via the property identifier, and the second property is searchable by the key of each item in the object.\nFor more details, read about session search or how to identify users.\nimport { H } from '@highlight-run/remix/client';\n\nfunction RenderFunction() {\n\n\tuseEffect(() => {\n\t\t// login logic...\n\t\t\n\t\tH.identify('jay@highlight.io', {\n\t\t\tid: 'very-secure-id',\n\t\t\tphone: '867-5309',\n\t\t\tbestFriend: 'jenny'\n\t\t});\n\t}, [])\n\n\treturn null; // Or your app's rendering code.\n}\n\t\t5Initialize the server SDK.Send errors to Highlight from your Remix server using the entry.server.tsx file.\n// app/entry.server.tsx\nimport { H, HandleError } from '@highlight-run/remix/server'\n\nconst nodeOptions = { projectID: process.env.HIGHLIGHT_PROJECT_ID }\n\nexport const handleError = HandleError(nodeOptions)\n\n// Handle server requests\t\t\t\t\n\t\t\t\t6Verify installationCheck your dashboard for a new session. Make sure to remove the Status is Completed filter to see ongoing sessions. Don't see anything? Send us a message in our community and we can help debug.7More Remix features?See our fullstack Remix guide for more information on how to use Highlight with Remix."
		}
	},
	{
		"page": {
			"title": "Vue.js",
			"breadcrumbs": "Docs / Getting Started / Frontend / Vue.js",
			"content": "Learn how to set up highlight.io with your React application.1Install the npm package & SDK.Install the npm package highlight.run in your terminal.# with yarn\nyarn add highlight.run# with pnpm\npnpm add highlight.run# with npm\nnpm install highlight.run2Initialize the SDK in your frontend.Grab your project ID from app.highlight.io/setup, and pass it as the first parameter of the H.init() method.To get started, we recommend setting environment, version, and networkRecording. Refer to our docs on SDK configuration to read more about these options....\nimport { H } from 'highlight.run';\n\nimport { createApp } from 'vue'\nimport App from './App.vue'\n\nH.init('<YOUR_PROJECT_ID>', {\n    environment: 'production',\n    version: 'commit:abcdefg12345',\n\tnetworkRecording: {\n\t\tenabled: true,\n\t\trecordHeadersAndBody: true,\n        urlBlocklist: [\n            // insert full or partial urls that you don't want to record here\n\t\t\t// Out of the box, Highlight will not record these URLs (they can be safely removed):\n\t\t\t\"https://www.googleapis.com/identitytoolkit\",\n\t\t\t\"https://securetoken.googleapis.com\",\n        ],\n\t},\n});\n\n...\ncreateApp(App).mount('#app')\n\n                3Identify users.Identify users after the authentication flow of your web app. We recommend doing this in any asynchronous, client-side context.\nThe first argument of identify will be searchable via the property identifier, and the second property is searchable by the key of each item in the object.\nFor more details, read about session search or how to identify users.\nimport { H } from 'highlight.run';\n\nfunction Login(username: string, password: string) {\n\t// login logic here...\n\t// pass the user details from your auth provider to the H.identify call\n\t\n\tH.identify('jay@highlight.io', {\n\t\tid: 'very-secure-id',\n\t\tphone: '867-5309',\n\t\tbestFriend: 'jenny'\n\t});\n}\n4Verify installationCheck your dashboard for a new session. Make sure to remove the Status is Completed filter to see ongoing sessions. Don't see anything? Send us a message in our community and we can help debug.5Configure sourcemaps in CI. (optional)To get properly enhanced stacktraces of your javascript app, we recommend instrumenting sourcemaps. If you deploy public sourcemaps, you can skip this step. Refer to our docs on sourcemaps to read more about this option.# Upload sourcemaps to Highlight\n...\nnpx --yes @highlight-run/sourcemap-uploader upload --apiKey ${YOUR_ORG_API_KEY} --path ./build\n...6Instrument your backend.The next step is instrumenting your backend to tie logs/errors to your frontend sessions. Read more about this in our backend instrumentation section."
		}
	},
	{
		"page": {
			"title": "Using highlight.io with Angular",
			"breadcrumbs": "Docs / Getting Started / Frontend / Angular",
			"content": "Learn how to set up highlight.io with your Angular application.1Install the npm package & SDK.Install the npm package highlight.run in your terminal.# with yarn\nyarn add highlight.run# with pnpm\npnpm add highlight.run# with npm\nnpm install highlight.run2Initialize the SDK in your frontend.Grab your project ID from app.highlight.io/setup, and pass it as the first parameter of the H.init() method.To get started, we recommend setting tracingOrigins and networkRecording so that we can pass a header to pair frontend and backend errors. Refer to our docs on SDK configuration and Fullstack Mapping to read more about these options.// app.module.ts\n    import { NgModule } from '@angular/core';\n...\n\nimport { H } from 'highlight.run';\n\nH.init('<YOUR_PROJECT_ID>', {\n    environment: 'production',\n    version: 'commit:abcdefg12345',\n\tnetworkRecording: {\n\t\tenabled: true,\n\t\trecordHeadersAndBody: true,\n        urlBlocklist: [\n            // insert full or partial urls that you don't want to record here\n\t\t\t// Out of the box, Highlight will not record these URLs (they can be safely removed):\n\t\t\t\"https://www.googleapis.com/identitytoolkit\",\n\t\t\t\"https://securetoken.googleapis.com\",\n        ],\n\t},\n});\n\n@NgModule({\n    ...\n})\nexport class AppModule { }\n3Identify users.Identify users after the authentication flow of your web app. We recommend doing this in any asynchronous, client-side context.\nThe first argument of identify will be searchable via the property identifier, and the second property is searchable by the key of each item in the object.\nFor more details, read about session search or how to identify users.\nimport { H } from 'highlight.run';\n\nfunction Login(username: string, password: string) {\n\t// login logic here...\n\t// pass the user details from your auth provider to the H.identify call\n\t\n\tH.identify('jay@highlight.io', {\n\t\tid: 'very-secure-id',\n\t\tphone: '867-5309',\n\t\tbestFriend: 'jenny'\n\t});\n}\n4Verify installationCheck your dashboard for a new session. Make sure to remove the Status is Completed filter to see ongoing sessions. Don't see anything? Send us a message in our community and we can help debug.5Configure sourcemaps in CI. (optional)To get properly enhanced stacktraces of your javascript app, we recommend instrumenting sourcemaps. If you deploy public sourcemaps, you can skip this step. Refer to our docs on sourcemaps to read more about this option.# Upload sourcemaps to Highlight\n...\nnpx --yes @highlight-run/sourcemap-uploader upload --apiKey ${YOUR_ORG_API_KEY} --path ./build\n...6Instrument your backend.The next step is instrumenting your backend to tie logs/errors to your frontend sessions. Read more about this in our backend instrumentation section."
		}
	},
	{
		"page": {
			"title": "Using highlight.io with Gatsby",
			"breadcrumbs": "Docs / Getting Started / Frontend / Gatsby.js",
			"content": "Learn how to set up highlight.io with your Gatsby application.1Install the gatsby plugin.Install the npm pulugin in your terminal.# with npm\nnpm install @highlight-run/gatsby-plugin-highlight# with yarn\nyarn add @highlight-run/gatsby-plugin-highlight\n    # with pnpm\npnpm add @highlight-run/gatsby-plugin-highlight2Initialize the plugin in your gatsby configuration.Grab your project ID from app.highlight.io/setup, and set it as the orgID.To get started, we recommend setting environment, version, and networkRecording. Refer to our docs on SDK configuration to read more about these options.module.exports = {\n\tplugins: [\n\t\t{\n\t\t\tresolve: '@highlight-run/gatsby-plugin-highlight',\n\t\t\toptions: {\n\t\t\t\torgID: '<YOUR_PROJECT_ID>', // Get your project ID from https://app.highlight.io/setup\n\t\t\t},\n\t\t},\n\t],\n}\n                3Identify users.Identify users after the authentication flow of your web app. We recommend doing this in any asynchronous, client-side context.\nThe first argument of identify will be searchable via the property identifier, and the second property is searchable by the key of each item in the object.\nFor more details, read about session search or how to identify users.\nimport { H } from 'highlight.run';\n\nfunction Login(username: string, password: string) {\n\t// login logic here...\n\t// pass the user details from your auth provider to the H.identify call\n\t\n\tH.identify('jay@highlight.io', {\n\t\tid: 'very-secure-id',\n\t\tphone: '867-5309',\n\t\tbestFriend: 'jenny'\n\t});\n}\n4Verify installationCheck your dashboard for a new session. Make sure to remove the Status is Completed filter to see ongoing sessions. Don't see anything? Send us a message in our community and we can help debug.5Configure sourcemaps in CI. (optional)To get properly enhanced stacktraces of your javascript app, we recommend instrumenting sourcemaps. If you deploy public sourcemaps, you can skip this step. Refer to our docs on sourcemaps to read more about this option.# Upload sourcemaps to Highlight\n...\nnpx --yes @highlight-run/sourcemap-uploader upload --apiKey ${YOUR_ORG_API_KEY} --path ./build\n...6Instrument your backend.The next step is instrumenting your backend to tie logs/errors to your frontend sessions. Read more about this in our backend instrumentation section."
		}
	},
	{
		"page": {
			"title": "Using highlight.io with SvelteKit",
			"breadcrumbs": "Docs / Getting Started / Frontend / SvelteKit",
			"content": "Learn how to set up highlight.io with your SvelteKit application.1Install the npm package & SDK.Install the npm package highlight.run in your terminal.# with yarn\nyarn add highlight.run# with pnpm\npnpm add highlight.run# with npm\nnpm install highlight.run2Initialize the SDK in your frontend.In SvelteKit, we recommend initializing highlight.io in the hooks.client.js or hooks.client.ts file. You can find more details about this file in the SvelteKit docs here. To get started, we recommend setting tracingOrigins and networkRecording so that we can pass a header to pair frontend and backend errors.\nGrab your project ID from app.highlight.io/setup, and pass it as the first parameter of the H.init() method.// hooks.client.ts\n...\n\nimport { H } from 'highlight.run';\n\nH.init('<YOUR_PROJECT_ID>', {\n    environment: 'production',\n    version: 'commit:abcdefg12345',\n    tracingOrigins: true,\n\tnetworkRecording: {\n\t\tenabled: true,\n\t\trecordHeadersAndBody: true,\n        urlBlocklist: [\n            // insert full or partial urls that you don't want to record here\n\t\t\t// Out of the box, Highlight will not record these URLs (they can be safely removed):\n\t\t\t\"https://www.googleapis.com/identitytoolkit\",\n\t\t\t\"https://securetoken.googleapis.com\",\n        ],\n\t},\n});\n...\n3Confirm CSS is served by absolute path.SvelteKit may generate CSS paths that are relative which may interfere with our logic to fetch stylesheets. Update your svelte.config.js to disable relative paths. See the SvelteKit docs here for more details./** @type {import('@sveltejs/kit').Config} */\nconst config = {\n  paths: { relative: false }\n};\n\nexport default config;4Identify users.Identify users after the authentication flow of your web app. We recommend doing this in any asynchronous, client-side context.\nThe first argument of identify will be searchable via the property identifier, and the second property is searchable by the key of each item in the object.\nFor more details, read about session search or how to identify users.\nimport { H } from 'highlight.run';\n\nfunction Login(username: string, password: string) {\n\t// login logic here...\n\t// pass the user details from your auth provider to the H.identify call\n\t\n\tH.identify('jay@highlight.io', {\n\t\tid: 'very-secure-id',\n\t\tphone: '867-5309',\n\t\tbestFriend: 'jenny'\n\t});\n}\n5Verify installationCheck your dashboard for a new session. Make sure to remove the Status is Completed filter to see ongoing sessions. Don't see anything? Send us a message in our community and we can help debug.6Configure sourcemaps in CI. (optional)To get properly enhanced stacktraces of your javascript app, we recommend instrumenting sourcemaps. If you deploy public sourcemaps, you can skip this step. Refer to our docs on sourcemaps to read more about this option.# Upload sourcemaps to Highlight\n...\nnpx --yes @highlight-run/sourcemap-uploader upload --apiKey ${YOUR_ORG_API_KEY} --path ./build\n...7Instrument your backend.The next step is instrumenting your backend to tie logs/errors to your frontend sessions. Read more about this in our backend instrumentation section."
		}
	},
	{
		"page": {
			"title": "Using highlight.io in any frontend framework",
			"breadcrumbs": "Docs / Getting Started / Frontend / Other",
			"content": "Learn how to set up highlight.io with any browser-based framework.1Import the script in your index html file.Add the following script tag to the head section of your index.html file.<html>\n<head>\n    <script src=\"https://unpkg.com/highlight.run\"></script>\n</head>\n<body>\n    <!-- Your Application -->\n</body>\n</html>\n2Initialize the SDK.Grab your project ID from app.highlight.io/setup, and pass it as the first parameter of the H.init() method. Place this method just below the initialize script tag in the head section of your index.html file.To get started, we recommend setting environment, version, and networkRecording. Refer to our docs on SDK configuration to read more about these options.<html>\n<head>\n    <script src=\"https://unpkg.com/highlight.run\"></script>\n    <script>\n        H.init('<YOUR_PROJECT_ID>', { // Get your project ID from https://app.highlight.io/setup\n            environment: 'production',\n            version: 'commit:abcdefg12345',\n            networkRecording: {\n                enabled: true,\n                recordHeadersAndBody: true,\n                urlBlocklist: [\n\t\t\t\t\t// insert full or partial urls that you don't want to record here\n\t\t\t\t\t// Out of the box, Highlight will not record these URLs (they can be safely removed):\n\t\t\t\t\t\"https://www.googleapis.com/identitytoolkit\",\n\t\t\t\t\t\"https://securetoken.googleapis.com\",\n                ],\n            },\n        });\n    </script>\n</head>\n<body>\n    <!-- Your Application -->\n</body>\n</html>\n3Identify users.Identify users after the authentication flow of your web app. We recommend doing this in any asynchronous, client-side context.\nThe first argument of identify will be searchable via the property identifier, and the second property is searchable by the key of each item in the object.\nFor more details, read about session search or how to identify users.\nimport { H } from 'highlight.run';\n\nfunction Login(username: string, password: string) {\n\t// login logic here...\n\t// pass the user details from your auth provider to the H.identify call\n\t\n\tH.identify('jay@highlight.io', {\n\t\tid: 'very-secure-id',\n\t\tphone: '867-5309',\n\t\tbestFriend: 'jenny'\n\t});\n}\n4Verify installationCheck your dashboard for a new session. Make sure to remove the Status is Completed filter to see ongoing sessions. Don't see anything? Send us a message in our community and we can help debug.5Configure sourcemaps in CI. (optional)To get properly enhanced stacktraces of your javascript app, we recommend instrumenting sourcemaps. If you deploy public sourcemaps, you can skip this step. Refer to our docs on sourcemaps to read more about this option.# Upload sourcemaps to Highlight\n...\nnpx --yes @highlight-run/sourcemap-uploader upload --apiKey ${YOUR_ORG_API_KEY} --path ./build\n...6Instrument your backend.The next step is instrumenting your backend to tie logs/errors to your frontend sessions. Read more about this in our backend instrumentation section."
		}
	},
	{
		"page": {
			"title": "SDK Configuration Overview",
			"breadcrumbs": "Docs / Getting Started / Frontend / JS SDK Configuration / SDK Configuration Overview",
			"content": "The highlight.io Javascript SDK does a lot of things. Here's some docs on how to configure it to do what you want.\nCanvas Recording.How to enable/disable canvas recording in our client SDK.Console Messages.How to enable/disable console message recording in our client SDK.Content Security Policy.Configuring your CSP to play well with highlight.io.Identifying Users.Identifying visitors on your web application.Iframe Support.How to record a highlight.io session within an iframe.Monkey Patches.Information about the js methods that highlight.io monkey patches.Privacy & Redaction.How to redact and strip out sensitive data in a highlight.io session.Proxying requests.How to proxy requests through your backend for security purposes.React Error BoundaryHow to proxy requests through your backend for security purposes."
		}
	},
	{
		"page": {
			"title": "SDK Configuration Overview",
			"breadcrumbs": "Docs / Getting Started / Frontend / JS SDK Configuration / Client SDK Changelog / SDK Configuration Overview",
			"content": "Check out our Github repo SDKs to see individual SDK changelogs."
		}
	},
	{
		"page": {
			"title": "Canvas & WebGL",
			"breadcrumbs": "Docs / Getting Started / Frontend / JS SDK Configuration / Canvas & WebGL",
			"content": "\n\nCanvas Recording\nHighlight can record the contents of <canvas> elements, with support for 2D and 3D contexts. Canvas recording can be enabled and configured via the H.init options, set up depending on the type of HTML5 Canvas application you are building. For example, a video game WebGL application or three.js visualization may require a higher snapshotting framerate to ensure the replay has enough frames to understand what was happening.\nEnable canvas recording by configuring H.init() in the following way:\nH.init('<YOUR_PROJECT_ID>', {\n  enableCanvasRecording: true,        // enable canvas recording\n  samplingStrategy: {\n    canvas: 2,                        // snapshot at 2 fps\n    canvasMaxSnapshotDimension: 480,  // snapshot at a max 480p resolution\n  },\n})\n\nWith these settings, the canvas is serialized as a 480p video at 2FPS.\nsamplingStrategy.canvas is the frame per second rate used to record the HTML canvas. A value < 5 is recommended to ensure the recording is not too large and does not have issues with playback.\nsamplingStrategy.canvasManualSnapshot is the frame per second rate used in manual snapshotting mode. See Manual Snapshotting below.\nsamplingStrategy.canvasFactor: a resolution scaling factor applied to both dimensions of the canvas.\nsamplingStrategy.canvasMaxSnapshotDimension: max recording resolution of the largest dimension of the canvas.\nsamplingStrategy.canvasClearWebGLBuffer: (advanced) set to false to disable webgl buffer clearing (if the canvas flickers when recording).\nsamplingStrategy.canvasInitialSnapshotDelay: (advanced) time (in milliseconds) to wait before the initial snapshot of canvas/video elements.\nPrivacy controls do not apply to canvas recording at this time.\nEnabling canvas recording should not have any impact on the performance your application. We've recently changed our uploading client to use browser web-workers to ensure that data serialization cannot block the rendering of your application. If you run into any issues please let us know!\nWebGL Recording\nHighlight is able to record websites that use WebGL in the <canvas> element.\nTo enable WebGL recording, enable canvas recording by following the steps above.\nIf you use WebGL(2) and fail to see a canvas recorded or see a transparent image, setup manual snapshotting.\nManual Snapshotting\nA canvas may fail to be recorded (recorded as a transparent image) because of WebGL\ndouble buffering. The canvas is not accessible from the javascript thread because it may\nno longer be loaded in memory, despite being rendered by the GPU (see this chrome bug report for additional context).\nManual snapshotting hooks into your WebGL render function to call H.snapshot(canvas) after\nyou paint to the WebGL context. To set this up, pass the following options to highlight first:\nH.init('<YOUR_PROJECT_ID>', {\n  enableCanvasRecording: true,        // enable canvas recording\n  samplingStrategy: {\n      canvasManualSnapshot: 2,        // snapshot at 2 fps\n    canvasMaxSnapshotDimension: 480,  // snapshot at a max 480p resolution\n    // any other settings...\n  },\n})\n\nNow, hook into your WebGL rendering code and call H.snapshot.\n// babylon.js\nengine.runRenderLoop(() => {\n    scene.render()\n    H.snapshot(canvasElementRef.current)\n})\n\nLibraries like Three.js export an onAfterRender method that you can use to call H.snapshot.\nWebcam Recording and Inlining Video Resources\nIf you use src=blob: <video> elements in your app (for example, you are using javascript to dynamically generate a video stream) or are streaming a webcam feed to a <video> element, you'll need to inline the <video> elements for them to appear correctly in the playback. Do this by enabling the inlineImages setting.\nH.init('<YOUR_PROJECT_ID>', {\n  ..., \n  inlineImages: true,\n})\n"
		}
	},
	{
		"page": {
			"title": "Console Messages",
			"breadcrumbs": "Docs / Getting Started / Frontend / JS SDK Configuration / Console Messages",
			"content": "Highlight out of the box shows you the console messages that were logged during a session.\nConsole messages are not recorded on localhost because Highlight emits debug messages which we prefer not to flood your environment with.\nConfiguration\n\nDisabling console recording can be configured with disableConsoleRecording.\n\nYou can specify which console methods to record with consoleMethodsToRecord.\n\nSee H.init() for more information."
		}
	},
	{
		"page": {
			"title": "Content-Security-Policy",
			"breadcrumbs": "Docs / Getting Started / Frontend / JS SDK Configuration / Content-Security-Policy",
			"content": "You should keep reading this if your application runs in an environment that enforces content security policies.\nContent-Security-Policy allows you to tell the browser what and how your page can interact with third-party scripts.\nHere are the policies you'll need to set to use Highlight:\nscript-src: https://static.highlight.io\nThis policy is to allow downloading the Highlight runtime code for session recording and error monitoring.\nworker-src: blob: https://static.highlight.io\nThis policy allows our script to create a web-worker which we use to serialize the recording data without affecting the performance of your application.\nconnect-src: https://pub.highlight.run\nThis policy is to allow connecting with Highlight servers to send recorded session data.\nYour CSP definition may look something like this:\n<meta\n  http-equiv=\"Content-Security-Policy\"\n  content=\"default-src 'self'; script-src 'self' https://static.highlight.io; worker-src: blob: https://static.highlight.io; connect-src https://pub.highlight.run;\"\n/>\n"
		}
	},
	{
		"page": {
			"title": "Identifying Users",
			"breadcrumbs": "Docs / Getting Started / Frontend / JS SDK Configuration / Identifying Users",
			"content": "To tag sessions with user-specific identifiers (name, email, etc.), you can call the H.identify()method in your app. This will automatically index your sessions so that they can be filtered by these attributes.\nH.identify('eliza@corp.com', { id: 'ajdf837dj', phone: '867-5309' })\n\nUser Display Names\nBy default, Highlight will show the identifier as the user's display name on the session viewer and session feed. You can override this by setting the highlightDisplayName or email fields in the H.identify() metadata.\nCustomer User Avatars\nYou can replace the placeholder user avatars Highlight uses with an image that you provide. You can do this by setting the avatar field in the H.identify() metadata.\nThe image URL usually comes from your authentication provider (Firebase, Auth0, Active Directory, etc.). You can forward that URL to Highlight.\nSaving the image\nHighlight does not make a copy of the image. Highlight will render the image directly. This means the image will adhere to any authorization policies.\nH.identify('steven@corp.com', { avatar: 'https://<IMAGE_URL>.png' })\n\nAPI\nSee the H.identify() API documentation for more information on how to use it.\nWhat happens before a user is identified?\nAll key session information is tracked regardless of whether a session is identified. Highlight will generate an identifier for a user which you can see in the session player unless you set your own by calling H.identify().\nWhen a user is identified we will attempt to assign their information to previous sessions from the same browser. If this happens you will see an indicator in the UI showing the data was inferred for a session and that the session was never explicitly identified."
		}
	},
	{
		"page": {
			"title": "iframe Recording",
			"breadcrumbs": "Docs / Getting Started / Frontend / JS SDK Configuration / iframe Recording",
			"content": "Recording within iframe elements\n\nHighlight will recreate an iframe with the same src. The iframe will not load if the src's origin has a restrictive X-Frame-Options header.\n\nHighlight only supports recording same-origin iframes because of browsers' same-origin policy. If it's possible to init Highlight within the\niframe , you can record the events within as a separate session in your same project.\n\nIf your\niframe  source becomes invalid after some time or will not render content when inserted in a different domain or website, the recording will not show the correct content that the user saw.\n\n\nRecording a cross-origin iframe element\nCross-origin iframes are <iframe> elements in your app that reference a domain considered to be of a different origin. When your iframe uses a src tag pointing to a different origin, the iframe is not accessible from the parent page. However, the iframe can still emit messages that the parent page can hear.\nTo support cross-origin iframes, we added functionality into our recording client that allows the iframe to forward its events to the parent session. All you need to do is add the Highlight snippet to both the parent window and the iframe.\nEnsure you are using highlight.run 7.1.0 or newer. Then, set the following option on both of the H.init calls: in the parent window and in the iframe.\nimport { H } from 'highlight.run'\n\nH.init('<YOUR_PROJECT_ID>', {\n  recordCrossOriginIframe: true,\n})\n\nEnsure that you add the H.init call to both the parent page and the iframe page, and that you've set recordCrossOriginIframe in both H.init calls."
		}
	},
	{
		"page": {
			"title": "Monkey Patches",
			"breadcrumbs": "Docs / Getting Started / Frontend / JS SDK Configuration / Monkey Patches",
			"content": "All the data that Highlight collects is provided by running the Highlight snippet on your app. When the Highlight snippet runs, it monkey patches browser APIs in order to record things like:\n\nErrors\n\nConsole messages\n\nNetwork requests\n\nChanges on the page\n\nHere is a list of all the browser APIs that Highlight monkey patches\n\nwindow.sessionStorage.setItem\n\nwindow.sessionStorage.getItem\n\nwindow.sessionStorage.removeItem\n\nwindow.onerror\n\nwindow.fetch\n\nwindow.FontFace\n\nwindow.scroll\n\nwindow.scrollTo\n\nwindow.scrollBy\n\nwindow.scrollIntoView\n\nwindow.WebGLRenderingContext\n\nwindow.WebGL2RenderingContext\n\nwindow.CanvasRenderingContext2D\n\nwindow.HTMLCanvasElement\n\nwindow.CSSStyleSheet.prototype.insertRule\n\nwindow.CSSStyleSheet.prototype.deleteRule\n\nwindow.CSSGroupingRule\n\nwindow.CSSMediaRule\n\nwindow.CSSConditionRule\n\nwindow.CSSSuportsRule\n\nwindow.CSSStyleDeclaration.prototype.setProperty\n\nwindow.CSSStyleDeclaration.prototype.removeProperty\n\nhistory.pushState\n\nhistory.replaceState\n\nXMLHttpRequest.prototype.open\n\nXMLHttpRequest.prototype.setRequestHeader\n\nXMLHttpRequest.prototype.send\n\nconsole.assert\n\nconsole.clear\n\nconsole.count\n\nconsole.countReset\n\nconsole.debug\n\nconsole.dir\n\nconsole.dirxml\n\nconsole.error\n\nconsole.group\n\nconsole.groupCollapsed\n\nconsole.groupEnd\n\nconsole.info\n\nconsole.log\n\nconsole.table\n\nconsole.time\n\nconsole.timeEnd\n\nconsole.timeLog\n\nconsole.trace\n\nconsole.warn\n"
		}
	},
	{
		"page": {
			"title": "Persistent Asset Storage",
			"breadcrumbs": "Docs / Getting Started / Frontend / JS SDK Configuration / Persistent Asset Storage",
			"content": "Persistent Asset Storage\nWhen Highlight records your HTML DOM, media assets including fonts, stylesheets, videos, and images are referenced by their original source URL.\nThis means that playing a session after it was recorded may lead to discrepancies in the replay if any of the assets change.\nFor example, consider the following HTML element\n<video\n    preload=\"metadata\"\n    autoPlay={true}\n    crossOrigin=\"anonymous\"\n    src=\"https://static.highlight.io/dev/BigBuckBunny.mp4\"\n></video>\n\nWhen a session is recorded, we will record this element as is, storing the video playback time and any seek events as they happen.\nIf the contents of https://static.highlight.io/dev/BigBuckBunny.mp4 change after the session is recorded, the playback\nwill be inconsistent with what a user actually saw, since the video file will differ.\nTo ensure pixel-perfect replay, we have an Enterprise tier feature to persist these assets alongside our secure session storage.\nWith this feature enabled, the replay will render this element as\n<video\n    preload=\"metadata\"\n    autoPlay={true}\n    crossOrigin=\"anonymous\"\n    src=\"https://pri.highlight.io/assets/1/bxvdqlD_55hvnUuAo-NTiyiLOqeobyMatWjgmLFZhH0~\"\n></video>\n\nwhere https://pri.highlight.io/assets/1/bxvdqlD_55hvnUuAo-NTiyiLOqeobyMatWjgmLFZhH0~ will be the video file saved at the time of the recording.\nThe asset will be persisted as long as your session is retained.\nUpgrade your plan and  reach out to us to enable the feature!"
		}
	},
	{
		"page": {
			"title": "Privacy",
			"breadcrumbs": "Docs / Getting Started / Frontend / JS SDK Configuration / Privacy",
			"content": "Masking Elements\nOne way to sanitize your recordings is by adding the highlight-block CSS class to elements that should be ignored.\n<div class=\"highlight-block\">Super secret sauce</div>\n\nThe Highlight snippet will in-turn measure the dimensions of the ignored element, and when the recording is being replayed, an empty placeholder will replace the content.\n\nObfuscating Elements\nAlternatively, you can obfuscate specific HTML elements by adding the highlight-mask CSS class. The effect is the same of setting privacySetting: 'strict' (the randomized text in the photo above) but applies to the specific HTML element that you mask.\n<div class=\"highlight-mask\">This is some sensitive data <button>Important Button</button></div>\n\nIgnoring Input\nThe following CSS class only works for <input> elements. If you are interested in blocking the capture of other HTML elements, see the highlight-block class\nFor sensitive input fields that your team would like to ignore user input for, you can add a CSS class highlight-ignore that will preserve the styling of the input element, but ignore all user input.\n<input class=\"highlight-ignore\" name=\"social security number\" />\n\nNetwork Request Redaction\nInterested in redacting particular requests, responses, or the data within them? Highlight will redact certain headers out of the box, but provides a few ways to customize the redaction process to suit your specific needs and preferences. Take a look at our documentation on Recording Network Requests and Responses to learn more.\nDefault Privacy Mode\nBy default, Highlight will obfuscate any text or input data that matches commonly used Regex expressions and input names of personally identifiable information. This offers a base level protection from recording info such as addresses, phone numbers, social security numbers, and more. It will not obfuscate any images or media content. It is possible that other, non PII text is obfuscated if it matches the expressions for larger number, or contact information on the site. If you want to turn this off, you can set privacySetting to none when calling H.init().\nNote: This mode is only available in SDK versions 8.0.0 and later.\nHere are a list of the regex expressions used in default privacy mode:\nEmail: \"[a-zA-Z0-9.!#$%&'*+=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:.[a-zA-Z0-9-]+)*\"\nSSN: '[0-9]{3}-?[0-9]{2}-?[0-9]{4}'\nPhone number: '[+]?[(]?[0-9]{3}[)]?[-s.]?[0-9]{3}[-s.]?[0-9]{4,6}'\nCredit card: '[0-9]{4}-?[0-9]{4}-?[0-9]{4}-?[0-9]{4}'\nUnformatted SSN, phone number, credit card: '[0-9]{9,16}'\nAddress: '[0-9]{1,5}.?[0-9]{0,3}s[a-zA-Z]{2,30}s[a-zA-Z]{2,15}'\nIP address: '(?:[0-9]{1,3}.){3}[0-9]{1,3}'\n\nStrict Privacy Mode\nIf you don't want to manually annotate what elements to not record then you can set privacySetting to strict when calling H.init(). Strict Privacy Mode will obfuscate all text and images. The text obfuscation is not reversible and is done on the client.\nHere are some examples:\n\n<h1>Hello World</h1> will be recorded as <h1>1f0eqo jw02d</h1>\n\n<img src=\"https://my-secrets.com/secret.png\" /> will be recorded as <img src=\"\" />\n\n<iframe\n  height=\"500px\"\n  href=\"https://xenodochial-benz-c14354.netlify.app/\"\n  width=\"100%\"\n  border=\"none\"\n  src=\"https://xenodochial-benz-c14354.netlify.app/\"\n  style=\"border:none\"\n  ><a href=\"https://xenodochial-benz-c14354.netlify.app/\" target=\"\" title=\"xenodochial-benz-c14354.netlify.app\"\n    >null</a\n  ></iframe\n>\n"
		}
	},
	{
		"page": {
			"title": "Proxying Highlight",
			"breadcrumbs": "Docs / Getting Started / Frontend / JS SDK Configuration / Proxying Highlight",
			"content": "Proxying is only available on an Annual Plan. If you would like use this, you will need to reach out to sales@highlight.io.\nIf you're not seeing sessions or errors on Highlight, chances are that requests to Highlight are being blocked. This can happen for different reasons such as a third-party browser extensions, browser configuration, or VPN settings.\nOne way we can avoid this is by setting up proxy from your domain to Highlight. To do this, you will need access to your domain's DNS settings.\nSetting up the proxy\n\nOn your domain, add a CNAME record that points highlight.<YOUR_DOMAIN> to pub.highlight.run.\n\nSend us an email at sales@highlight.io so we can send over a cost proposal for your annual usage.\n\nBelow is an example email/message that you can send over.\n\nHello!\nI'd like to use the Highlight Proxy and I'm interested in an annual plan. I've set up an CNAME record for: highlight.piedpiper.com\n\nExample\nYou have an app running on https://piedpiper.com. Your DNS record will point highlight.piedpiper.com to our backend.\nUsing the Proxy\nIn your app where you call H.init(), you will need to set backendUrl to the DNS record you just created. For the example above:\nH.init('<YOUR_PROJECT_ID>', {\n  backendUrl: 'https://highlight.piedpiper.com',\n})\n\nYou should now see Highlight making requests to https://highlight.piedpiper.com instead of https://pub.highlight.run."
		}
	},
	{
		"page": {
			"title": "React.js Error Boundary",
			"breadcrumbs": "Docs / Getting Started / Frontend / JS SDK Configuration / React.js Error Boundary",
			"content": "Highlight ships @highlight-run/react which can be installed alongside highlight.run for additional functionality for React applications.\nError Boundary\nHighlight provides an ErrorBoundary to help you provide a better experience for your users when your application crashes. Using an ErrorBoundary gives your application an opportunity to recover from a bad state.\nimport { ErrorBoundary } from '@highlight-run/react'\n\nconst App = () => (\n  <ErrorBoundary>\n    <YourAwesomeApplication />\n  </ErrorBoundary>\n)\n\nExamples\nShowing the feedback modal when a crash happens\n\nimport { ErrorBoundary } from '@highlight-run/react'\n\nconst App = () => (\n  <ErrorBoundary>\n    <YourAwesomeApplication />\n  </ErrorBoundary>\n)\n\nShowing a custom feedback modal when a crash happens\nYou should use this if you would like to replace the feedback modal with your own styles/branding.\nimport { ErrorBoundary } from '@highlight-run/react'\n\nconst App = () => (\n  <ErrorBoundary\n    customDialog={\n      <div>\n        <h2>Whoops! Looks like a crash happened.</h2>\n        <p>Don't worry, our team is tracking this down!</p>\n\n        <form>\n          <label>\n            Feedback\n            <input type=\"text\" />\n          </label>\n\n          <button type=\"submit\">Send Feedback</button>\n        </form>\n      </div>\n    }\n  >\n    <YourAwesomeApplication />\n  </ErrorBoundary>\n)\n\nUsing the ErrorBoundary with react-router\nIf you're using react-router, you may have error raised by your route loaders\nthat can be handled with the highlight error boundary.\nTo set this up, you'll need to pass your <Route> or your <RouterProvider> router\nthe ErrorBoundary prop pointing to a component that extracts the react router error from useRouteError and\nimport * as React from 'react'\nimport * as ReactDOM from 'react-dom/client'\nimport {\n\tcreateBrowserRouter,\n\tcreateRoutesFromElements,\n\tRoute,\n\tRouterProvider,\n\tuseRouteError,\n} from 'react-router-dom'\nimport { ReportDialog } from '@highlight-run/react'\nimport Root from './routes/root'\n\nfunction rootAction() {\n\tconst contact = { name: 'hello' }\n\tif (Math.random() < 0.5) {\n\t\tthrow new Response('', {\n\t\t\tstatus: 404,\n\t\t\tstatusText: 'Not Found',\n\t\t})\n\t}\n\treturn { contact }\n}\n\nfunction rootLoader() {\n\tconst contact = { name: 'hello' }\n\tif (Math.random() < 0.5) {\n\t\tthrow new Response('', {\n\t\t\tstatus: 404,\n\t\t\tstatusText: 'Not Found',\n\t\t})\n\t}\n\treturn { contact }\n}\n\nfunction ErrorPage() {\n\tconst error = useRouteError() as { statusText: string; data: string }\n\treturn (\n\t\t<ReportDialog error={new Error(`${error.statusText}: ${error.data}`)} />\n\t)\n}\n\nconst router = createBrowserRouter(\n\tcreateRoutesFromElements(\n\t\t<Route\n\t\t\tpath=\"/\"\n\t\t\telement={<Root />}\n\t\t\tloader={rootLoader}\n\t\t\taction={rootAction}\n\t\t\tErrorBoundary={ErrorPage}\n\t\t>\n\t\t\t<Route>\n\t\t\t\t<Route index element={<Root />} />\n\t\t\t</Route>\n\t\t</Route>,\n\t),\n)\n\nReactDOM.createRoot(document.getElementById('root')!).render(\n\t<React.StrictMode>\n\t\t<RouterProvider router={router} />\n\t</React.StrictMode>,\n)\n\nErrorBoundary API\nfallback\nA fallback component that gets rendered when the error boundary encounters an error.\nshowDialog\nEnables Highlight's crash report. When the ErrorBoundary is triggered, a form will be prompted to the user asking them for optional feedback. Defaults to true.\ndialogOptions\nThe strings used for the Highlight crash report.\nuser\nAllows you to attach additional user information to the feedback report. If you've called H.identify() in your application before, you won't have to set this, Highlight will infer the user's identity.\ntitle\nThe title for the report dialog.\nsubtitle\nThe subtitle for the report dialog.\nsubtitle2\nThe secondary subtitle for the report dialog.\nlabelName\nThe label for the name field.\nlabelEmail\nThe label for the email field.\nlabelComments\nThe label for the verbatim field.\nlabelClose\nThe label for the close button.\nlabelSubmit\nThe label for the submit button.\nsuccessMessage\nThe label for the success message shown after the crash report is submitted.\nhideHighlightBranding\nWhether to show the Highlight branding attribution in the report dialog.\nDefault value is false."
		}
	},
	{
		"page": {
			"title": "Recording Network Requests and Responses",
			"breadcrumbs": "Docs / Getting Started / Frontend / JS SDK Configuration / Recording Network Requests and Responses",
			"content": "Highlight out of the box shows you all the network requests durations, response codes, and sizes for a session. If you'd like more data such as the headers and bodies, you can enable recording of network requests and responses by setting networkRecording.recordHeadersAndBody (see NetworkRecordingOptions) to true when initializing Highlight.\nHighlight monkey patches XmlHttpRequest and fetch to record data from your app's requests/responses including status codes, headers, and bodies.\nPrivacy\nOut of the box, Highlight will not record known headers that contain secrets. Those headers are:\n- Authorization\n- Cookie\n- Proxy-Authorization\nIf you have other headers that you would like to redact then you can set networkRecording.networkHeadersToRedact.\nRecording Headers and Bodies\nHighlight can also record the request/response headers and bodies. You'll be able to see the headers and bodies by clicking on any XHR or Fetch requests in the session Developer Tools.\nH.init('<YOUR_PROJECT_ID>', {\n  networkRecording: {\n    enabled: true,\n    recordHeadersAndBody: true,\n  },\n})\n\nRedacting URLs\nYou may have APIs that you know will always return secrets in the headers, body, or both. In this case, you can choose URLs to redact from. If a URL matches one of the URLs you specify, the header and body will not be recorded.\nH.init('<YOUR_PROJECT_ID>', {\n  networkRecording: true,\n  urlBlocklist: [\n    'https://salted-passwords.com',\n    'https://www.googleapis.com/identitytoolkit',\n    'https://securetoken.googleapis.com',\n  ],\n})\n\nOut of the box, Highlight will not record these URLs:\n- https://www.googleapis.com/identitytoolkit\n- https://securetoken.googleapis.com\nRedacting Headers and Bodies\nIf you are dealing with sensitive data or want to go the allowlist approach then you can configure networkRecording.headerKeysToRecord and networkRecording.bodyKeysToRecord. Using these 2 configs, you'll be able to explicitly define which header/body keys to record.\nYou can also redact specific headers by using networkRecording.networkHeadersToRedact and redact specific keys in the request/response body with networkRecoding.networkBodyKeysToRedact.\nThis configuration is only available for highlight.run versions newer than 4.1.0.\nCustom Sanitizing of Response and Requests\nCreate a sanitize function to gain granular control of the data that your client sends to Highlight. The sanitize function is defined in the second argument of H.init under networkRecording.requestResponseSanitizer.\nThe networkRecording.requestResponseSanitizer method receives a Request/Response pair, and should return an object of the same type or a null value. Returning a null value means that Highlight will drop the request, and no related network logs will be seen in the session replay.\nDropping logs is not recommended unless necessary, as it can cause issues with debugging due to the missing requests. Rather, it is recommended to delete or redact header and body fields in this method.\nThis configuration is only available for highlight.run versions newer than 8.1.0.\nH.init('<YOUR_PROJECT_ID>', {\n  networkRecording: {\n    enabled: true,\n    recordHeadersAndBody: true,\n    requestResponseSanitizer: (pair) => {\n      if (pair.request.url.toLowerCase().indexOf('ignore') !== -1) {\n        // ignore the entire request/response pair (no network logs)\n        return null\n      }\n\t \n      if (pair.response.body.indexOf('secret') !== -1) {\n        // remove the body in the response\n        delete pair.response.body;\n      }\n\t \n      return pair\n    }\n  },\n})\n\nAPI\nSee NetworkRecordingOptions for more information on how to configure network recording.\nGraphQL\nWe extract GraphQL operation names and format the payloads. See GraphQL details."
		}
	},
	{
		"page": {
			"title": "Recording WebSocket Events",
			"breadcrumbs": "Docs / Getting Started / Frontend / JS SDK Configuration / Recording WebSocket Events",
			"content": "Highlight also allows you to record all of your WebSocket events in your sessions. It will display WebSocket events, such as opening a connection, sending and receiving messages, receiving an error, and closing a connection.\nEnabled this feature by setting networkRecording.recordHeadersAndBody (see NetworkRecordingOptions) to true when initializing Highlight. If you want to disable WebSocket events, but keep recording the headers and bodies of network requests, you can set networkRecording.disableWebSocketEventRecordings to true.\nHighlight monkey patches the WebSocket object to add event listeners to the respective methods when the WebSocket is initialized.\nRecording WebSocket Events\nHighlight can also record WebSocket events. WebSockets will display the initial open connection with the other network requests in the session Developer Tools. The WebSocket request can be clicked on to view the related messages and events.\nH.init('<YOUR_PROJECT_ID>', {\n  networkRecording: {\n    enabled: true,\n    recordHeadersAndBody: true,\n  },\n})\n\nDisabling WebSocket Events\nWebSocket event recording can be disabled without affecting the other network requests by setting networkRecording.disableWebSocketEventRecordings to true.\nH.init('<YOUR_PROJECT_ID>', {\n  networkRecording: {\n    enabled: true,\n    recordHeadersAndBody: true,\n    disableWebSocketEventRecordings: true\n  },\n})\n\nAPI\nSee NetworkRecordingOptions for more information on how to configure network recording.\nWebSocket event recording is only available for highlight.run versions newer than 7.3.0."
		}
	},
	{
		"page": {
			"title": "Sourcemap Configuration",
			"breadcrumbs": "Docs / Getting Started / Frontend / JS SDK Configuration / Sourcemap Configuration",
			"content": "Should I continue reading?\nIf you publicly deploy sourcemaps with your application then you do not need this guide. This guide is for applications that don't ship sourcemaps with their application.\nWhen debugging an error in highlight.io, it might be useful to get a stack trace from the original file in your codebase (rather than a minified file) to help understand what is going wrong. In order to do this, highlight.io needs access to the sourcemaps from your codebase. Sourcemaps can be sent to highlight.io in your CI/CD process.\nSending Sourcemaps to highlight.io\nThe highlight.io sourcemap-uploader can be used during your CI/CD process. Here's an example of using it:\n#!/bin/sh\n\n# Build the app\nyarn build\n\n# Upload sourcemaps to highlight.io\n# Add --appVersion \"...\" if you provide a version value in your H.init call.\nnpx --yes @highlight-run/sourcemap-uploader upload --apiKey ${YOUR_ORG_API_KEY} --path ./build\n\n# Delete sourcemaps to prevent them from being deployed\nfind build -name '*.js.map' -type f -delete\n\n# Deploy the app\n./custom-deploy-script\n\nSourcemap-uploader Arguments\napiKey\nThe API key for your project. You can find this in the project settings.\npath\nThe path that highlight.io will use to send .map files. The default value is ./build.\nappVersion\nThe version of your current deployment. Please provide the same version value as the value you provide for version in H.init(). This ensures that we're always using the same set of sourcemaps for your current bundle. If omitted, sourcemaps are uploaded as unversioned (make sure H.init() does not have a version option provided).\nGenerating Sourcemaps\nTo use the highlight.io sourcemap-uploader , you need to be generating sourcemaps for your project. Exactly how to do this depends on your target environment and javascript configuration. Bundlers like babel, webpack, esbuild, or rollup all provide different ways to enable sourcemap generation. Refer to documentation for your specific bundler to generate production-ready sourcemaps or reach out if you need more help!\nElectron App Sourcemaps\nAlthough your electron app configuration may vary, many will chose to use webpack to generate sourcemaps. Refer to the general webpack sourcemap documentation as well as this useful reference to configure your build."
		}
	},
	{
		"page": {
			"title": "Tracking Events",
			"breadcrumbs": "Docs / Getting Started / Frontend / JS SDK Configuration / Tracking Events",
			"content": "A track event is a named event that you've defined. Adding a track event is useful if you want to be able to be alerted (see alerts) or search for sessions where the user has done an action.\nExample Scenario: A Shopping Cart\nYou'd like to see what users are doing that cause them to open the shopping cart. In your app, you'll add H.track():\nimport { H } from 'highlight.run';\nimport { getSubtotal } from '@utils';\n\nconst ShoppingCard = ({ items }) => (\n    <Button\n        onClick={() => {\n            H.track(\"Shopping Cart Opened\", {\n                subtotal: getSubtotal(items),\n                numberOfItems: items.length\n            });\n        }}\n    >\n        Shopping Cart\n    </Button>\n)\n\nAPI\nSee the Recording Network Requests and Responses API documentation for more information on how to use it."
		}
	},
	{
		"page": {
			"title": "Troubleshooting",
			"breadcrumbs": "Docs / Getting Started / Frontend / JS SDK Configuration / Troubleshooting",
			"content": "Why do some parts of the session appear blank?\n• For images, videos, and other external assets, Highlight does not make a copy at record time. At replay time, we make a request for the asset. If a request fails, the most common reason is because of authorization failure, the asset no longer existing, or the host server has a restrictive CORS policy\n• For iFrames, Highlight will recreate an iframe with the same src. The iFrame will not load if the src's origin has a restrictive X-Frame-Options header.\n• For canvas/WebGL, see WebGL to enable recording\nWhy are the correct fonts not being used?\n• During a replay, Highlight will make a request for the font file on your server. In the case where the request fails, Highlight will use your fallback font. The most common reason for failing is because your have a restrictive CORS policy for Access-Control-Origin. To allow Highlight to access the font files, you'll need to add app.highlight.io."
		}
	},
	{
		"page": {
			"title": "Upgrading Highlight",
			"breadcrumbs": "Docs / Getting Started / Frontend / JS SDK Configuration / Upgrading Highlight",
			"content": "Highlight is shipping improvements multiple times a day. Non-breaking changes will automatically be applied to your applications without any action needed by you.\nIf Highlight ships a breaking change (new feature, security fix, etc.), we'll need your help to upgrade Highlight in your application. We aim to give 2 weeks notice in the event this happens. We recognize that there will be clients still using older versions of Highlight so we make sure all of our changes are backwards compatible.\nUsing a Package Manager\n# with npm\nnpm install highlight.run@latest\n\n# with yarn\nyarn upgrade highlight.run@latest\n\nHTML/CDN\nReplace the Highlight snippet in your index.html with the one on https://app.highlight.io/setup.\nChangelog\nTo see if a new version has any breaking changes, see Changelog."
		}
	},
	{
		"page": {
			"title": "Versioning Sessions & Errors",
			"breadcrumbs": "Docs / Getting Started / Frontend / JS SDK Configuration / Versioning Sessions & Errors",
			"content": "When using highlight.io, it can be useful to know which version of your app a session or error is recorded on. highlight.io helps you by letting you tag which app version a session and error was recorded on.\nTo tag your sessions with a version, you can set the version field in H.init().\nimport App from './App'\nimport { H } from 'highlight.run'\n\nH.init('<YOUR_PROJECT_ID>', {\n  version: process.env.REACT_APP_VERSION,\n})\n\nReactDOM.render(<App />, document.getElementById('root'))\n\nOnce setup, this version will then be rendered on both the error and session views."
		}
	},
	{
		"page": {
			"title": "Error Monitoring in Go",
			"breadcrumbs": "Docs / Getting Started / Backend: Error Monitoring / Go / Error Monitoring in Go",
			"content": "If there's a framework that's missing, feel free to create an issue or message us on discord.\nGo ChiGet started with Go ChiGo FiberGet started with Go FiberGo GinGet started with Go GinGo GqlgenGet started with Go GqlgenGo MuxGet started with Go Mux"
		}
	},
	{
		"page": {
			"title": "chi",
			"breadcrumbs": "Docs / Getting Started / Backend: Error Monitoring / Go / chi",
			"content": "Learn how to set up highlight.io on your Go chi backend.1Add `tracingOrigins` to your client Highlight snippet.This backend SDK requires one of the Highlight frontend SDKs to be installed, so please make sure you've followed the fullstack mapping guide first.H.init(\"<YOUR_PROJECT_ID>\", {\n  tracingOrigins: ['localhost', 'example.myapp.com/backend'],\n  networkRecording: {\n    enabled: true,\n    recordHeadersAndBody: true,\n  },\n});2Install the Highlight Go SDK.Install the highlight-go package with go get.go get -u github.com/highlight/highlight/sdk/highlight-go3Initialize the Highlight Go SDK.highlight.Start starts a goroutine for recording and sending backend traces and errors. Setting your project id lets Highlight record errors for background tasks and processes that aren't associated with a frontend session.import (\n  \"github.com/highlight/highlight/sdk/highlight-go\"\n)\n\nfunc main() {\n  // ...\n  highlight.SetProjectID(\"<YOUR_PROJECT_ID>\")\n  highlight.Start(\n\thighlight.WithServiceName(\"my-app\"),\n\thighlight.WithServiceVersion(\"git-sha\"),\n  )\n  defer highlight.Stop()\n  // ...\n}4Add the Highlight middleware.highlightChi.Middleware is a Go Chi compatible middleware.import (\n  highlightChi \"github.com/highlight/highlight/sdk/highlight-go/middleware/chi\"\n)\n\nfunc main() {\n  // ...\n  r := chi.NewRouter()\n  r.Use(highlightChi.Middleware)\n  // ...\n}5Record custom errors. (optional)If you want to explicitly send an error to Highlight, you can use the highlight.RecordError method.highlight.RecordError(ctx, err, attribute.String(\"key\", \"value\"))6Verify your errors are being recorded.Make a call to highlight.RecordError to see the resulting error in Highlight.func TestErrorHandler(w http.ResponseWriter, r *http.Request) {\n  highlight.RecordError(r.Context(), errors.New(\"a test error is being thrown!\"))\n}7Set up logging.Start sending logs to Highlight! Follow the logging setup guide to get started."
		}
	},
	{
		"page": {
			"title": "echo",
			"breadcrumbs": "Docs / Getting Started / Backend: Error Monitoring / Go / echo",
			"content": "Learn how to set up highlight.io on your Go Echo backend.1Add `tracingOrigins` to your client Highlight snippet.This backend SDK requires one of the Highlight frontend SDKs to be installed, so please make sure you've followed the fullstack mapping guide first.H.init(\"<YOUR_PROJECT_ID>\", {\n  tracingOrigins: ['localhost', 'example.myapp.com/backend'],\n  networkRecording: {\n    enabled: true,\n    recordHeadersAndBody: true,\n  },\n});2Install the Highlight Go SDK.Install the highlight-go package with go get.go get -u github.com/highlight/highlight/sdk/highlight-go3Initialize the Highlight Go SDK.highlight.Start starts a goroutine for recording and sending backend traces and errors. Setting your project id lets Highlight record errors for background tasks and processes that aren't associated with a frontend session.import (\n  \"github.com/highlight/highlight/sdk/highlight-go\"\n)\n\nfunc main() {\n  // ...\n  highlight.SetProjectID(\"<YOUR_PROJECT_ID>\")\n  highlight.Start(\n\thighlight.WithServiceName(\"my-app\"),\n\thighlight.WithServiceVersion(\"git-sha\"),\n  )\n  defer highlight.Stop()\n  // ...\n}4Add the Highlight Echo error handler.highlightEcho.Middleware() provides a Go Echo middleware to automatically record and send errors to Highlight.import (\n  highlightEcho \"github.com/highlight/highlight/sdk/highlight-go/middleware/echo\"\n)\n\nfunc main() {\n  // ...\n  e := echo.New()\n  e.Use(highlightEcho.Middleware())\n  // ...\n}5Record custom errors. (optional)If you want to explicitly send an error to Highlight, you can use the highlight.RecordError method.highlight.RecordError(ctx, err, attribute.String(\"key\", \"value\"))6Verify your errors are being recorded.Now that you've set up the Middleware, verify that the backend error handling works by consuming an error from your handler. This is as easy as having a route handler return an error.7Set up logging.Start sending logs to Highlight! Follow the logging setup guide to get started."
		}
	},
	{
		"page": {
			"title": "fiber",
			"breadcrumbs": "Docs / Getting Started / Backend: Error Monitoring / Go / fiber",
			"content": "Learn how to set up highlight.io on your Go Fiber backend.1Add `tracingOrigins` to your client Highlight snippet.This backend SDK requires one of the Highlight frontend SDKs to be installed, so please make sure you've followed the fullstack mapping guide first.H.init(\"<YOUR_PROJECT_ID>\", {\n  tracingOrigins: ['localhost', 'example.myapp.com/backend'],\n  networkRecording: {\n    enabled: true,\n    recordHeadersAndBody: true,\n  },\n});2Install the Highlight Go SDK.Install the highlight-go package with go get.go get -u github.com/highlight/highlight/sdk/highlight-go3Initialize the Highlight Go SDK.highlight.Start starts a goroutine for recording and sending backend traces and errors. Setting your project id lets Highlight record errors for background tasks and processes that aren't associated with a frontend session.import (\n  \"github.com/highlight/highlight/sdk/highlight-go\"\n)\n\nfunc main() {\n  // ...\n  highlight.SetProjectID(\"<YOUR_PROJECT_ID>\")\n  highlight.Start(\n\thighlight.WithServiceName(\"my-app\"),\n\thighlight.WithServiceVersion(\"git-sha\"),\n  )\n  defer highlight.Stop()\n  // ...\n}4Add the Highlight Fiber error handler.highlightFiber.Middleware() provides a Go Fiber middleware to automatically record and send errors to Highlight.import (\n  highlightFiber \"github.com/highlight/highlight/sdk/highlight-go/middleware/fiber\"\n)\n\nfunc main() {\n  // ...\n  app := fiber.New()\n  app.Use(highlightFiber.Middleware())\n  // ...\n}5Record custom errors. (optional)If you want to explicitly send an error to Highlight, you can use the highlight.RecordError method.highlight.RecordError(ctx, err, attribute.String(\"key\", \"value\"))6Verify your errors are being recorded.Now that you've set up the Middleware, verify that the backend error handling works by consuming an error from your handler. This is as easy as having a route handler return an error.7Set up logging.Start sending logs to Highlight! Follow the logging setup guide to get started."
		}
	},
	{
		"page": {
			"title": "gin",
			"breadcrumbs": "Docs / Getting Started / Backend: Error Monitoring / Go / gin",
			"content": "Learn how to set up highlight.io on your Go gqlgen backend.1Add `tracingOrigins` to your client Highlight snippet.This backend SDK requires one of the Highlight frontend SDKs to be installed, so please make sure you've followed the fullstack mapping guide first.H.init(\"<YOUR_PROJECT_ID>\", {\n  tracingOrigins: ['localhost', 'example.myapp.com/backend'],\n  networkRecording: {\n    enabled: true,\n    recordHeadersAndBody: true,\n  },\n});2Install the Highlight Go SDK.Install the highlight-go package with go get.go get -u github.com/highlight/highlight/sdk/highlight-go3Initialize the Highlight Go SDK.highlight.Start starts a goroutine for recording and sending backend traces and errors. Setting your project id lets Highlight record errors for background tasks and processes that aren't associated with a frontend session.import (\n  \"github.com/highlight/highlight/sdk/highlight-go\"\n)\n\nfunc main() {\n  // ...\n  highlight.SetProjectID(\"<YOUR_PROJECT_ID>\")\n  highlight.Start(\n\thighlight.WithServiceName(\"my-app\"),\n\thighlight.WithServiceVersion(\"git-sha\"),\n  )\n  defer highlight.Stop()\n  // ...\n}4Add the Highlight middleware.highlightGin.Middleware() provides is a Go Gin compatible middleware.import (\n  highlightGin \"github.com/highlight/highlight/sdk/highlight-go/middleware/gin\"\n)\n\nfunc main() {\n  // ...\n  r := gin.Default()\n  r.Use(highlightGin.Middleware())\n  // ...\n}5Record custom errors. (optional)If you want to explicitly send an error to Highlight, you can use the highlight.RecordError method.highlight.RecordError(ctx, err, attribute.String(\"key\", \"value\"))6Verify your errors are being recorded.Make a call to highlight.RecordError to see the resulting error in Highlight.func TestErrorHandler(w http.ResponseWriter, r *http.Request) {\n  highlight.RecordError(r.Context(), errors.New(\"a test error is being thrown!\"))\n}7Set up logging.Start sending logs to Highlight! Follow the logging setup guide to get started."
		}
	},
	{
		"page": {
			"title": "gqlgen",
			"breadcrumbs": "Docs / Getting Started / Backend: Error Monitoring / Go / gqlgen",
			"content": "Learn how to set up highlight.io on your Go gqlgen backend.1Add `tracingOrigins` to your client Highlight snippet.This backend SDK requires one of the Highlight frontend SDKs to be installed, so please make sure you've followed the fullstack mapping guide first.H.init(\"<YOUR_PROJECT_ID>\", {\n  tracingOrigins: ['localhost', 'example.myapp.com/backend'],\n  networkRecording: {\n    enabled: true,\n    recordHeadersAndBody: true,\n  },\n});2Install the Highlight Go SDK.Install the highlight-go package with go get.go get -u github.com/highlight/highlight/sdk/highlight-go3Initialize the Highlight Go SDK.highlight.Start starts a goroutine for recording and sending backend traces and errors. Setting your project id lets Highlight record errors for background tasks and processes that aren't associated with a frontend session.import (\n  \"github.com/highlight/highlight/sdk/highlight-go\"\n)\n\nfunc main() {\n  // ...\n  highlight.SetProjectID(\"<YOUR_PROJECT_ID>\")\n  highlight.Start(\n\thighlight.WithServiceName(\"my-app\"),\n\thighlight.WithServiceVersion(\"git-sha\"),\n  )\n  defer highlight.Stop()\n  // ...\n}4Add the Highlight gqlgen error handler.highlight.NewGraphqlTracer provides a middleware you can add to your GraphQL handler to automatically record and send GraphQL resolver errors to Highlight. Calling .WithRequestFieldLogging() will also emit highlight logs for each graphql operation, giving you a wayto search across all graphql requests to your backend.import (\n  \"github.com/highlight/highlight/sdk/highlight-go\"\n)\n\nfunc main() {\n  // ...\n  server := handler.New(...)\n  // call with WithRequestFieldLogging() to emit highlight logs for each graphql operation\n  // useful for tracing which graphql operations are called as part of which frontend sessions\n  server.Use(highlight.NewGraphqlTracer(\"your-backend-service-name\").WithRequestFieldLogging())\n  // capture panics emitted by graphql handlers in highlight\n  server.SetRecoverFunc(highlight.GraphQLRecoverFunc())\n  // format logs on errors thrown by your graphql handlers\n  server.SetErrorPresenter(highlight.GraphQLErrorPresenter(\"my-gql-service\"))\n  // ...\n}5Record custom errors. (optional)If you want to explicitly send an error to Highlight, you can use the highlight.RecordError method.highlight.RecordError(ctx, err, attribute.String(\"key\", \"value\"))6Verify your errors are being recorded.Now that you've set up the Middleware, verify that the backend error handling works by consuming an error from your handler. This is as easy as having a route handler return an error.7Set up logging.Start sending logs to Highlight! Follow the logging setup guide to get started."
		}
	},
	{
		"page": {
			"title": "gorilla mux",
			"breadcrumbs": "Docs / Getting Started / Backend: Error Monitoring / Go / gorilla mux",
			"content": "Learn how to set up highlight.io on your Go gqlgen backend.1Add `tracingOrigins` to your client Highlight snippet.This backend SDK requires one of the Highlight frontend SDKs to be installed, so please make sure you've followed the fullstack mapping guide first.H.init(\"<YOUR_PROJECT_ID>\", {\n  tracingOrigins: ['localhost', 'example.myapp.com/backend'],\n  networkRecording: {\n    enabled: true,\n    recordHeadersAndBody: true,\n  },\n});2Install the Highlight Go SDK.Install the highlight-go package with go get.go get -u github.com/highlight/highlight/sdk/highlight-go3Initialize the Highlight Go SDK.highlight.Start starts a goroutine for recording and sending backend traces and errors. Setting your project id lets Highlight record errors for background tasks and processes that aren't associated with a frontend session.import (\n  \"github.com/highlight/highlight/sdk/highlight-go\"\n)\n\nfunc main() {\n  // ...\n  highlight.SetProjectID(\"<YOUR_PROJECT_ID>\")\n  highlight.Start(\n\thighlight.WithServiceName(\"my-app\"),\n\thighlight.WithServiceVersion(\"git-sha\"),\n  )\n  defer highlight.Stop()\n  // ...\n}4Add the Highlight gqlgen error handler.H.NewGraphqlTracer provides a middleware you can add to your Golang Mux handler to automatically record and send GraphQL resolver errors to Highlight.import (\n  highlightGorillaMux \"github.com/highlight/highlight/sdk/highlight-go/middleware/gorillamux\"\n)\n\nfunc main() {\n  // ...\n  r := mux.NewRouter()\n  r.Use(highlightGorillaMux.Middleware)\n  // ...\n}5Record custom errors. (optional)If you want to explicitly send an error to Highlight, you can use the highlight.RecordError method.highlight.RecordError(ctx, err, attribute.String(\"key\", \"value\"))6Verify your errors are being recorded.Make a call to highlight.RecordError to see the resulting error in Highlight.func TestErrorHandler(w http.ResponseWriter, r *http.Request) {\n  highlight.RecordError(r.Context(), errors.New(\"a test error is being thrown!\"))\n}7Set up logging.Start sending logs to Highlight! Follow the logging setup guide to get started."
		}
	},
	{
		"page": {
			"title": "Error Monitoring in Java",
			"breadcrumbs": "Docs / Getting Started / Backend: Error Monitoring / Java / Error Monitoring in Java",
			"content": "If there's a framework that's missing, feel free to create an issue or message us on discord.\nOtherGet started without a framework"
		}
	},
	{
		"page": {
			"title": "Using highlight.io with Other Java Frameworks",
			"breadcrumbs": "Docs / Getting Started / Backend: Error Monitoring / Java / Java App",
			"content": "Learn how to set up highlight.io on your Java backend.1Install the Highlight Java SDK.Add Highlight to your maven pom file.<dependency>\n\t<groupId>io.highlight</groupId>\n\t<artifactId>highlight-sdk</artifactId>\n\t<version>latest</version>\n</dependency>2Initialize the Highlight Java SDK.Highlight.init() initializes the Highlight backend SDK.HighlightOptions options = HighlightOptions.builder(\"<YOUR_PROJECT_ID>\")\n\t.version(\"1.0.0\")\n\t.environment(\"development\")\n\t.build();\n\t\n\tHighlight.init(options);3Add Highlight logger.errors will automatically record raised exceptions and send them to Highlight.Coming soon4Verify your errors are being recorded.Now that you've set up the Middleware, verify that the backend error handling works by consuming an error from traced code.5Record custom errors. (optional)If you want to explicitly send an error to Highlight, you can use the Highlight.captureException() method.try {\n} catch (Exception ex) {\n\tHighlight.captureException(exception);\n}6Using sessionsWhen everything is finished and working, you can try to use sessions. You can find more information about the SESSION_ID here parseHeadersHighlightSession session = new HighlightSession(\"SESSION_ID\");\n\tsession.captureException(new NullPointerException(\"This shouldn't happen\"));\n\tsession.captureLog(Severity.INFO, \"Just another message\");\n\tsession.captureRecord(HighlightRecord.log()\n\t\t.severity(Severity.warn(\"Internal\", Priority.HIGH))\n\t\t.message(\"Just another message\")\n\t\t.requestId(\"REQUEST_ID\")\n\t\t.attributes(attributes -> attributes.put(\"application.user.name\", \"NgLoader\"))\n\t\t.build());7Set up logging.Start sending logs to Highlight! Follow the logging setup guide to get started."
		}
	},
	{
		"page": {
			"title": "Error Monitoring in Javascript / Typescript",
			"breadcrumbs": "Docs / Getting Started / Backend: Error Monitoring / JS / Error Monitoring in Javascript / Typescript",
			"content": "If there's a framework that's missing, feel free to create an issue or message us on discord.\nApollo ServerGet started with Apollo ServerCloudflare WorkersGet started with Cloudflare WorkersExpress.jsGet started with Express.jsFirebase FunctionsGet started with Firebase FunctionsNext.jsGet started with Next.jsNode.jsGet started with Node.jstRPCGet started with tRPC"
		}
	},
	{
		"page": {
			"title": "Apollo Server",
			"breadcrumbs": "Docs / Getting Started / Backend: Error Monitoring / JS / Apollo Server",
			"content": "Learn how to set up highlight.io on your Apollo Server backend.1Add `tracingOrigins` to your client Highlight snippet.This backend SDK requires one of the Highlight frontend SDKs to be installed, so please make sure you've followed the fullstack mapping guide first.H.init(\"<YOUR_PROJECT_ID>\", {\n  tracingOrigins: ['localhost', 'example.myapp.com/backend'],\n  networkRecording: {\n    enabled: true,\n    recordHeadersAndBody: true,\n  },\n});2Install the relevant Highlight SDK(s).Install @highlight-run/node, @highlight-run/apollo with your package manager.# with npm\nnpm install --save @highlight-run/node @highlight-run/apollo# with yarn\nyarn add @highlight-run/node @highlight-run/apollo# with pnpm\npnpm add @highlight-run/node @highlight-run/apollo3Initialize the Highlight JS SDK.Initialize the Highlight JS SDK with your project ID.import { H } from '@highlight-run/node'\n\nH.init({projectID: '<YOUR_PROJECT_ID>'})4Add the Apollo Server integration.ApolloServerHighlightPlugin is an Apollo Server plugin to capture errors in your graphql handlers.import { ApolloServer } from '@apollo/server'\nimport { ApolloServerHighlightPlugin } from '@highlight-run/apollo'\n// on legacy Apollo V3, use the following import \n// import { ApolloServerV3HighlightPlugin as ApolloServerHighlightPlugin } from '@highlight-run/apollo'\n\n// ...\n\nconst server = new ApolloServer({\n  typeDefs,\n  resolvers,\n  plugins: [ApolloServerHighlightPlugin({ projectID: '<YOUR_PROJECT_ID>', serviceName: 'my-apollo-app', serviceVersion: 'git-sha' })],\n})5Optionally, report manual errors in your app.If you need to report exceptions outside of a handler, use the Highlight SDK.const parsed = H.parseHeaders(request.headers)\nH.consumeError(error, parsed?.secureSessionId, parsed?.requestId)6Verify that your SDK is reporting errors.You'll want to throw an exception in one of your apollo handlers. Access the API handler and make sure the error shows up in Highlight.const server = new ApolloServer({\n  typeDefs,\n  resolvers: {\n    Query: {\n      books: () => {\n        throw new Error('a sample error!');\n      },\n    },\n  },\n});7Set up logging.With the JS SDKs, your logs are reported automatically from console methods. See the JS logging setup guide for more details."
		}
	},
	{
		"page": {
			"title": "AWS Lambda Node.JS",
			"breadcrumbs": "Docs / Getting Started / Backend: Error Monitoring / JS / AWS Lambda Node.JS",
			"content": "Learn how to set up highlight.io on AWS Lambda.1Add `tracingOrigins` to your client Highlight snippet.This backend SDK requires one of the Highlight frontend SDKs to be installed, so please make sure you've followed the fullstack mapping guide first.H.init(\"<YOUR_PROJECT_ID>\", {\n  tracingOrigins: ['localhost', 'example.myapp.com/backend'],\n  networkRecording: {\n    enabled: true,\n    recordHeadersAndBody: true,\n  },\n});2Install the relevant Highlight SDK(s).Install @highlight-run/node with your package manager.# with npm\nnpm install --save @highlight-run/node# with yarn\nyarn add @highlight-run/node# with pnpm\npnpm add @highlight-run/node3Initialize the Highlight JS SDK.Initialize the Highlight JS SDK with your project ID.import { H } from '@highlight-run/node'\n\nH.init({projectID: '<YOUR_PROJECT_ID>'})4Add the AWS Lambda Node.js Highlight integration.Use the Node Highlight SDK in your response handler.import type { APIGatewayEvent } from 'aws-lambda'\nimport { H, Handlers } from '@highlight-run/node'\n\n// setup console log recording\nH.init({ projectID: '<YOUR_PROJECT_ID>' })\n// wrap your lambda with an error handler\nexport const handler = Handlers.serverlessFunction(\n  (event?: APIGatewayEvent) => {\n    console.log('hello, world!', {queryString: event?.queryStringParameters});\n    return {statusCode: 200};\n  },\n  { projectID: '<YOUR_PROJECT_ID>', serviceName: 'my-lambda-function', serviceVersion: 'git-sha' },\n)\n5Verify that your SDK is reporting errors.You'll want to throw an exception in one of your AWS Lambda handlers. Access the API handler and make sure the error shows up in Highlight.6Set up logging.With the JS SDKs, your logs are reported automatically from console methods. See the JS logging setup guide for more details."
		}
	},
	{
		"page": {
			"title": "Cloudflare Workers",
			"breadcrumbs": "Docs / Getting Started / Backend: Error Monitoring / JS / Cloudflare Workers",
			"content": "Learn how to set up highlight.io in Cloudflare Workers.1Add `tracingOrigins` to your client Highlight snippet.This backend SDK requires one of the Highlight frontend SDKs to be installed, so please make sure you've followed the fullstack mapping guide first.H.init(\"<YOUR_PROJECT_ID>\", {\n  tracingOrigins: ['localhost', 'example.myapp.com/backend'],\n  networkRecording: {\n    enabled: true,\n    recordHeadersAndBody: true,\n  },\n});2Install the relevant Highlight SDK(s).Install @highlight-run/cloudflare with your package manager.# with npm\nnpm install --save @highlight-run/cloudflare# with yarn\nyarn add @highlight-run/cloudflare# with pnpm\npnpm add @highlight-run/cloudflare3Add the Cloudflare Worker Highlight integration.Use the Cloudflare Worker SDK in your response handler. The sendResponse method traces successful requests while consumeError reports exceptions. All Highlight data submission uses waitUntil to make sure that we have no impact on request handling performance.import { H } from '@highlight-run/cloudflare'\n\nasync function doRequest() {\n  return new Response('hello!')\n}\n\nexport default {\n  async fetch(request: Request, env: {}, ctx: ExecutionContext) {\n    H.init(request, { HIGHLIGHT_PROJECT_ID: '<YOUR_PROJECT_ID>' }, ctx)\n    console.log('starting some work...')\n    try {\n      const response = await doRequest()\n      H.sendResponse(response)\n      return response\n    } catch (e: any) {\n      H.consumeError(e)\n      throw e\n    }\n  },\n}4Verify that your SDK is reporting errors.You'll want to throw an exception in one of your cloudflare handlers. Access the API handler and make sure the error shows up in Highlight.export default {\n  async fetch(request: Request, env: {}, ctx: ExecutionContext) {\n    H.init(request, { HIGHLIGHT_PROJECT_ID: '<YOUR_PROJECT_ID>' }, ctx)\n    H.consumeError(new Error('example error!'))\n  },\n}5Having TypeScript issues?Using our library requires setting skipLibCheck because of one of our dependencies that references node types. At runtime, this does not cause issues because of dynamic imports and other polyfilling done to ensure the sdk works in the cloud flare worker runtime, but the types are still referenced.{\n  /* ... your other options ... */\n  \"compilerOptions\": {\n    /* required due to our sdk's usage of 'opentelemetry-sdk-workers'\n       which works around node syntax in its dependencies by dynamically replacing\n       the imported javascript bundle, but does not replace the '@types/node' dependency */\n    \"skipLibCheck\": true,\n    \"types\": [\"@cloudflare/workers-types\"]\n  },\n}\n6Set up logging.With the JS SDKs, your logs are reported automatically from console methods. See the JS logging setup guide for more details."
		}
	},
	{
		"page": {
			"title": "Express.js",
			"breadcrumbs": "Docs / Getting Started / Backend: Error Monitoring / JS / Express.js",
			"content": "Learn how to set up highlight.io in Express.js.1Add `tracingOrigins` to your client Highlight snippet.This backend SDK requires one of the Highlight frontend SDKs to be installed, so please make sure you've followed the fullstack mapping guide first.H.init(\"<YOUR_PROJECT_ID>\", {\n  tracingOrigins: ['localhost', 'example.myapp.com/backend'],\n  networkRecording: {\n    enabled: true,\n    recordHeadersAndBody: true,\n  },\n});2Install the relevant Highlight SDK(s).Install @highlight-run/node with your package manager.# with npm\nnpm install --save @highlight-run/node# with yarn\nyarn add @highlight-run/node# with pnpm\npnpm add @highlight-run/node3Initialize the Highlight JS SDK.Initialize the Highlight JS SDK with your project ID.import { H } from '@highlight-run/node'\n\nH.init({projectID: '<YOUR_PROJECT_ID>'})4Add the Express.js Highlight integration.Use the Node Highlight SDK in your response handler.import { H, Handlers } from '@highlight-run/node'\n// or like this with commonjs\n// const { H, Highlight } = require('@highlight-run/node')\n\nconst app = express()\n\nconst highlightConfig = {\n\tprojectID: '<YOUR_PROJECT_ID>',\n\tserviceName: 'my-express-app',\n\tserviceVersion: 'git-sha'\n}\nH.init(highlightConfig)\n\n// This should be before any controllers (route definitions)\napp.use(Handlers.middleware(highlightConfig))\n\napp.get('/', (req, res) => {\n  res.send(`Hello World! 0.6218569436340504`)\n})\n\n// This should be before any other error middleware and after all controllers (route definitions)\napp.use(Handlers.errorHandler(highlightConfig))\n\napp.listen(8080, () => {\n  console.log(`Example app listening on port 8080`)\n})5Try/catch an error manually (without middleware).If you are using express.js async handlers, you will need your own try/catch block that directly calls the highlight SDK to report an error. This is because express.js async handlers do not invoke error middleware.app.get('/sync', (req: Request, res: Response) => {\n\t// do something dangerous...\n\tthrow new Error('oh no! this is a synchronous error');\n});\n\napp.get('/async', async (req: Request, res: Response) => {\n  try {\n    // do something dangerous...\n    throw new Error('oh no!');\n  } catch (error) {\n    const { secureSessionId, requestId } = H.parseHeaders(req.headers);\n    H.consumeError(\n      error as Error,\n      secureSessionId,\n      requestId\n    );\n  } finally {\n    res.status(200).json({hello: 'world'});\n  }\n});6Verify that your SDK is reporting errors.You'll want to throw an exception in one of your express.js handlers. Access the API handler and make sure the error shows up in Highlight.app.get('/', (req, res) => {\n  throw new Error('sample error!')\n  res.send(`Hello World! 0.02502460260352546`)\n})7Set up logging.With the JS SDKs, your logs are reported automatically from console methods. See the JS logging setup guide for more details."
		}
	},
	{
		"page": {
			"title": "Firebase",
			"breadcrumbs": "Docs / Getting Started / Backend: Error Monitoring / JS / Firebase",
			"content": "Learn how to set up highlight.io in Firebase Cloud Functions.1Add `tracingOrigins` to your client Highlight snippet.This backend SDK requires one of the Highlight frontend SDKs to be installed, so please make sure you've followed the fullstack mapping guide first.H.init(\"<YOUR_PROJECT_ID>\", {\n  tracingOrigins: ['localhost', 'example.myapp.com/backend'],\n  networkRecording: {\n    enabled: true,\n    recordHeadersAndBody: true,\n  },\n});2Install the relevant Highlight SDK(s).Install @highlight-run/node with your package manager.# with npm\nnpm install --save @highlight-run/node# with yarn\nyarn add @highlight-run/node# with pnpm\npnpm add @highlight-run/node3Initialize the Highlight JS SDK.Initialize the Highlight JS SDK with your project ID.import { H } from '@highlight-run/node'\n\nH.init({projectID: '<YOUR_PROJECT_ID>'})4Add the Firebase Highlight integration.Use the Node Highlight SDK in your response handler.const highlightNode = require('@highlight-run/node')\n\n// Callable function wrapper\nexports.exampleCallable = functions.https.onCall(\n  highlightNode.Handlers.firebaseCallableFunctionHandler(\n    (data, context) => {\n      // ... your handler code here\n      return { result: 'useful result!' }\n    },\n    { projectID: '<YOUR_PROJECT_ID>', serviceName: 'my-firebase-app', serviceVersion: 'git-sha' },\n  ),\n)\n\n// Http function wrapper\nexports.exampleHttp = functions.https.onRequest(\n  highlightNode.Handlers.firebaseHttpFunctionHandler(\n    (req, res) => {\n      // ... your handler code here\n      res.json({ result: 'useful result!' })\n    },\n    { projectID: '<YOUR_PROJECT_ID>' },\n  ),\n)5Verify that your SDK is reporting errors.You'll want to throw an exception in one of your Firebase handlers. Access the API handler and make sure the error shows up in Highlight.exports.exampleCallable = functions.https.onCall(\n  highlightNode.Handlers.firebaseCallableFunctionHandler(\n    (data, context) => {\n      throw new Error('example error!')\n      return { result: 'useful result!' }\n    },\n    { projectID: '<YOUR_PROJECT_ID>', serviceName: 'my-firebase-app', serviceVersion: 'git-sha' },\n  ),\n)6Set up logging.With the JS SDKs, your logs are reported automatically from console methods. See the JS logging setup guide for more details."
		}
	},
	{
		"page": {
			"title": "Nest.js",
			"breadcrumbs": "Docs / Getting Started / Backend: Error Monitoring / JS / Nest.js",
			"content": "Learn how to set up highlight.io in Nest.js.1Add `tracingOrigins` to your client Highlight snippet.This backend SDK requires one of the Highlight frontend SDKs to be installed, so please make sure you've followed the fullstack mapping guide first.H.init(\"<YOUR_PROJECT_ID>\", {\n  tracingOrigins: ['localhost', 'example.myapp.com/backend'],\n  networkRecording: {\n    enabled: true,\n    recordHeadersAndBody: true,\n  },\n});2Install the relevant Highlight SDK(s).Install @highlight-run/nest with your package manager.# with npm\nnpm install --save @highlight-run/nest# with yarn\nyarn add @highlight-run/nest# with pnpm\npnpm add @highlight-run/nest3Add the @highlight-run/nest app middleware.Use the HighlightErrorFilter middleware to capture backend errors.import { HttpAdapterHost, NestFactory } from '@nestjs/core'\nimport { AppModule } from './app.module'\nimport { HighlightInterceptor } from '@highlight-run/nest'\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule)\n  app.useGlobalInterceptors(\n    new HighlightInterceptor({\n      projectID: '<YOUR_PROJECT_ID>',\n      serviceName: 'my-nestjs-app',\n      serviceVersion: 'git-sha'\n    })\n  )\n  await app.listen(3000)\n}\nbootstrap()\n4Optionally, report manual errors in your app.If you need to report exceptions outside of a handler, use the Highlight SDK.const parsed = H.parseHeaders(request.headers)\nH.consumeError(error, parsed?.secureSessionId, parsed?.requestId)5Verify that your SDK is reporting errors.You'll want to throw an exception in one of your Nest.js handlers. Access the API handler and make sure the error shows up in Highlight.import { Injectable } from '@nestjs/common'\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    console.log('hello, world!')\n    console.warn('whoa there! ', Math.random())\n    if (Math.random() < 0.2) {\n      // error will be caught by the HighlightErrorFilter\n      throw new Error(`a random error occurred! 0.019310857195535824`)\n    }\n    return 'Hello World!'\n  }\n}\n6Set up logging.Start sending logs to Highlight! Follow the logging setup guide to get started."
		}
	},
	{
		"page": {
			"title": "Node.js",
			"breadcrumbs": "Docs / Getting Started / Backend: Error Monitoring / JS / Node.js",
			"content": "Learn how to set up highlight.io in Node.js.1Add `tracingOrigins` to your client Highlight snippet.This backend SDK requires one of the Highlight frontend SDKs to be installed, so please make sure you've followed the fullstack mapping guide first.H.init(\"<YOUR_PROJECT_ID>\", {\n  tracingOrigins: ['localhost', 'example.myapp.com/backend'],\n  networkRecording: {\n    enabled: true,\n    recordHeadersAndBody: true,\n  },\n});2Install the relevant Highlight SDK(s).Install @highlight-run/node with your package manager.# with npm\nnpm install --save @highlight-run/node# with yarn\nyarn add @highlight-run/node# with pnpm\npnpm add @highlight-run/node3Initialize the Highlight JS SDK.Initialize the Highlight JS SDK with your project ID.import { H } from '@highlight-run/node'\n\nH.init({projectID: '<YOUR_PROJECT_ID>'})4Optionally, report manual errors in your app.If you need to report exceptions outside of a handler, use the Highlight SDK.const parsed = H.parseHeaders(request.headers)\nH.consumeError(error, parsed?.secureSessionId, parsed?.requestId)5Verify that your SDK is reporting errors.You'll want to throw an exception in one of your Node.js handlers. Access the API handler and make sure the error shows up in Highlight.const onError = (request, error) => {\n  const parsed = H.parseHeaders(request.headers)\n  H.consumeError(error, parsed.secureSessionId, parsed.requestId)\n}\n\nconst main = () => {\n  try {\n    throw new Error('example error!')\n  } catch (e) {\n    onError(e)\n  }\n}\n\n6Set up logging.With the JS SDKs, your logs are reported automatically from console methods. See the JS logging setup guide for more details."
		}
	},
	{
		"page": {
			"title": "tRPC",
			"breadcrumbs": "Docs / Getting Started / Backend: Error Monitoring / JS / tRPC",
			"content": "Learn how to set up highlight.io in tRPC.1Add `tracingOrigins` to your client Highlight snippet.This backend SDK requires one of the Highlight frontend SDKs to be installed, so please make sure you've followed the fullstack mapping guide first.H.init(\"<YOUR_PROJECT_ID>\", {\n  tracingOrigins: ['localhost', 'example.myapp.com/backend'],\n  networkRecording: {\n    enabled: true,\n    recordHeadersAndBody: true,\n  },\n});2Install the relevant Highlight SDK(s).Install @highlight-run/node with your package manager.# with npm\nnpm install --save @highlight-run/node# with yarn\nyarn add @highlight-run/node# with pnpm\npnpm add @highlight-run/node3Initialize the Highlight JS SDK.Initialize the Highlight JS SDK with your project ID.import { H } from '@highlight-run/node'\n\nH.init({projectID: '<YOUR_PROJECT_ID>'})4Add the tRPC Highlight integration.Use the Node Highlight SDK in your response handler.import { createNextApiHandler } from '@trpc/server/adapters/next'\nimport { Handlers } from '@highlight-run/node'\n\nexport default createNextApiHandler({\n  // ... your config\n  onError: ({ error, req }) => {\n    // ... your own error handling logic here\n    Handlers.trpcOnError({ error, req }, { projectID: '<YOUR_PROJECT_ID>', serviceName: 'my-trpc-app', serviceVersion: 'git-sha' })\n  },\n})\n5Verify that your SDK is reporting errors.You'll want to throw an exception in one of your tRPC handlers. Access the API handler and make sure the error shows up in Highlight.6Set up logging.With the JS SDKs, your logs are reported automatically from console methods. See the JS logging setup guide for more details."
		}
	},
	{
		"page": {
			"title": "Error Monitoring in Python",
			"breadcrumbs": "Docs / Getting Started / Backend: Error Monitoring / Python / Error Monitoring in Python",
			"content": "If there's a framework that's missing, feel free to create an issue or message us on discord.\nAWS LambdaGet started in your AWS LambdaAzure FunctionsGet started in AzureDjangoGet started in DjangoFastAPIGet started in FastAPIFlaskGet started in FlaskGoogle Cloud FunctionsGet started in GCPOtherGet started without a framework"
		}
	},
	{
		"page": {
			"title": "Using highlight.io with Python on AWS Lambda",
			"breadcrumbs": "Docs / Getting Started / Backend: Error Monitoring / Python / AWS Lambda Python",
			"content": "Learn how to set up highlight.io on AWS Lambda.1Setup your frontend Highlight snippet with tracingOrigins.Make sure that you followed the fullstack mapping guide.H.init(\"<YOUR_PROJECT_ID>\", {\n  tracingOrigins: ['localhost', 'example.myapp.com/backend'],\n  networkRecording: {\n    enabled: true,\n    recordHeadersAndBody: true,\n  },\n});2Install the highlight-io python package.Download the package from pypi and save it to your requirements. If you use a zip or s3 file upload to publish your function, you will want to make sure highlight-io is part of the build.poetry add highlight-io# or with pip\npip install highlight-io3Initialize the Highlight SDK.Setup the SDK. Add the @observe_handler decorator to your lambdas.import highlight_io\nfrom highlight_io.integrations.aws import observe_handler\n\n# `instrument_logging=True` sets up logging instrumentation.\n# if you do not want to send logs or are using `loguru`, pass `instrument_logging=False`\nH = highlight_io.H(\n\t\"<YOUR_PROJECT_ID>\",\n\tinstrument_logging=True,\n\tservice_name=\"my-app\",\n\tservice_version=\"git-sha\",\n)\n\n\n@observe_handler\ndef lambda_handler(event, context):\n    return {\n        \"statusCode\": 200,\n        \"body\": f\"Hello, {name}. This HTTP triggered function executed successfully.\",\n    }\n4Verify your installation.Check that your installation is valid by throwing an error. Add an operation that raises an exception to your lambda handler. Setup an HTTP trigger and visit your lambda on the internet. You should see a DivideByZero error in the Highlight errors page within a few moments.import highlight_io\nfrom highlight_io.integrations.aws import observe_handler\n\n# `instrument_logging=True` sets up logging instrumentation.\n# if you do not want to send logs or are using `loguru`, pass `instrument_logging=False`\nH = highlight_io.H(\n\t\"<YOUR_PROJECT_ID>\",\n\tinstrument_logging=True,\n\tservice_name=\"my-app\",\n\tservice_version=\"git-sha\",\n)\n\n\n@observe_handler\ndef lambda_handler(event, context):\n    return {\n        \"body\": f\"Returning this is a bad idea: {5 / 0}.\",\n    }5Set up logging.With the Python SDK, your logs are reported automatically from builtin logging methods. See the Python logging setup guide for more details."
		}
	},
	{
		"page": {
			"title": "Using highlight.io with Python on Azure Functions",
			"breadcrumbs": "Docs / Getting Started / Backend: Error Monitoring / Python / Azure Functions",
			"content": "Learn how to set up highlight.io with Azure Functions.1Setup your frontend Highlight snippet with tracingOrigins.Make sure that you followed the fullstack mapping guide.H.init(\"<YOUR_PROJECT_ID>\", {\n  tracingOrigins: ['localhost', 'example.myapp.com/backend'],\n  networkRecording: {\n    enabled: true,\n    recordHeadersAndBody: true,\n  },\n});2Install the highlight-io python package.Download the package from pypi and save it to your requirements. If you use a zip or s3 file upload to publish your function, you will want to make sure highlight-io is part of the build.poetry add highlight-io# or with pip\npip install highlight-io3Initialize the Highlight SDK.Setup the SDK. Add the @observe_handler decorator to your azure functions.import azure.functions as func\n\nimport highlight_io\nfrom highlight_io.integrations.azure import observe_handler\n\n# `instrument_logging=True` sets up logging instrumentation.\n# if you do not want to send logs or are using `loguru`, pass `instrument_logging=False`\nH = highlight_io.H(\n\t\"<YOUR_PROJECT_ID>\",\n\tinstrument_logging=True,\n\tservice_name=\"my-app\",\n\tservice_version=\"git-sha\",\n)\n\n\n@observe_handler\ndef main(req: func.HttpRequest) -> func.HttpResponse:\n    return func.HttpResponse(\n        \"This HTTP triggered function executed successfully.\",\n        status_code=200,\n    )\n4Verify your installation.Check that your installation is valid by throwing an error. Add an operation that raises an exception to your azure function. Setup an HTTP trigger and visit your azure function on the internet. You should see a DivideByZero error in the Highlight errors page within a few moments.import azure.functions as func\n\nimport highlight_io\nfrom highlight_io.integrations.azure import observe_handler\n\n# `instrument_logging=True` sets up logging instrumentation.\n# if you do not want to send logs or are using `loguru`, pass `instrument_logging=False`\nH = highlight_io.H(\n\t\"<YOUR_PROJECT_ID>\",\n\tinstrument_logging=True,\n\tservice_name=\"my-app\",\n\tservice_version=\"git-sha\",\n)\n\n\n@observe_handler\ndef main(req: func.HttpRequest) -> func.HttpResponse:\n    return func.HttpResponse(\n        f\"Not a good idea: {5 / 0}.\",\n    )\n5Set up logging.With the Python SDK, your logs are reported automatically from builtin logging methods. See the Python logging setup guide for more details."
		}
	},
	{
		"page": {
			"title": "Using highlight.io with Python Django",
			"breadcrumbs": "Docs / Getting Started / Backend: Error Monitoring / Python / Django",
			"content": "Learn how to set up highlight.io on your Python Django backend API.1Setup your frontend Highlight snippet with tracingOrigins.Make sure that you followed the fullstack mapping guide.H.init(\"<YOUR_PROJECT_ID>\", {\n  tracingOrigins: ['localhost', 'example.myapp.com/backend'],\n  networkRecording: {\n    enabled: true,\n    recordHeadersAndBody: true,\n  },\n});2Install the highlight-io python package.Download the package from pypi and save it to your requirements. If you use a zip or s3 file upload to publish your function, you will want to make sure highlight-io is part of the build.poetry add highlight-io[Django]# or with pip\npip install highlight-io[Django]3Initialize the Highlight SDK.Add Highlight with the Django integration to your settings.py file.import highlight_io\nfrom highlight_io.integrations.django import DjangoIntegration\n\n# `instrument_logging=True` sets up logging instrumentation.\n# if you do not want to send logs or are using `loguru`, pass `instrument_logging=False`\nH = highlight_io.H(\n\t\"<YOUR_PROJECT_ID>\",\n\tintegrations=[DjangoIntegration()],\n\tinstrument_logging=True,\n\tservice_name=\"my-django-app\",\n\tservice_version=\"git-sha\",\n)4Verify your installation.Check that your installation is valid by throwing an error. Change one of your Django views to the following code which will throw an exception. Access the Django route in your browser. You should see a DivideByZero error in the Highlight errors page within a few moments.import logging\nimport random\n\nfrom django.http import HttpResponse, HttpRequest\n\n\ndef index(request: HttpRequest):\n    return HttpResponse(f\"This might not go well. result is {2 / 0}\")\n5Set up logging.With the Python SDK, your logs are reported automatically from builtin logging methods. See the Python logging setup guide for more details."
		}
	},
	{
		"page": {
			"title": "Using highlight.io with Python FastAPI",
			"breadcrumbs": "Docs / Getting Started / Backend: Error Monitoring / Python / FastAPI",
			"content": "Learn how to set up highlight.io on your Python FastAPI backend API.1Setup your frontend Highlight snippet with tracingOrigins.Make sure that you followed the fullstack mapping guide.H.init(\"<YOUR_PROJECT_ID>\", {\n  tracingOrigins: ['localhost', 'example.myapp.com/backend'],\n  networkRecording: {\n    enabled: true,\n    recordHeadersAndBody: true,\n  },\n});2Install the highlight-io python package.Download the package from pypi and save it to your requirements. If you use a zip or s3 file upload to publish your function, you will want to make sure highlight-io is part of the build.poetry add highlight-io[FastAPI]# or with pip\npip install highlight-io[FastAPI]3Initialize the Highlight SDK.Setup the SDK to with the FastAPI integration.from fastapi import FastAPI, Request\n\nimport highlight_io\nfrom highlight_io.integrations.fastapi import FastAPIMiddleware\n\n# `instrument_logging=True` sets up logging instrumentation.\n# if you do not want to send logs or are using `loguru`, pass `instrument_logging=False`\nH = highlight_io.H(\n\t\"<YOUR_PROJECT_ID>\",\n\tinstrument_logging=True,\n\tservice_name=\"my-app\",\n\tservice_version=\"git-sha\",\n)\n\napp = FastAPI()\napp.add_middleware(FastAPIMiddleware)4Verify your installation.Check that your installation is valid by throwing an error. Add the following code to your FastAPI app and start the FastAPI server. Visit http://127.0.0.1:5000/hello in your browser. You should see a DivideByZero error in the Highlight errors page within a few moments.from fastapi import FastAPI, Request\n\nimport highlight_io\nfrom highlight_io.integrations.fastapi import FastAPIMiddleware\n\n# `instrument_logging=True` sets up logging instrumentation.\n# if you do not want to send logs or are using `loguru`, pass `instrument_logging=False`\nH = highlight_io.H(\n\t\"<YOUR_PROJECT_ID>\",\n\tinstrument_logging=True,\n\tservice_name=\"my-app\",\n\tservice_version=\"git-sha\",\n)\n\napp = FastAPI()\napp.add_middleware(FastAPIMiddleware)\n\n\n@app.get(\"/\")\nasync def root(request: Request):\n    return {\"message\": f\"This might not be a great idea {5 / 0}\"}\n5Set up logging.With the Python SDK, your logs are reported automatically from builtin logging methods. See the Python logging setup guide for more details."
		}
	},
	{
		"page": {
			"title": "Using highlight.io with Python Flask",
			"breadcrumbs": "Docs / Getting Started / Backend: Error Monitoring / Python / Flask",
			"content": "Learn how to set up highlight.io on your Python Flask backend API.1Setup your frontend Highlight snippet with tracingOrigins.Make sure that you followed the fullstack mapping guide.H.init(\"<YOUR_PROJECT_ID>\", {\n  tracingOrigins: ['localhost', 'example.myapp.com/backend'],\n  networkRecording: {\n    enabled: true,\n    recordHeadersAndBody: true,\n  },\n});2Install the highlight-io python package.Download the package from pypi and save it to your requirements. If you use a zip or s3 file upload to publish your function, you will want to make sure highlight-io is part of the build.poetry add highlight-io[Flask]# or with pip\npip install highlight-io[Flask]3Initialize the Highlight SDK.Setup the SDK to with the Flask integration.from flask import Flask\n\nimport highlight_io\nfrom highlight_io.integrations.flask import FlaskIntegration\n\napp = Flask(__name__)\n\n# `instrument_logging=True` sets up logging instrumentation.\n# if you do not want to send logs or are using `loguru`, pass `instrument_logging=False`\nH = highlight_io.H(\n\t\"<YOUR_PROJECT_ID>\",\n\tintegrations=[FlaskIntegration()],\n\tinstrument_logging=True,\n\tservice_name=\"my-flask-app\",\n\tservice_version=\"git-sha\",\n)4Instrument manual error handlers.If you have existing error handlers, you need to instrument them manually to capture errors.# you may have a custom error handler that formats an error response\n# make sure to report the error to highlight to capture it\n@app.errorhandler(Exception)\ndef handle_general_exception(exc: Exception):\n\thighlight_io.H.get_instance().record_exception(exc)\n\treturn jsonify(error=\"internal error\", message=str(exc), trace=traceback.format_exc()), 5035Verify your installation.Check that your installation is valid by throwing an error. Add the following code to your Flask app and start the Flask server. Visit http://127.0.0.1:5000/hello in your browser. You should see a DivideByZero error in the Highlight errors page within a few moments.import logging\nimport random\nimport time\n\nfrom flask import Flask\n\nimport highlight_io\nfrom highlight_io.integrations.flask import FlaskIntegration\n\napp = Flask(__name__)\n\n# `instrument_logging=True` sets up logging instrumentation.\n# if you do not want to send logs or are using `loguru`, pass `instrument_logging=False`\nH = highlight_io.H(\n\t\"<YOUR_PROJECT_ID>\",\n\tintegrations=[FlaskIntegration()],\n\tinstrument_logging=True,\n\tservice_name=\"my-flask-app\",\n\tservice_version=\"git-sha\",\n)\n\n\n@app.route(\"/hello\")\ndef hello():\n    return f\"<h1>bad idea { 5/0 }</h1>\"\n\n\nif __name__ == \"__main__\":\n    app.run()6Set up logging.With the Python SDK, your logs are reported automatically from builtin logging methods. See the Python logging setup guide for more details."
		}
	},
	{
		"page": {
			"title": "Using highlight.io with Python on Google Cloud Functions",
			"breadcrumbs": "Docs / Getting Started / Backend: Error Monitoring / Python / Google Cloud Functions Functions",
			"content": "Learn how to set up highlight.io on Google Cloud Functions.1Setup your frontend Highlight snippet with tracingOrigins.Make sure that you followed the fullstack mapping guide.H.init(\"<YOUR_PROJECT_ID>\", {\n  tracingOrigins: ['localhost', 'example.myapp.com/backend'],\n  networkRecording: {\n    enabled: true,\n    recordHeadersAndBody: true,\n  },\n});2Install the highlight-io python package.Download the package from pypi and save it to your requirements. If you use a zip or s3 file upload to publish your function, you will want to make sure highlight-io is part of the build.poetry add highlight-io# or with pip\npip install highlight-io3Initialize the Highlight SDK.Setup the SDK. Add the @observe_handler decorator to your functions.import logging\nimport random\nfrom datetime import datetime\n\nimport functions_framework\n\nimport highlight_io\nfrom highlight_io.integrations.gcp import observe_handler\n\n# `instrument_logging=True` sets up logging instrumentation.\n# if you do not want to send logs or are using `loguru`, pass `instrument_logging=False`\nH = highlight_io.H(\n\t\"<YOUR_PROJECT_ID>\",\n\tinstrument_logging=True,\n\tservice_name=\"my-app\",\n\tservice_version=\"git-sha\",\n)\n\n\n@observe_handler\n@functions_framework.http\ndef hello_http(request):\n    return \"Hello {}!\".format(name)\n4Verify your installation.Check that your installation is valid by throwing an error. Add an operation that raises an exception to your function. Setup an HTTP trigger and visit your function on the internet. You should see a DivideByZero error in the Highlight errors page within a few moments.import logging\nimport random\nfrom datetime import datetime\n\nimport functions_framework\n\nimport highlight_io\nfrom highlight_io.integrations.gcp import observe_handler\n\n# `instrument_logging=True` sets up logging instrumentation.\n# if you do not want to send logs or are using `loguru`, pass `instrument_logging=False`\nH = highlight_io.H(\n\t\"<YOUR_PROJECT_ID>\",\n\tinstrument_logging=True,\n\tservice_name=\"my-app\",\n\tservice_version=\"git-sha\",\n)\n\n\n@observe_handler\n@functions_framework.http\ndef hello_http(request):\n    return f\"This might be a bad idea: {5/0}\"\n5Set up logging.With the Python SDK, your logs are reported automatically from builtin logging methods. See the Python logging setup guide for more details."
		}
	},
	{
		"page": {
			"title": "Using highlight.io with Other Python Frameworks",
			"breadcrumbs": "Docs / Getting Started / Backend: Error Monitoring / Python / Python App",
			"content": "Learn how to set up highlight.io in your Python app.1Setup your frontend Highlight snippet with tracingOrigins.Make sure that you followed the fullstack mapping guide.H.init(\"<YOUR_PROJECT_ID>\", {\n  tracingOrigins: ['localhost', 'example.myapp.com/backend'],\n  networkRecording: {\n    enabled: true,\n    recordHeadersAndBody: true,\n  },\n});2Install the highlight-io python package.Download the package from pypi and save it to your requirements. If you use a zip or s3 file upload to publish your function, you will want to make sure highlight-io is part of the build.poetry add highlight-io# or with pip\npip install highlight-io3Initialize the Highlight SDK.Setup the SDK.import highlight_io\n\n# `instrument_logging=True` sets up logging instrumentation.\n# if you do not want to send logs or are using `loguru`, pass `instrument_logging=False`\nH = highlight_io.H(\n\t\"<YOUR_PROJECT_ID>\",\n\tinstrument_logging=True,\n\tservice_name=\"my-app\",\n\tservice_version=\"git-sha\",\n)4Verify your installation.Check that your installation is valid by throwing an error. Try raising an exception somewhere in your code. You should see a DivideByZero error in the Highlight errors page within a few moments.import logging\nimport random\nimport time\n\nimport highlight_io\n\n# `instrument_logging=True` sets up logging instrumentation.\n# if you do not want to send logs or are using `loguru`, pass `instrument_logging=False`\nH = highlight_io.H(\n\t\"<YOUR_PROJECT_ID>\",\n\tinstrument_logging=True,\n\tservice_name=\"my-app\",\n\tservice_version=\"git-sha\",\n)\n\n\ndef main():\n    with H.trace():\n        logging.info('hello, world!', {'favorite_number': 7})\n        return f\"<h1>bad idea { 5/0 }</h1>\"\n\n\nif __name__ == \"__main__\":\n    main()5Set up logging.With the Python SDK, your logs are reported automatically from builtin logging methods. See the Python logging setup guide for more details."
		}
	},
	{
		"page": {
			"title": "Error Monitoring in Ruby",
			"breadcrumbs": "Docs / Getting Started / Backend: Error Monitoring / Ruby / Error Monitoring in Ruby",
			"content": "If there's a framework that's missing, feel free to create an issue or message us on discord.\nRailsGet started in RailsOtherGet started without a framework"
		}
	},
	{
		"page": {
			"title": "Using highlight.io with Other Ruby Frameworks",
			"breadcrumbs": "Docs / Getting Started / Backend: Error Monitoring / Ruby / Ruby App",
			"content": "Learn how to set up highlight.io on your non-Rails Ruby backend.1Add `tracingOrigins` to your client Highlight snippet.This backend SDK requires one of the Highlight frontend SDKs to be installed, so please make sure you've followed the fullstack mapping guide first.H.init(\"<YOUR_PROJECT_ID>\", {\n  tracingOrigins: ['localhost', 'example.myapp.com/backend'],\n  networkRecording: {\n    enabled: true,\n    recordHeadersAndBody: true,\n  },\n});2Install the Highlight Ruby SDK.Add Highlight to your Gemfile and install with Bundler.gem \"highlight_io\"\n\nbundle install3Initialize the Highlight Ruby SDK.Highlight::H.new initializes the SDK and allows you to call the singleton Highlight::H.instance. Setting your project id also lets Highlight record errors for background tasks and processes that aren't associated with a frontend session.require \"highlight\"\n\nHighlight::H.new(\"<YOUR_PROJECT_ID>\") do |c|\n  c.service_name = \"my-app\"\n  c.service_version = \"1.0.0\"\nend4Add Highlight tracing.trace will automatically record raised exceptions and send them to Highlight.require \"highlight\"\n\nHighlight::H.instance.trace(nil, nil) do\n  # your code here\nend5Verify your errors are being recorded.Now that you've set up the Middleware, verify that the backend error handling works by consuming an error from traced code.6Record custom errors. (optional)If you want to explicitly send an error to Highlight, you can use the record_exception method within traced code.Highlight::H.instance.record_exception(e)7Set up logging.Start sending logs to Highlight! Follow the logging setup guide to get started."
		}
	},
	{
		"page": {
			"title": "Using highlight.io with Ruby on Rails",
			"breadcrumbs": "Docs / Getting Started / Backend: Error Monitoring / Ruby / Rails",
			"content": "Learn how to set up highlight.io on your Rails backend.1Add `tracingOrigins` to your client Highlight snippet.This backend SDK requires one of the Highlight frontend SDKs to be installed, so please make sure you've followed the fullstack mapping guide first.H.init(\"<YOUR_PROJECT_ID>\", {\n  tracingOrigins: ['localhost', 'example.myapp.com/backend'],\n  networkRecording: {\n    enabled: true,\n    recordHeadersAndBody: true,\n  },\n});2Install the Highlight Ruby SDK.Add Highlight to your Gemfile and install with Bundler.gem \"highlight_io\"\n\nbundle install3Initialize the Highlight Ruby SDK.Highlight::H.new initializes the SDK and allows you to call the singleton Highlight::H.instance. Setting your project id also lets Highlight record errors for background tasks and processes that aren't associated with a frontend session.require \"highlight\"\n\nHighlight::H.new(\"<YOUR_PROJECT_ID>\") do |c|\n  c.service_name = \"my-app\"\n  c.service_version = \"1.0.0\"\nend4Add the Highlight middleware.with_highlight_context can be used as a Rails around_action to wrap any controller actions to automatically record errors.require \"highlight\"\n\nclass ApplicationController < ActionController::Base\n  include Highlight::Integrations::Rails\n\n  around_action :with_highlight_context\nend5Verify your errors are being recorded.Now that you've set up the Middleware, you can verify that the backend error handling works by throwing an error in a controller. Visit the highlight errors page and check that backend errors are coming in.class ArticlesController < ApplicationController\n  def index\n    1/0\n  end\nend6Record custom errors. (optional)If you want to explicitly send an error to Highlight, you can use the record_exception method within traced code.Highlight::H.instance.record_exception(e)7Set up logging.Start sending logs to Highlight! Follow the logging setup guide to get started."
		}
	},
	{
		"page": {
			"title": "Overview",
			"breadcrumbs": "Docs / Getting Started / Backend: Logging / Go / Overview",
			"content": "Highlight.io supports logging in Go, which maps your logs to corresponding errors and sessions. This gives you and your team a full picture of your application's state. Supported frameworks below:\nIf you don't see one of your languages / frameworks below, reach out to us in our community or create an issue on github.\nGo: FiberIntegrate logging in Go / Fiber.Go: LogrusIntegrate logging in Go / Logrus.Go: OtherIntegrate logging in any other Go-based app."
		}
	},
	{
		"page": {
			"title": "Logging in Go / Fiber",
			"breadcrumbs": "Docs / Getting Started / Backend: Logging / Go / fiber",
			"content": "Learn how to set up highlight.io Go log ingestion with fiber.1Set up your frontend highlight.io integration.First, make sure you've followed the frontend getting started guide.2Call logrus methods while passing the request context.The request context allows highlight to associate logs with the incoming frontend session and network request.logrus.WithContext(c.Context()).WithField(\"user\", \"bob\").Infof(\"hello, %s!\", \"world\")3Call the Highlight logging SDK.Use our SDK to configure logrus, and use it as normal.package main\n\nimport (\n  \"context\"\n  \"github.com/highlight/highlight/sdk/highlight-go\"\n  \"github.com/highlight/highlight/sdk/highlight-go/log\"\n  \"github.com/sirupsen/logrus\"\n)\n\nfunc main() {\n  // setup the highlight SDK\n  highlight.SetProjectID(\"<YOUR_PROJECT_ID>\")\n  highlight.Start(\n    highlight.WithServiceName(\"my-fiber-app\"),\n    highlight.WithServiceVersion(\"git-sha\"),\n  )\n  defer highlight.Stop()\n\n  // setup highlight logrus hook\n  hlog.Init()\n  // if you don't want to get stdout / stderr output, add the following uncommented\n  // hlog.DisableOutput()\n\n  app := fiber.New()\n  app.Use(logger.New())\n  // setup go fiber to use the highlight middleware for header parsing\n  app.Use(highlightFiber.Middleware())\n\n  app.Get(\"/\", func(c *fiber.Ctx) error {\n  \t// in handlers, use logrus with the UserContext to associate logs with the frontend session.\n\tlogrus.WithContext(c.Context()).Infof(\"hello from highlight.io\")\n\treturn c.SendString(\"Hello, World!\")\n  })\n\n  logrus.Fatal(app.Listen(\":3456\"))\n}4Verify your backend logs are being recorded.Visit the highlight logs portal and check that backend logs are coming in."
		}
	},
	{
		"page": {
			"title": "Logging in Go / Logrus",
			"breadcrumbs": "Docs / Getting Started / Backend: Logging / Go / logrus",
			"content": "Learn how to set up highlight.io Go log ingestion with logrus.1Set up your frontend highlight.io integration.First, make sure you've followed the frontend getting started guide.2Call logrus methods while passing the request context.The request context allows highlight to associate logs with the incoming frontend session and network request.logrus.WithContext(ctx).WithField(\"user\", \"bob\").Infof(\"hello, %s!\", \"world\")3Call the Highlight logging SDK.Use our SDK to configure logrus, and use it as normal.package main\n\nimport (\n  \"context\"\n  \"github.com/highlight/highlight/sdk/highlight-go\"\n  \"github.com/highlight/highlight/sdk/highlight-go/log\"\n  \"github.com/sirupsen/logrus\"\n)\n\nfunc main() {\n  // setup the highlight SDK\n  highlight.SetProjectID(\"<YOUR_PROJECT_ID>\")\n  highlight.Start(\n    highlight.WithServiceName(\"my-app\"),\n    highlight.WithServiceVersion(\"git-sha\"),\n  )\n  defer highlight.Stop()\n\n  // setup highlight logrus hook\n  hlog.Init()\n  // if you don't want to get stdout / stderr output, add the following uncommented\n  // hlog.DisableOutput()\n\n  // if in a request, provide context to associate logs with frontend sessions\n  ctx := context.TODO()\n  // send logs\n  logrus.WithContext(ctx).WithField(\"hello\", \"world\").Info(\"welcome to highlight.io\")\n  // send logs with a string message severity\n  lvl, _ := logrus.ParseLevel(\"warn\")\n  logrus.WithContext(ctx).Log(lvl, \"whoa there\")\n}4Verify your backend logs are being recorded.Visit the highlight logs portal and check that backend logs are coming in."
		}
	},
	{
		"page": {
			"title": "Logging in Go / Other Frameworks",
			"breadcrumbs": "Docs / Getting Started / Backend: Logging / Go / other",
			"content": "Learn how to set up highlight.io Go log ingestion with logrus.1Set up your frontend highlight.io integration.First, make sure you've followed the frontend getting started guide.2Call logrus methods while passing the request context.The request context allows highlight to associate logs with the incoming frontend session and network request.logrus.WithContext(ctx).WithField(\"user\", \"bob\").Infof(\"hello, %s!\", \"world\")3Call the Highlight logging SDK.Use our SDK to configure logrus, and use it as normal.package main\n\nimport (\n  \"context\"\n  \"github.com/highlight/highlight/sdk/highlight-go\"\n  \"github.com/highlight/highlight/sdk/highlight-go/log\"\n  \"github.com/sirupsen/logrus\"\n)\n\nfunc main() {\n  // setup the highlight SDK\n  highlight.SetProjectID(\"<YOUR_PROJECT_ID>\")\n  highlight.Start(\n    highlight.WithServiceName(\"my-app\"),\n    highlight.WithServiceVersion(\"git-sha\"),\n  )\n  defer highlight.Stop()\n\n  // setup highlight logrus hook\n  hlog.Init()\n  // if you don't want to get stdout / stderr output, add the following uncommented\n  // hlog.DisableOutput()\n\n  // if in a request, provide context to associate logs with frontend sessions\n  ctx := context.TODO()\n  // send logs\n  logrus.WithContext(ctx).WithField(\"hello\", \"world\").Info(\"welcome to highlight.io\")\n  // send logs with a string message severity\n  lvl, _ := logrus.ParseLevel(\"warn\")\n  logrus.WithContext(ctx).Log(lvl, \"whoa there\")\n}4Verify your backend logs are being recorded.Visit the highlight logs portal and check that backend logs are coming in."
		}
	},
	{
		"page": {
			"title": "Overview",
			"breadcrumbs": "Docs / Getting Started / Backend: Logging / JS / Overview",
			"content": "Highlight.io supports logging in typescript & javascript, which maps your logs to corresponding errors and sessions. This gives you and your team a full picture of your application's state. Supported frameworks below:\nIf you don't see one of your languages / frameworks below, reach out to us in our community or create an issue on github.\nNestJSIntegrate logging in NestJS.NodeJSIntegrate logging in NodeJS.WinstonIntegrate logging in Winston.js.PinoIntegrate logging in Pino.js.CloudflareIntegrate logging in Cloudflare Workers."
		}
	},
	{
		"page": {
			"title": "Logging in Cloudflare Workers",
			"breadcrumbs": "Docs / Getting Started / Backend: Logging / JS / Cloudflare Workers",
			"content": "Learn how to set up highlight.io log ingestion in Cloudflare Workers.1Set up your frontend highlight.io integration.First, make sure you've followed the frontend getting started guide.2Add the Cloudflare Worker Highlight integration.All you need to start recording your console methods is call H.init. All Highlight data submission uses waitUntil to make sure that we have no impact on request handling performance.import { H } from '@highlight-run/cloudflare'\n\nexport default {\n  async fetch(request: Request, env: {}, ctx: ExecutionContext) {\n    H.init(request, { HIGHLIGHT_PROJECT_ID: '<YOUR_PROJECT_ID>' }, ctx)\n    console.log('starting some work...')\n    // ...\n  },\n}3Having TypeScript issues?Using our library requires setting skipLibCheck because of one of our dependencies that references node types. At runtime, this does not cause issues because of dynamic imports and other polyfilling done to ensure the sdk works in the cloud flare worker runtime, but the types are still referenced.{\n  /* ... your other options ... */\n  \"compilerOptions\": {\n    /* required due to our sdk's usage of 'opentelemetry-sdk-workers'\n       which works around node syntax in its dependencies by dynamically replacing\n       the imported javascript bundle, but does not replace the '@types/node' dependency */\n    \"skipLibCheck\": true,\n    \"types\": [\"@cloudflare/workers-types\"]\n  },\n}\n4Verify your backend logs are being recorded.Visit the highlight logs portal and check that backend logs are coming in."
		}
	},
	{
		"page": {
			"title": "Logging in Nest.js",
			"breadcrumbs": "Docs / Getting Started / Backend: Logging / JS / Nest.js",
			"content": "Learn how to set up highlight.io log ingestion in Nest.js.1Set up your frontend highlight.io integration.First, make sure you've followed the frontend getting started guide.2Add the @highlight-run/nest app middleware.Use the HighlightLogger middleware to record backend logs in highlight.ioimport { HttpAdapterHost, NestFactory } from '@nestjs/core'\nimport { AppModule } from './app.module'\nimport { HighlightLogger } from '@highlight-run/nest'\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule)\n  app.useLogger(\n    new HighlightLogger({\n      projectID: '<YOUR_PROJECT_ID>',\n      serviceName: 'my-nestjs-app',\n      serviceVersion: 'git-sha'\n    })\n  )\n  await app.listen(3000)\n}\nbootstrap()\n3Verify your backend logs are being recorded.Visit the highlight logs portal and check that backend logs are coming in."
		}
	},
	{
		"page": {
			"title": "Logging in Node.js",
			"breadcrumbs": "Docs / Getting Started / Backend: Logging / JS / Node.js",
			"content": "Learn how to set up highlight.io JS log ingestion without a logging library.1Set up your frontend highlight.io integration.First, make sure you've followed the frontend getting started guide.2Install the relevant Highlight SDK(s).Install @highlight-run/node with your package manager.# with npm\nnpm install --save @highlight-run/node# with yarn\nyarn add @highlight-run/node# with pnpm\npnpm add @highlight-run/node3Initialize the Highlight JS SDK.Initialize the Highlight JS SDK with your project ID.import { H } from '@highlight-run/node'\n\nH.init({projectID: '<YOUR_PROJECT_ID>'})4Call built-in console methods.Logs are automatically recorded by the highlight SDK. Arguments passed as a dictionary as the second parameter will be interpreted as structured key-value pairs that logs can be easily searched by.module.exports = function() {\n    console.log('hey there!');\n    console.warn('whoa there', {'key': 'value'});\n}5Verify your backend logs are being recorded.Visit the highlight logs portal and check that backend logs are coming in."
		}
	},
	{
		"page": {
			"title": "Logging in Pino.js",
			"breadcrumbs": "Docs / Getting Started / Backend: Logging / JS / Pino",
			"content": "Learn how to set up highlight.io log ingestion for Pino.JS.1Set up your frontend highlight.io integration.First, make sure you've followed the frontend getting started guide.2Install the relevant Highlight SDK(s).Install @highlight-run/pino with your package manager.# with npm\nnpm install --save @highlight-run/pino# with yarn\nyarn add @highlight-run/pino# with pnpm\npnpm add @highlight-run/pino3Setup the Pino HTTP transport.The Pino HTTP transport will send JSON logs to highlight.io. Make sure to set the project and service query string parameters.import pino from 'pino'\n\nconst logger = pino({\n    level: 'info',\n    transport: {\n        targets: [\n            {\n                target: '@highlight-run/pino',\n                options: {\n                    projectID: '<YOUR_PROJECT_ID>',\n                },\n                level: 'info',\n            },\n        ],\n    },\n})\n\nlogger.info({ key: 'my-value' }, 'hello, highlight.io!')4Verify your backend logs are being recorded.Visit the highlight logs portal and check that backend logs are coming in."
		}
	},
	{
		"page": {
			"title": "Logging in Winston",
			"breadcrumbs": "Docs / Getting Started / Backend: Logging / JS / Winston",
			"content": "Learn how to set up highlight.io log ingestion for Winston JS.1Set up your frontend highlight.io integration.First, make sure you've followed the frontend getting started guide.2Setup the Winston HTTP transport.The Winston HTTP transport will send JSON logs to highlight.ioimport {createLogger, format, transports} from 'winston';\n\n\nconst highlightTransport = new transports.Http({\n    host: 'pub.highlight.run',\n    path: \"/v1/logs/json\",\n    ssl: true,\n    headers: {\n        'x-highlight-project': '<YOUR_PROJECT_ID>',\n        'x-highlight-service': 'EXAMPLE_NODEJS_SERVICE',\n    },\n})\n\nexport const logger = createLogger({\n    level: 'info',\n    format: format.combine(\n        format.json(),\n        format.errors({ stack: true }),\n        format.timestamp(),\n        format.prettyPrint(),\n    ),\n    transports: [new transports.Console(), highlightTransport],\n})3Verify your backend logs are being recorded.Visit the highlight logs portal and check that backend logs are coming in."
		}
	},
	{
		"page": {
			"title": "Overview",
			"breadcrumbs": "Docs / Getting Started / Backend: Logging / Python / Overview",
			"content": "Highlight.io supports logging in python, which maps your logs to corresponding errors & sessions. This gives you and your team a full picture of your application's state. Supported frameworks below:\nIf you don't see one of your languages / frameworks below, reach out to us in our community or create an issue on github.\nLoguruIntegrate with Loguru.loggingIntegrate with Python native logging."
		}
	},
	{
		"page": {
			"title": "Logging in Python with Loguru",
			"breadcrumbs": "Docs / Getting Started / Backend: Logging / Python / Loguru",
			"content": "Learn how to set up highlight.io with logs from Python Loguru.1Set up your frontend highlight.io integration.First, make sure you've followed the frontend getting started guide.2Install the highlight-io python package.Download the package from pypi and save it to your requirements. If you use a zip or s3 file upload to publish your function, you will want to make sure highlight-io is part of the build.poetry add highlight-io# or with pip\npip install highlight-io3Initialize the Highlight SDK.Setup the SDK with instrument_logging disabled, while passing the highlight logging handler to loguru. instrument_logging=False must be passed to make sure the loguru handler does not collide with built-in logging instrumentation.import highlight_io\n\nH = highlight_io.H(\"<YOUR_PROJECT_ID>\", instrument_logging=False)4Use loguru!Logs are reported automatically from loguru logging methods. Visit the highlight logs portal and check that backend logs are coming in.import highlight_io\nfrom loguru import logger\n\nH = highlight_io.H(\n\t\"<YOUR_PROJECT_ID>\",\n\tinstrument_logging=False,\n\tservice_name=\"my-app\",\n\tservice_version=\"git-sha\",\n)\n\nlogger.add(\n\tH.logging_handler,\n\tformat=\"{message}\",\n\tlevel=\"INFO\",\n\tbacktrace=True,\n\tserialize=True,\n)\n\ndef main():\n    logger.debug(\"That's it, beautiful and simple logging!\", nice=\"one\")\n    context_logger = logger.bind(ip=\"192.168.0.1\", user=\"someone\")\n\tcontext_logger.info(\"Contextualize your logger easily\")\n5Verify your backend logs are being recorded.Visit the highlight logs portal and check that backend logs are coming in."
		}
	},
	{
		"page": {
			"title": "Logging in Python",
			"breadcrumbs": "Docs / Getting Started / Backend: Logging / Python / Python",
			"content": "Learn how to set up highlight.io Python log ingestion without a logging library.1Set up your frontend highlight.io integration.First, make sure you've followed the frontend getting started guide.2Install the highlight-io python package.Download the package from pypi and save it to your requirements. If you use a zip or s3 file upload to publish your function, you will want to make sure highlight-io is part of the build.poetry add highlight-io# or with pip\npip install highlight-io3Initialize the Highlight SDK.Setup the SDK with instrument_logging enabled.import highlight_io\n\nH = highlight_io.H(\"<YOUR_PROJECT_ID>\", instrument_logging=True)4Call the built-in Python logging library.Logs are reported automatically from the builtin logging methods (as long as instrument_logging=True is provided to the highlight_io.H constructor). Visit the highlight logs portal and check that backend logs are coming in. Arguments passed as a dictionary as the second parameter will be interpreted as structured key-value pairs that logs can be easily searched by.import logging\n\ndef main():\n    logging.info('hello, world!')\n    logging.warn('whoa there', {'key': 'value'})\n5Verify your backend logs are being recorded.Visit the highlight logs portal and check that backend logs are coming in."
		}
	},
	{
		"page": {
			"title": "Overview",
			"breadcrumbs": "Docs / Getting Started / Backend: Logging / Ruby / Overview",
			"content": "Highlight.io supports logging in ruby, which maps your logs to corresponding errors and sessions. This gives you and your team a full picture of your application's state. Supported frameworks below:\nIf you don't see one of your languages / frameworks below, reach out to us in our community or create an issue on github.\nRailsIntegrate logging in Rails.Other Ruby FrameworksIntegrate logging in other Ruby Frameworks."
		}
	},
	{
		"page": {
			"title": "Ruby App",
			"breadcrumbs": "Docs / Getting Started / Backend: Logging / Ruby / Ruby App",
			"content": "Learn how to set up highlight.io Ruby log ingestion.1Set up your frontend highlight.io integration.First, make sure you've followed the frontend getting started guide.2Set up and call the Highlight Logger.Highlight::Logger can be used in place of your existing logger, and will record and send logs to Highlight.require \"highlight\"\n\nHighlight::H.new(\"<YOUR_PROJECT_ID>\") do |c|\n  c.service_name = \"my-ruby-app\"\n  c.service_version = \"git-sha\"\nend\n\nlogger = Highlight::Logger.new(STDOUT)\nlogger.info('hello, world!')\nlogger.error('oh no!')3Verify your backend logs are being recorded.Visit the highlight logs portal and check that backend logs are coming in."
		}
	},
	{
		"page": {
			"title": "Rails",
			"breadcrumbs": "Docs / Getting Started / Backend: Logging / Ruby / Rails",
			"content": "Learn how to set up highlight.io Rails log ingestion.1Set up your frontend highlight.io integration.First, make sure you've followed the frontend getting started guide.2Set up the Highlight Logger.In a Rails initializer, you can replace or extend your logger with the Highlight Logger.require \"highlight\"\n\nHighlight::H.new(\"<YOUR_PROJECT_ID>\") do |c|\n  c.service_name = \"my-rails-app\"\n  c.service_version = \"git-sha\"\nend\n\n# you can replace the Rails.logger with Highlight's\nRails.logger = Highlight::Logger.new(STDOUT)\n\n# or alternatively extend it to log with both\nhighlightLogger = Highlight::Logger.new(nil)\nRails.logger.extend(ActiveSupport::Logger.broadcast(highlightLogger))3Verify your backend logs are being recorded.Visit the highlight logs portal and check that backend logs are coming in."
		}
	},
	{
		"page": {
			"title": "Overview",
			"breadcrumbs": "Docs / Getting Started / Backend: Logging / Java / Overview",
			"content": "Highlight.io supports logging in java, which maps your logs to corresponding errors and sessions. This gives you and your team a full picture of your application's state. Supported frameworks below:\nIf you don't see one of your languages / frameworks below, reach out to us in our community or create an issue on github.\nOther Java FrameworksIntegrate logging in other Java Frameworks."
		}
	},
	{
		"page": {
			"title": "Java App",
			"breadcrumbs": "Docs / Getting Started / Backend: Logging / Java / Java App",
			"content": "Learn how to set up highlight.io Java log ingestion.1Set up your frontend highlight.io integration.First, make sure you've followed the frontend getting started guide.2Install the Highlight Java SDK.Add Highlight to your maven pom file.<dependency>\n\t<groupId>io.highlight</groupId>\n\t<artifactId>highlight-sdk</artifactId>\n\t<version>latest</version>\n</dependency>3Initialize the Highlight Java SDK.Highlight.init() initializes the Highlight backend SDK.HighlightOptions options = HighlightOptions.builder(\"<YOUR_PROJECT_ID>\")\n\t\t\t.version(\"1.0.0\")\n\t\t\t.environment(\"development\")\n\t\t\t.build();\n\t\t\t\n\t\t\tHighlight.init(options);4Set up and call the Highlight Logger.Highlight.captureLog() will record and send logs to Highlight.Highlight.captureLog(Severity.INFO, \"Just another message\");5Set up and call the Highlight custom records.Highlight.captureRecord() will send custom defined logs to Highlight.Highlight.captureRecord(HighlightRecord.log()\n  .severity(Severity.warn(\"Internal\", Priority.HIGH))\n  .message(\"Just another message\")\n  .requestId(\"REQUEST_ID\")\n  .attributes(attributes -> attributes.put(\"application.user.name\", \"NgLoader\"))\n  .build());6Verify your backend logs are being recorded.Visit the highlight logs portal and check that backend logs are coming in."
		}
	},
	{
		"page": {
			"title": "Overview",
			"breadcrumbs": "Docs / Getting Started / Backend: Logging / Hosting Providers / Overview",
			"content": "Highlight.io supports logging in most cloud providers. For common hosting solutions, we've written guides or integrations that simplify the setup.\nIf you don't see one of your languages / frameworks below, reach out to us in our community or create an issue on github.\nAmazon Web ServicesSet up logging in AWS.Microsoft AzureSet up logging in Azure.Google CloudSet up logging in GCP.Fly.ioSet up logging in Fly.RenderSet up logging in Render.Trigger.devSet up logging in Trigger.VercelSet up logging in Vercel."
		}
	},
	{
		"page": {
			"title": "Logging in AWS",
			"breadcrumbs": "Docs / Getting Started / Backend: Logging / Hosting Providers / Logging in AWS",
			"content": "Deploying your application or infrastructure in Amazon Web Services (AWS)? Stream your logs to highlight to see everything in one place.\nMost AWS Services support streaming logs via Fluent Forward though the exact configuration will differ.\nRead the AWS documentation here to learn more.\nCheck out the following examples of setting up logs streaming in these services:\nAWS ECS Containers\nTo stream your container logs to highlight from an ECS Fargate container, we recommend running a fluent-bit agent alongside the container\nto stream logs to highlight (which accepts AWS FireLens logs via the [Fluent Forward](https://docs.fluentbit.io/manual/pipeline/outputs/forward/ protocol)).\nHere's a sample task definition (based on the AWS docs) containing a dummy app container and a fluent-bit agent configured alongside.\n{\n  \"family\": \"firelens-example-highlight\",\n  \"taskRoleArn\": \"arn:aws:iam::XXXXXXXXXXXX:role/ecs_task_iam_role\",\n  \"executionRoleArn\": \"arn:aws:iam::XXXXXXXXXXXX:role/ecs_task_execution_role\",\n  \"containerDefinitions\": [\n    {\n      \"essential\": true,\n      \"image\": \"906394416424.dkr.ecr.us-east-1.amazonaws.com/aws-for-fluent-bit:stable\",\n      \"name\": \"log_router\",\n      \"firelensConfiguration\":{\n        \"type\":\"fluentbit\"\n      }\n    },\n    {\n      \"essential\": true,\n      \"image\": \"my-app:latest\",\n      \"name\": \"app\",\n      \"logConfiguration\": {\n        \"logDriver\":\"awsfirelens\",\n        \"options\": {\n          \"Name\": \"Forward\",\n          \"Host\": \"otel.highlight.io\",\n          \"Tag\": \"highlight.project_id=<YOUR_PROJECT_ID>\"\n        }\n      }\n    }\n  ]\n}\n\n\nAWS Kinesis Firehose for logs from infrastructure or other services\nLet's say you are running RDS Postgres or MSK Kafka services that are core infrastructure for your application, and you are interested in searching and browsing the logs. The best way to export such infrastructure logs is via AWS Kinesis Firehose shipping to our HTTP logs endpoint.\nFirst, create a Kinesis Data Stream.\n\nNext, create a Kinesis Data Firehose with an HTTP destination to route data to highlight.\nConfigure your Kinesis data stream to ship logs to HTTP https://pub.highlight.io/v1/logs/firehose, enabling GZIP content encoding and passing paramater x-highlight-project with your highlight project ID.\n\nFinally, connect your AWS CloudWatch Log Stream to the Kinesis Data Stream via a Kinesis Subscription Filter.\n\nIf you have any questions with your setup, don't hesitate to reach out!"
		}
	},
	{
		"page": {
			"title": "Logging in Azure",
			"breadcrumbs": "Docs / Getting Started / Backend: Logging / Hosting Providers / Logging in Azure",
			"content": "Deploying your application or infrastructure in Microsoft Azure? Stream your logs to highlight to see everything in one place.\nCheck out the following examples of setting up logs streaming in these services:\nAzure Logging\n\nSetup the Azure Event Hubs to enable streaming logs.\n\n\n\nCreate an Azure Function triggered by Event Hubs that will forward logs to highlight.\n\n\n\nConfigure the Azure Function with the following Node.js code, updating the values for PROJECT_ID and SERVICE:\n\n// Unless explicitly stated otherwise all files in this repository are licensed\n// under the Apache License Version 2.0.\n\nvar https = require(\"https\");\n\nconst PROJECT_ID = process.env.PROJECT_ID || \"<YOUR_PROJECT_ID>\";\nconst SERVICE = process.env.SERVICE || \"azure\";\n\nconst MAX_RETRIES = 4; // max number of times to retry a single http request\nconst RETRY_INTERVAL = 250; // amount of time (milliseconds) to wait before retrying request, doubles after every retry\n\nclass HTTPClient {\n  constructor(context) {\n    this.context = context;\n    this.httpOptions = {\n      hostname: \"pub.highlight.io\",\n      path: \"/v1/logs/json\",\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"x-highlight-project\": PROJECT_ID,\n        \"x-highlight-service\": SERVICE\n      }\n    };\n  }\n\n  async sendAll(records) {\n    const promises = [];\n    for (let i = 0; i < records.length; i++) {\n      promises.push(this.send(records[i]));\n    }\n    return await Promise.all(\n      promises.map(p => p.catch(e => this.context.log.error(e)))\n    );\n  }\n\n  isStatusCodeValid(statusCode) {\n    return statusCode >= 200 && statusCode <= 299;\n  }\n\n  shouldStatusCodeRetry(statusCode) {\n    // don't retry 4xx responses\n    return (\n      !this.isStatusCodeValid(statusCode) &&\n      (statusCode < 400 || statusCode > 499)\n    );\n  }\n\n  send(record) {\n    var numRetries = MAX_RETRIES;\n    var retryInterval = RETRY_INTERVAL;\n    return new Promise((resolve, reject) => {\n      const sendRequest = (options, record) => {\n        const retryRequest = errMsg => {\n          if (numRetries === 0) {\n            return reject(errMsg);\n          }\n          this.context.log.warn(\n            `Unable to send request, with error: ${errMsg}. Retrying ${numRetries} more times`\n          );\n          numRetries--;\n          retryInterval *= 2;\n          setTimeout(() => {\n            sendRequest(options, record);\n          }, retryInterval);\n        };\n        const req = https\n          .request(options, resp => {\n            if (this.isStatusCodeValid(resp.statusCode)) {\n              resolve(true);\n            } else if (\n              this.shouldStatusCodeRetry(resp.statusCode)\n            ) {\n              retryRequest(\n                `invalid status code ${resp.statusCode}`\n              );\n            } else {\n              reject(`invalid status code ${resp.statusCode}`);\n            }\n          })\n          .on(\"error\", error => {\n            retryRequest(error.message);\n          })\n          .on(\"timeout\", () => {\n            req.destroy();\n            retryRequest(\n              `request timed out`\n            );\n          });\n        req.write(JSON.stringify({ message: record, timestamp: new Date().getTime(), level: 'log' }));\n        req.end();\n      };\n      sendRequest(this.httpOptions, record);\n    });\n  }\n}\n\nmodule.exports = async function(context, eventHubMessages) {\n  if (!PROJECT_ID || PROJECT_ID === \"<YOUR_PROJECT_ID>\") {\n    context.log.error(\"Please configure the highlight project ID.\");\n    return;\n  }\n  var results = await new HTTPClient(context).sendAll(eventHubMessages);\n\n  if (results.every(v => v === true) !== true) {\n    context.log.error(\"An error occurred sending some messages\");\n  }\n};\n\n\n\nClick on Integration then Azure Event Hubs under trigger and check the following settings:\na. Event Parameter Name is set to eventHubMessages.\nb. Event Hub Cardinality is set to Many.\nc. Event Hub Data Type is left empty.\n\nEnable Azure service diagnostic settings in the Activity Log to send logs to the Event Hub, which in turn will be streamed to highlight by the function created in step 3.\n\nAt this point, your infrastructure / service logs (for which you enabled the diagnostic setting) should show up in highlight!"
		}
	},
	{
		"page": {
			"title": "Fly.io NATS Log Shipper",
			"breadcrumbs": "Docs / Getting Started / Backend: Logging / Hosting Providers / Fly.io NATS Log Shipper",
			"content": "Learn how to setup Highlight log ingestion on [Fly.io](https://fly.io/blog/shipping-logs/). As a prerequisite, we assume you already have an application deployed on Fly.io and `flyctl` configured locally.1Configure and launch the fly.io logs shipper, configured for the highlight log drain.No other work is needed on the side of your application, as fly apps are already sending monitoring information back to fly which we can read. Check out the README.md for more details.# spin up the fly log shipper image\nfly launch --image ghcr.io/superfly/fly-log-shipper:latest# set the org for your deployment\nfly secrets set ORG=personal# give the logs shipper access to other containers' logs\nfly secrets set ACCESS_TOKEN=$(fly auth token)# set to configure your highlight project. \n# this tells to log shipper to send data to highlight.\nfly secrets set HIGHLIGHT_PROJECT_ID=<YOUR_PROJECT_ID>2Verify your backend logs are being recorded.Visit the highlight logs portal and check that backend logs are coming in."
		}
	},
	{
		"page": {
			"title": "Logging in GCP",
			"breadcrumbs": "Docs / Getting Started / Backend: Logging / Hosting Providers / Logging in GCP",
			"content": "Deploying your application or infrastructure in Google Cloud Platform (GCP)? Stream your logs to highlight to see everything in one place.\nCheck out the following examples of setting up logs streaming in these services:\nGCP Cloud Logging with Pub/Sub export\n\nSetup the Google Ops Agent to send your infrastructure or compute logs to Google Cloud Logging.\n\nCreate a Cloud Pub/Sub topic for exporting your Google cloud logs.\n\n\nSetup a Log Router Sink in Google Cloud Logging\n\n\nSetup a Pub/Sub Subscription to export to highlight.io over HTTPS. Set the delivery to Push on endpoint URL  https://pub.highlight.io/v1/logs/raw?project=YOUR_PROJECT_ID&service=backend-service\n\n\nAt this point, your infrastructure / service logs should show up in highlight!"
		}
	},
	{
		"page": {
			"title": "Render Log Stream",
			"breadcrumbs": "Docs / Getting Started / Backend: Logging / Hosting Providers / Render Log Stream",
			"content": "Learn how to setup Highlight log ingestion on Render as a log stream. As a prerequisite, we assume you already have an application deployed on Render.1Visit your Render settings and find the Log Streams tab.Visit your Dashboard, then click Settings under your account dropdown in the top right corner. Then click the Log Streams tab on the left.2Click Add Log Stream and configure the endpoint.Enter syslog.highlight.io:34302 for the Log Stream endpoint and your highlight project ID for the token.3Verify your backend logs are being recorded.Visit the highlight logs portal and check that backend logs are coming in."
		}
	},
	{
		"page": {
			"title": "Logging in Trigger.dev",
			"breadcrumbs": "Docs / Getting Started / Backend: Logging / Hosting Providers / Logging in Trigger.dev",
			"content": "Using Trigger.dev to run your background Vercel tasks? Get visibility into your code by shipping logs to highlight.\nTo do this, enable the Vercel integration in trigger and configure your trigger project for verbose logging."
		}
	},
	{
		"page": {
			"title": "Vercel Log Drain",
			"breadcrumbs": "Docs / Getting Started / Backend: Logging / Hosting Providers / Vercel Log Drain",
			"content": "Learn how to setup Highlight log ingestion on Vercel.1Setup the Highlight Vercel integration.Visit the Vercel Highlight Integration page to install it in your account. A log drain will automatically be created for all projects you grant access to.2Verify your backend logs are being recorded.Visit the highlight logs portal and check that backend logs are coming in."
		}
	},
	{
		"page": {
			"title": "curl",
			"breadcrumbs": "Docs / Getting Started / Backend: Logging / curl",
			"content": "Set up highlight.io log ingestion over HTTPS.1Send raw logs over HTTPS via curl.Get started quickly with logs transmitted over HTTPS.curl -X POST https://pub.highlight.io/v1/logs/raw?project=YOUR_PROJECT_ID&service=my-backend \\\n-d 'hello, world! this is the log message'2Send structured logs from curl via the OTLP HTTPS protocol.Get started quickly with logs transmitted over the OTLP HTTPS protocol.curl -X POST https://otel.highlight.io:4318/v1/logs \\\n-H 'Content-Type: application/json' \\\n-d '{\n      \"resourceLogs\": [\n        {\n          \"resource\": {\n            \"attributes\": [\n              {\n                  \"key\": \"service.name\",\n                  \"value\": {\n                      \"stringValue\": \"my-service\"\n                  }\n              }\n          ]\n          },\n          \"scopeLogs\": [\n            {\n              \"scope\": {},\n              \"logRecords\": [\n                {\n                  \"timeUnixNano\": \"'$(date +%s000000000)'\",\n                  \"severityNumber\": 9,\n                  \"severityText\": \"Info\",\n                  \"name\": \"logA\",\n                  \"body\": {\n                    \"stringValue\": \"Hello, world! This is sent from a curl command.\"\n                  },\n                  \"attributes\": [\n                    {\n                      \"key\": \"highlight.project_id\",\n                      \"value\": {\n                        \"stringValue\": \"<YOUR_PROJECT_ID>\"\n                      }\n                    },\n                    {\n                      \"key\": \"foo\",\n                      \"value\": {\n                        \"stringValue\": \"bar\"\n                      }\n                    }\n                  ],\n                  \"traceId\": \"08040201000000000000000000000000\",\n                  \"spanId\": \"0102040800000000\"\n                }\n              ]\n            }\n          ]\n        }\n      ]\n    }'3Verify your backend logs are being recorded.Visit the highlight logs portal and check that backend logs are coming in."
		}
	},
	{
		"page": {
			"title": "Docker / Docker Compose",
			"breadcrumbs": "Docs / Getting Started / Backend: Logging / Docker / Docker Compose",
			"content": "Ship docker logs to highlight using the fluentd log driver.1Setup the fluentd log driver.Use the Fluentd logging driver to route logs to highlight.docker run --log-driver=fluentd --log-opt fluentd-address=otel.highlight.io:24224 --log-opt tag=highlight.project_id=<YOUR_PROJECT_ID> -t ubuntu echo \"Testing a log message\"2Setup the fluentd log driver in docker compose.Use the following syntax if you are using docker compose.x-logging:\n  &highlight-logging\n    driver: fluentd\n    options:\n        fluentd-address: \"otel.highlight.io:24224\"\n        fluentd-async: \"true\"\n        fluentd-sub-second-precision: \"true\"\n        tag: \"highlight.project_id=<YOUR_PROJECT_ID>\"\nservices:\n    example:\n        logging: *highlight-logging\n        image: ubuntu\n        container_name: ubuntu\n        command:\n            - echo\n            - \"hello, highlight.io!\"\n3Verify your backend logs are being recorded.Visit the highlight logs portal and check that backend logs are coming in."
		}
	},
	{
		"page": {
			"title": "File",
			"breadcrumbs": "Docs / Getting Started / Backend: Logging / File",
			"content": "Set up log ingestion using an OpenTelemetry collector with the filelog receiver.1Define your OpenTelemetry configuration.Setup the following OpenTelemetry collector. Check out our example here.receivers:\n    filelog:\n        include: [/watch.log]\n        start_at: beginning\nexporters:\n    otlp/highlight:\n        endpoint: 'https://otel.highlight.io:4317'\nprocessors:\n    attributes/highlight-project:\n        actions:\n            - key: highlight.project_id\n              value: '<YOUR_PROJECT_ID>'\n              action: insert\n    batch:\nservice:\n    pipelines:\n        logs:\n            receivers: [filelog]\n            processors: [attributes/highlight-project, batch]\n            exporters: [otlp/highlight]\n2Run the collectorRun the OpenTelemetry collector to start streaming the file to highlight.docker run -v /my/file/to/watch.log:/watch.log -v $(pwd)/config.yaml:/etc/otelcol-contrib/config.yaml otel/opentelemetry-collector-contrib3Verify your backend logs are being recorded.Visit the highlight logs portal and check that backend logs are coming in."
		}
	},
	{
		"page": {
			"title": "Fluent Forward",
			"breadcrumbs": "Docs / Getting Started / Backend: Logging / Fluent Forward",
			"content": "Set up highlight.io log ingestion via Fluent Forward (fluentd / fluentbit protocol).1Setup fluentd / fluent bit ingest.Route your fluentd / fluent bit to forward://otel.highlight.io:24224. Regardless of the  way you are using fluentbit, configure the tag to highlight.project_id=YOUR_PROJECT_ID to route the logs to the given highlight projectbin/fluent-bit -i cpu -t highlight.project_id=YOUR_PROJECT_ID -o forward://otel.highlight.io:242242Running the fluent agent.You may be running a fluent agent locally or in docker. In that case, you would use the fluent-bit.conf[INPUT]\n    name                tail\n    tag                 <YOUR_PROJECT_ID>\n    path                /var/log/your_log_file.log\n    path_key            file_path\n\n[INPUT]\n    name                tail\n    tag                 <YOUR_PROJECT_ID>\n    path                /var/log/nginx/another_log_file.txt\n    path_key            file_path\n\n[FILTER]\n    Name                record_modifier\n    Match               *\n    Record              hostname my-hostname\n\n[OUTPUT]\n    Name                forward\n    Match               *\n    Host                otel.highlight.io\n    Port                24224\n3Setting up for AWS ECS?If you are setting up for AWS Elastic Container Services, check out our dedicated docs for AWS ECS. .4Verify your backend logs are being recorded.Visit the highlight logs portal and check that backend logs are coming in."
		}
	},
	{
		"page": {
			"title": "Systemd / Journald",
			"breadcrumbs": "Docs / Getting Started / Backend: Logging / Systemd / Journald",
			"content": "Configure Systemd to ship logs to highlight.1Install OpenTelemetry Collector Contrib locallySee here for instructions on installing the collector. We assume that systemd/systemctl are already set up. Check out the following OpenTelemetry journald receiver docs that provide additional guidance on installation.2Define your OpenTelemetry configuration.Setup the Contrib OpenTelemetry collector. Check out our example here. Make sure that the journald directory is correct for your systemd/systemctl setup.receivers:\n    journald:\n        directory: /var/log/journal\nexporters:\n    logging:\n        sampling_initial: 10\n        sampling_thereafter: 1000\n    otlp/highlight:\n        endpoint: 'https://otel.highlight.io:4317'\nprocessors:\n    attributes/highlight-project:\n        actions:\n            - key: highlight.project_id\n              value: '<YOUR_PROJECT_ID>'\n              action: insert\n    batch:\nservice:\n    pipelines:\n        logs:\n            receivers: [journald]\n            processors: [attributes/highlight-project, batch]\n            exporters: [otlp/highlight, logging]\n3Run the collectorRun the OpenTelemetry collector to start streaming the logs to highlight../otelcol-contrib --config=config.yaml4Verify your backend logs are being recorded.Visit the highlight logs portal and check that backend logs are coming in."
		}
	},
	{
		"page": {
			"title": "Syslog RFC5424",
			"breadcrumbs": "Docs / Getting Started / Backend: Logging / Syslog RFC5424",
			"content": "Configure Syslog to ship logs to highlight, formatted in RFC5424.1Send syslog logs.Send syslog logs over TLS to syslog.highlight.io:34302.echo \"<0>1 2021-03-31T16:00:00-08:00 test-service cron-12345 74440 cron-12345 - hello this is a test\" | ncat --ssl syslog.highlight.io 343022Verify your backend logs are being recorded.Visit the highlight logs portal and check that backend logs are coming in."
		}
	},
	{
		"page": {
			"title": "Overview",
			"breadcrumbs": "Docs / Getting Started / Tracing / Overview",
			"content": "Tracing enables you to analyze performance and pinpoint where errors are happening in your application. Each trace corresponds to a request to your backend and is made up of one or more child spans. Tracing is supported with the Highlight Go SDK or via the OpenTelemetry protocol (OTLP).\nGoGet started in your Go appOTLPGet started with OTLP"
		}
	},
	{
		"page": {
			"title": "Tracing in Go",
			"breadcrumbs": "Docs / Getting Started / Tracing / Go",
			"content": "Learn how to set up highlight.io tracing for your Go application.1Install the Highlight Go SDK.Install the highlight-go package with go get.go get -u github.com/highlight/highlight/sdk/highlight-go2Initialize the Highlight Go SDK.highlight.Start starts a goroutine for recording and sending backend traces and errors. Setting your project id lets Highlight record errors for background tasks and processes that aren't associated with a frontend session.import (\n  \"github.com/highlight/highlight/sdk/highlight-go\"\n)\n\nfunc main() {\n  // ...\n  highlight.SetProjectID(\"<YOUR_PROJECT_ID>\")\n  highlight.Start(\n\thighlight.WithServiceName(\"my-app\"),\n\thighlight.WithServiceVersion(\"git-sha\"),\n  )\n  defer highlight.Stop()\n  // ...\n}3Wrap your code using the Go SDK.By wrapping your code with StartTrace and EndTrace, the Highlight Go SDK will record a span. You can create more child spans using the child context or add custom attributes to each span.import (\n\t\"github.com/highlight/highlight/sdk/highlight-go\"\n\t\"go.opentelemetry.io/otel/attribute\"\n)\n\nfunc functionToTrace(ctx context.Context, input int) {\n\ts, childContext := highlight.StartTrace(ctx, \"functionToTrace\", attribute.Int(\"custom_property\", input))\n\t// ...\n\tanotherFunction(childContext)\n\t// ...\n\thighlight.EndTrace(s)\n}\n\nfunc anotherFunction(ctx context.Context) {\n\ts, _ := highlight.StartTrace(ctx, \"anotherFunction\")\n\t// ...\n\thighlight.EndTrace(s)\n}4Verify your backend traces are being recorded.Visit the highlight traces portal and check that backend traces are coming in."
		}
	},
	{
		"page": {
			"title": "Tracing via OTLP",
			"breadcrumbs": "Docs / Getting Started / Tracing / OTLP",
			"content": "Learn how to export traces to highlight.io via one of the OpenTelemetry SDKs.1Export your traces to the highlight.io collector.We host an OpenTelemetry collector endpoint at https://otel.highlight.io:4318/v1/traces. Configure your OpenTelemetry SDK to send traces via OTLP HTTPS to this endpoint. Your Highlight Project ID should be included as an attribute with the highlight.project_id key. This configuration will depend on which SDK you use in your app.import { NodeSDK } from '@opentelemetry/sdk-node'\nimport { OTLPTraceExporter } from '@opentelemetry/exporter-trace-otlp-proto';\nimport { Resource } from '@opentelemetry/resources'\nimport type { Attributes } from '@opentelemetry/api'\n\nconst attributes: Attributes = {\n    'highlight.project_id': '<YOUR_PROJECT_ID>'\n}\nconst sdk = new NodeSDK({\n\tresource: new Resource(attributes),\n\ttraceExporter: new OTLPTraceExporter({\n\t\turl: 'https://otel.highlight.io:4318/v1/traces'\n\t})\n});\nsdk.start();2Verify your backend traces are being recorded.Visit the highlight traces portal and check that backend traces are coming in."
		}
	},
	{
		"page": {
			"title": "Next.js Overview",
			"breadcrumbs": "Docs / Getting Started / Fullstack Frameworks / Next.js Fullstack Overview / Next.js Fullstack Overview",
			"content": "\nGet started\nPage RouterInstrument Page Router.App RouterInstrument App Router.Page Router APIInstrument Page Router API routes.App Router APIInstrument App Router API routes.Edge RuntimeInstrument Edge runtime API routes.Advanced ConfigAdvanced configuration tips"
		}
	},
	{
		"page": {
			"title": "Next.js Page Router",
			"breadcrumbs": "Docs / Getting Started / Fullstack Frameworks / Next.js Fullstack Overview / Page Router",
			"content": "Installation\nnpm install @highlight-run/next\n\nClient instrumentation\nThis sections adds session replay and frontend error monitoring to Highlight. This implementation requires React 17 or greater. If you're behind on React versions, follow our React.js docs\nCheck out this example environment variables set up for the CONSTANTS import.Add <HighlightInit> to _app.tsx.\n// pages/_app.tsx\nimport { AppProps } from 'next/app'\nimport { CONSTANTS } from '../constants'\nimport { HighlightInit } from '@highlight-run/next/client'\n\nexport default function MyApp({ Component, pageProps }: AppProps) {\n\treturn (\n\t\t<>\n\t\t\t<HighlightInit\n\t\t\t\t// excludedHostnames={['localhost']}\n\t\t\t\tprojectId={CONSTANTS.NEXT_PUBLIC_HIGHLIGHT_PROJECT_ID}\n\t\t\t\tserviceName=\"my-nextjs-frontend\"\n\t\t\t\ttracingOrigins\n\t\t\t\tnetworkRecording={{\n\t\t\t\t\tenabled: true,\n\t\t\t\t\trecordHeadersAndBody: true\n\t\t\t\t}}\n\t\t\t/>\n\n\t\t\t<Component {...pageProps} />\n\t\t</>\n\t)\n}\n\nAdd React ErrorBoundary (optional)\nOptionally add a React Error Boundary.\nYou can wrap the root of your app in _app.tsx with the <ErrorBoundary />, or you can wrap individual parts of your React tree.\n// components/error-boundary.tsx\n'use client'\n\nimport { ErrorBoundary as HighlightErrorBoundary } from '@highlight-run/next/client'\n\nexport function ErrorBoundary({ children }: { children: React.ReactNode }) {\n\treturn (\n\t\t<HighlightErrorBoundary showDialog>\n\t\t\t{children}\n\t\t</HighlightErrorBoundary>\n\t)\n}\n\nValidate client instrumentation\nRender this example component somewhere in your client application to see it in action.\nOmit the ErrorBoundary wrapper if you haven't created it yet.\n// pages/page-router-test.tsx\n// http://localhost:3000/page-router-test\n'use client'\n\nimport { useEffect, useState } from 'react'\n\nimport { ErrorBoundary } from '../components/error-boundary'\n\nexport default function ErrorButtons() {\n\tconst [isErrored, setIsErrored] = useState(false)\n\n\treturn (\n\t\t<div\n\t\t\tstyle={{\n\t\t\t\tdisplay: 'grid',\n\t\t\t\tgridTemplateColumns: '20rem',\n\t\t\t\tgridGap: '1rem',\n\t\t\t\tpadding: '2rem',\n\t\t\t}}\n\t\t>\n\t\t\t<ErrorBoundary>\n\t\t\t\t<button\n\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\tthrow new Error('Threw client-side Error')\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\tThrow client-side onClick error\n\t\t\t\t</button>\n\n\t\t\t\t<ThrowerOfErrors isErrored={isErrored} setIsErrored={setIsErrored} />\n\t\t\t\t<button onClick={() => setIsErrored(true)}>Trigger error boundary</button>\n\t\t\t\t<button\n\t\t\t\t\tonClick={async () => {\n\t\t\t\t\t\tthrow new Error('an async error occurred')\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\tTrigger promise error\n\t\t\t\t</button>\n\t\t\t</ErrorBoundary>\n\t\t</div>\n\t)\n}\n\nfunction ThrowerOfErrors({\n\tisErrored,\n\tsetIsErrored,\n}: {\n\tisErrored: boolean\n\tsetIsErrored: (isErrored: boolean) => void\n}) {\n\tuseEffect(() => {\n\t\tif (isErrored) {\n\t\t\tsetIsErrored(false)\n\t\t\tthrow new Error('Threw useEffect error')\n\t\t}\n\t}, [isErrored, setIsErrored])\n\n\treturn null\n}\n\nEnable server-side tracing\nWe use experimental.instrumentationHook to capture Next.js's automatic instrumentation. This method captures detailed API route tracing as well as server-side errors.\nEnable experimental.instrumentationHook in next.config.js.\n// next.config.mjs\nimport { withHighlightConfig } from '@highlight-run/next/config'\n\nconst nextConfig = {\n\texperimental: {\n\t\tinstrumentationHook: true,\n\t},\n\t// ...additional config\n}\n\nexport default withHighlightConfig(nextConfig)\n\nCall registerHighlight in instrumentation.ts or src/instrumentation.ts if you're using a /src folder. Make sure that instrumentation.ts is a sibling of your pages folder.\n// instrumentation.ts or src/instrumentation.ts\nimport { CONSTANTS } from './constants'\n\nexport async function register() {\n\tconst { registerHighlight } = await import('@highlight-run/next/server')\n\n\tregisterHighlight({\n\t\tprojectID: CONSTANTS.NEXT_PUBLIC_HIGHLIGHT_PROJECT_ID,\n\t\tserviceName: 'my-nextjs-backend',\n\t})\n}\n\nCatch server-side render (SSR) errors\nPage Router uses pages/_error.tsx to send server-side render errors to the client. We can catch and consume those errors with a custom error page.\nThese SSR error will display as client errors on your Highlight dashboard.\n// pages/_error.tsx\nimport { PageRouterErrorProps, pageRouterCustomErrorHandler } from '@highlight-run/next/ssr'\n\nimport { CONSTANTS } from '../constants'\nimport NextError from 'next/error'\n\nexport default pageRouterCustomErrorHandler(\n\t{\n\t\tprojectId: CONSTANTS.NEXT_PUBLIC_HIGHLIGHT_PROJECT_ID,\n\t\t// ...otherHighlightOptions\n\t},\n\t/**\n\t *\n\t * This second argument is purely optional.\n\t * If you don't pass it, we'll use the default Next.js error page.\n\t *\n\t * Go ahead and pass in your own error page.\n\t */\n\t(props: PageRouterErrorProps) => <NextError {...props} />,\n)\n\nValidate SSR error capture\nCopy the following code into pages/page-router-ssr.tsx.Build and start your production app with npm run build && npm run start.Visit http://localhost:3000/page-router-ssr?error to trigger the error.Once you've validated that the error is caught and sent to app.highlight.io, don't forget to ctrl + c to kill npm run start and restart with npm run dev.\n// pages/page-router-ssr.tsx\nimport { useRouter } from 'next/router'\n\ntype Props = {\n\tdate: string\n\trandom: number\n}\nexport default function SsrPage({ date, random }: Props) {\n\tconst router = useRouter()\n\tconst isError = router.asPath.includes('error')\n\n\tif (isError) {\n\t\tthrow new Error('SSR Error: pages/page-router-ssr.tsx')\n\t}\n\n\treturn (\n\t\t<div>\n\t\t\t<h1>SSR Lives</h1>\n\t\t\t<p>The random number is {random}</p>\n\t\t\t<p>The date is {date}</p>\n\t\t</div>\n\t)\n}\n\nexport async function getStaticProps() {\n\treturn {\n\t\tprops: {\n\t\t\trandom: Math.random(),\n\t\t\tdate: new Date().toISOString(),\n\t\t},\n\t\trevalidate: 10, // seconds\n\t}\n}\n\nSkip localhost tracking\nWe do not recommend enabling this while integrating Highlight for the first time because it will prevent you from validating that your local build can send data to Highlight.\nIn the case that you don't want local sessions sent to Highlight, the excludedHostnames prop accepts an array of partial or full hostnames. For example, if you pass in excludedHostnames={['localhost', 'staging]}, you'll block localhost on all ports, www.staging.highlight.io and staging.highlight.com.\nAlternatively, you could manually call H.start() and H.stop() to manage invocation on your own.\n// components/custom-highlight-start.tsx\n'use client'\n\nimport { H } from '@highlight-run/next/client'\nimport { useEffect } from 'react'\n\nexport function CustomHighlightStart() {\n\tuseEffect(() => {\n\t\tconst shouldStartHighlight = window.location.hostname === 'https://www.highlight.io'\n\n\t\tif (shouldStartHighlight) {\n\t\t\tH.start()\n\n\t\t\treturn () => {\n\t\t\t\tH.stop()\n\t\t\t}\n\t\t}\n\t})\n\n\treturn null\n}\n\n// pages/_app.tsx\n<HighlightInit\n\tmanualStart\n\tprojectId={CONSTANTS.NEXT_PUBLIC_HIGHLIGHT_PROJECT_ID}\n\tserviceName=\"my-nextjs-frontend\"\n/>\n<CustomHighlightStart />\n\nRelated steps\nPage Router API instrumentationEdge runtime API instrumentationAdvanced Configuration"
		}
	},
	{
		"page": {
			"title": "Next.js App Router",
			"breadcrumbs": "Docs / Getting Started / Fullstack Frameworks / Next.js Fullstack Overview / App Router",
			"content": "Installation\nnpm install @highlight-run/next\n\nClient instrumentation\nThis sections adds session replay and frontend error monitoring to Highlight. This implementation requires React 17 or greater.\nCheck out this example environment variables set up for the CONSTANTS import.Add HighlightInit to your layout.tsx file.\n// app/layout.tsx\nimport { CONSTANTS } from '../constants'\nimport { HighlightInit } from '@highlight-run/next/client'\n\nexport default function RootLayout({ children }: { children: React.ReactNode }) {\n\treturn (\n\t\t<>\n\t\t\t<HighlightInit\n\t\t\t\t// excludedHostnames={['localhost']}\n\t\t\t\tprojectId={CONSTANTS.NEXT_PUBLIC_HIGHLIGHT_PROJECT_ID}\n\t\t\t\tserviceName=\"my-nextjs-frontend\"\n\t\t\t\ttracingOrigins\n\t\t\t\tnetworkRecording={{\n\t\t\t\t\tenabled: true,\n\t\t\t\t\trecordHeadersAndBody: true\n\t\t\t\t}}\n\t\t\t/>\n\n\t\t\t<html lang=\"en\">\n\t\t\t\t<body>{children}</body>\n\t\t\t</html>\n\t\t</>\n\t)\n}\n\nAdd React ErrorBoundary (optional)\nOptionally add a React Error Boundary.\nYou can wrap the root of your app in layout.tsx with the <ErrorBoundary />, or you can wrap individual parts of your React tree.\n// components/error-boundary.tsx\n'use client'\n\nimport { ErrorBoundary as HighlightErrorBoundary } from '@highlight-run/next/client'\n\nexport function ErrorBoundary({ children }: { children: React.ReactNode }) {\n\treturn <HighlightErrorBoundary showDialog>{children}</HighlightErrorBoundary>\n}\n\nValidate client implementation\nRender this example component somewhere in your client application to see it in action.\nOmit the ErrorBoundary wrapper if you haven't created it yet.\n// app/app-router-test/page.tsx\n// http://localhost:3000/app-router-test\n'use client'\nimport { useEffect, useState } from 'react'\nimport { ErrorBoundary } from '../../components/error-boundary'\n\nexport default function ErrorButtons() {\n\tconst [isErrored, setIsErrored] = useState(false)\n\n\treturn (\n\t\t<div\n\t\t\tstyle={{\n\t\t\t\tdisplay: 'grid',\n\t\t\t\tgridTemplateColumns: '20rem',\n\t\t\t\tgridGap: '1rem',\n\t\t\t\tpadding: '2rem',\n\t\t\t}}\n\t\t>\n\t\t\t<ErrorBoundary>\n\t\t\t\t<button\n\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\tthrow new Error('Threw client-side Error')\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\tThrow client-side onClick error\n\t\t\t\t</button>\n\n\t\t\t\t<ThrowerOfErrors isErrored={isErrored} setIsErrored={setIsErrored} />\n\t\t\t\t<button onClick={() => setIsErrored(true)}>Trigger error boundary</button>\n\t\t\t\t<button\n\t\t\t\t\tonClick={async () => {\n\t\t\t\t\t\tthrow new Error('an async error occurred')\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\tTrigger promise error\n\t\t\t\t</button>\n\t\t\t</ErrorBoundary>\n\t\t</div>\n\t)\n}\n\nfunction ThrowerOfErrors({\n\tisErrored,\n\tsetIsErrored,\n}: {\n\tisErrored: boolean\n\tsetIsErrored: (isErrored: boolean) => void\n}) {\n\tuseEffect(() => {\n\t\tif (isErrored) {\n\t\t\tsetIsErrored(false)\n\t\t\tthrow new Error('Threw useEffect error')\n\t\t}\n\t}, [isErrored, setIsErrored])\n\n\treturn null\n}\n\nEnable server-side tracing\nWe use experimental.instrumentationHook to capture Next.js's automatic instrumentation. This method captures detailed API route tracing as well as server-side errors.\nEnable experimental.instrumentationHook in next.config.js.\n// next.config.mjs\nimport { withHighlightConfig } from '@highlight-run/next/config'\n\nconst nextConfig = {\n\texperimental: {\n\t\tinstrumentationHook: true,\n\t},\n\t// ...additional config\n}\n\nexport default withHighlightConfig(nextConfig)\n\nCall registerHighlight in instrumentation.ts or src/instrumentation.ts if you're using a /src folder. Make sure that instrumentation.ts is a sibling of your pages folder.\n// instrumentation.ts or src/instrumentation.ts\nimport { CONSTANTS } from './constants'\n\nexport async function register() {\n\tconst { registerHighlight } = await import('@highlight-run/next/server')\n\n\tregisterHighlight({\n\t\tprojectID: CONSTANTS.NEXT_PUBLIC_HIGHLIGHT_PROJECT_ID,\n\t\tserviceName: 'my-nextjs-backend',\n\t})\n}\n\nCatch server-side render (SSR) errors\nApp Router uses app/error.tsx to send server-side render errors to the client. We can catch and consume those errors with a custom error page.\nAll SSR error will display as client errors on your Highlight dashboard.\nWe don't call H.init in this example because we injected <HighlightInit /> into the layout using app/layout.tsx.\n// app/error.tsx\n'use client' // Error components must be Client Components\n\nimport {\n\tappRouterSsrErrorHandler,\n\tAppRouterErrorProps,\n} from '@highlight-run/next/ssr'\n\nexport default appRouterSsrErrorHandler(\n\t({ error, reset }: AppRouterErrorProps) => {\n\t\tconsole.error(error)\n\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<h2>Something went wrong!</h2>\n\t\t\t\t<button\n\t\t\t\t\tonClick={\n\t\t\t\t\t\t() => reset() // Attempt to recover by trying to re-render the segment\n\t\t\t\t\t}\n\t\t\t\t>\n\t\t\t\t\tTry again\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t)\n\t},\n)\n\nValidate SSR error capture\nCopy the following code into app/app-router-ssr/page.tsx.Build and start your production app with npm run build && npm run start.Visit http://localhost:3000/app-router-ssr?error to trigger the error.Once you've validated that the error is caught and sent to app.highlight.io, don't forget to ctrl + c to kill npm run start and restart with npm run dev.\n// app/app-router-ssr/page.tsx\ntype Props = {\n\tsearchParams: { error?: string }\n}\n\nexport default function SsrPage({ searchParams }: Props) {\n\tif (typeof searchParams.error === 'string') {\n\t\tthrow new Error('SSR Error: app/app-router-ssr/page.tsx')\n\t}\n\n\treturn (\n\t\t<div>\n\t\t\t<h1>App Directory SSR: Success</h1>\n\t\t\t<p>The random number is {Math.random()}</p>\n\t\t\t<p>The date is {new Date().toLocaleTimeString()}</p>\n\t\t</div>\n\t)\n}\n\nexport const revalidate = 30 // seconds\n\nSkip localhost tracking\nWe do not recommend enabling this while integrating Highlight for the first time because it will prevent you from validating that your local build can send data to Highlight.\nIn the case that you don't want local sessions sent to Highlight, the excludedHostnames prop accepts an array of partial or full hostnames. For example, if you pass in excludedHostnames={['localhost', 'staging]}, you'll block localhost on all ports, www.staging.highlight.io and staging.highlight.com.\nAlternatively, you could manually call H.start() and H.stop() to manage invocation on your own.\n// components/custom-highlight-start.tsx\n'use client'\n\nimport { H } from '@highlight-run/next/client'\nimport { useEffect } from 'react'\n\nexport function CustomHighlightStart() {\n\tuseEffect(() => {\n\t\tconst shouldStartHighlight = window.location.hostname === 'https://www.highlight.io'\n\n\t\tif (shouldStartHighlight) {\n\t\t\tH.start()\n\n\t\t\treturn () => {\n\t\t\t\tH.stop()\n\t\t\t}\n\t\t}\n\t})\n\n\treturn null\n}\n\n// app/layout.tsx\n<HighlightInit\n\tmanualStart\n\tprojectId={CONSTANTS.NEXT_PUBLIC_HIGHLIGHT_PROJECT_ID}\n\tserviceName=\"my-nextjs-frontend\"\n/>\n<CustomHighlightStart />\n\nRelated steps\nApp Router API instrumentationEdge runtime API instrumentationAdvanced Configuration"
		}
	},
	{
		"page": {
			"title": "Next.js Page Router Api",
			"breadcrumbs": "Docs / Getting Started / Fullstack Frameworks / Next.js Fullstack Overview / Page Router Api",
			"content": "Installation\nnpm install @highlight-run/next\n\nAPI route instrumentation\nThis section applies to Next.js Page Router routes only. Each Page Router route must be wrapped individually.\n\nCreate a file to export your PageRouterHighlight wrapper function:\n// utils/page-router-highlight.config.ts:\nimport { CONSTANTS } from '../constants'\nimport { PageRouterHighlight } from '@highlight-run/next/server'\n\nexport const withPageRouterHighlight = PageRouterHighlight({\n   projectID: CONSTANTS.NEXT_PUBLIC_HIGHLIGHT_PROJECT_ID,\n})\n\nWrap your /pages/api functions with withPageRouterHighlight:\n// pages/api/nodejs-page-router-test.ts\nimport { NextApiRequest, NextApiResponse } from 'next'\n\nimport { withPageRouterHighlight } from '../../utils/page-router-highlight.config'\n\nexport default withPageRouterHighlight(function handler(req: NextApiRequest, res: NextApiResponse) {\n\tconsole.info('Here: pages/api/nodejs-page-router-test.ts')\n\n\tif (req.url?.includes('error')) {\n\t\tthrow new Error('Error: pages/api/nodejs-page-router-test.ts')\n\t} else {\n\t\tres.send('Success: pages/api/nodejs-page-router-test.ts')\n\t}\n})\n\nValidation\nRun your app in dev mode with npm run dev.Copy/paste the above code snippet into /pages/api/nodejs-page-router-test.ts and hit the endpoint in your browser or with curl to watch it work.\ncurl http://localhost:3000/api/nodejs-page-router-test?error\n\nRelated steps\nPage Router client instrumentationEdge runtime API instrumentationAdvanced Configuration"
		}
	},
	{
		"page": {
			"title": "Next.js App Router Api",
			"breadcrumbs": "Docs / Getting Started / Fullstack Frameworks / Next.js Fullstack Overview / App Router Api",
			"content": "Installation\nnpm install @highlight-run/next\n\nAPI route instrumentation\nNode.js\nEach App Router route must be wrapped individually.\n\nAdd @highlight-run/node to experimental.serverComponentsExternalPackages in your next.config.js.\n// next.config.js\nconst nextConfig = {\n\texperimental: {\n\t\tserverComponentsExternalPackages: ['@highlight-run/node'],\n\t},\n}\n\nmodule.exports = nextConfig\n\nCreate a file to export your AppRouterHighlight wrapper function:\n// utils/app-router-highlight.config.ts:\nimport { AppRouterHighlight } from '@highlight-run/next/server'\nimport { CONSTANTS } from '../constants'\n\nexport const withAppRouterHighlight = AppRouterHighlight({\n\tprojectID: CONSTANTS.NEXT_PUBLIC_HIGHLIGHT_PROJECT_ID,\n})\n\nWrap your /app functions with withAppRouterHighlight:\n// app/nodejs-app-router-test/route.ts\nimport { NextRequest } from 'next/server'\nimport { withAppRouterHighlight } from '../../utils/app-router-highlight.config'\n\nexport const GET = withAppRouterHighlight(async function GET(request: NextRequest) {\n\tconsole.info('Here: app/nodejs-app-router-test/route.ts')\n\n\tif (request.url?.includes('error')) {\n\t\tthrow new Error('Error: app/nodejs-app-router-test (App Router)')\n\t} else {\n\t\treturn new Response('Success: app/nodejs-app-router-test')\n\t}\n})\n\nValidation\nRun your app in dev mode with npm run dev.Copy/paste the above code snippet into /app/api/nodejs-app-router-test.ts and hit the endpoint in your browser or with curl to watch it work.\ncurl http://localhost:3000/nodejs-app-router-test?error\n\nRelated steps\nApp Router client instrumentationEdge runtime API instrumentationAdvanced Configuration"
		}
	},
	{
		"page": {
			"title": "Edge Runtime",
			"breadcrumbs": "Docs / Getting Started / Fullstack Frameworks / Next.js Fullstack Overview / Edge Runtime",
			"content": "Installation\nnpm install @highlight-run/next\n\nVercel Edge Runtime instrumentation\nEdge runtime instrumentation is identical for both Page Router and App Router.\nCreate a file to export your EdgeHighlight wrapper function:\n// utils/edge-highlight.config.ts:\nimport { CONSTANTS } from '../../constants'\nimport { EdgeHighlight } from '@highlight-run/next/server'\n\nexport const withEdgeHighlight = EdgeHighlight({\n\tprojectID: CONSTANTS.NEXT_PUBLIC_HIGHLIGHT_PROJECT_ID,\n})\n\nWrap your edge function with withEdgeHighlight\nPage Router\n// pages/api/edge-page-router-test.ts\nimport { NextRequest } from 'next/server'\nimport { withEdgeHighlight } from '../../utils/edge-highlight.config.ts'\n\nexport default withEdgeHighlight(async function GET(request: NextRequest) {\n\tconsole.info('Here: pages/api/edge-page-router-test', request.url)\n\n\tif (request.url.includes('error')) {\n\t\tthrow new Error('Error: pages/api/edge-page-router-test (Edge Runtime)')\n\t} else {\n\t\treturn new Response('Success: pages/api/edge-page-router-test')\n\t}\n})\n\nexport const runtime = 'edge'\n\nApp Router\n// pages/api/edge-page-router-test.ts\nimport { NextRequest } from 'next/server'\nimport { withEdgeHighlight } from '../../utils/edge-highlight.config'\n\nexport default withEdgeHighlight(async function GET(request: NextRequest) {\n\tconsole.info('Here: pages/api/edge-page-router-test', request.url)\n\n\tif (request.url.includes('error')) {\n\t\tthrow new Error('Error: pages/api/edge-page-router-test (Edge Runtime)')\n\t} else {\n\t\treturn new Response('Success: pages/api/edge-page-router-test')\n\t}\n})\n\nexport const runtime = 'edge'\n\nValidation\nCopy/paste the above code snippet into /app/api/edge-test.ts and hit the endpoint in your browser or with curl to watch it work.\nPage Router\ncurl http://localhost:3000/api/edge-page-router-test?error\n\nApp Router\ncurl http://localhost:3000/edge-app-router-test?error\n\nRelated steps\nPage Router client instrumentationApp Router client instrumentationAdvanced Configuration"
		}
	},
	{
		"page": {
			"title": "Next.js Advanced Config",
			"breadcrumbs": "Docs / Getting Started / Fullstack Frameworks / Next.js Fullstack Overview / Advanced Config",
			"content": "How Highlight captures Next.js errors\nPage RouterApp RouterAPI ErrorsPageRouterHighlightAppRouterHighlightSSR Errorspages/_error.tsxapp/error.tsxClient<HighlightInit /><HighlightInit />Edge runtimeEdgeHighlightEdgeHighlight\nOur Next.js SDK gives you access to frontend session replays and server-side monitoring,\nall-in-one.\nOn the frontend, the <HighlightInit/> component sets up client-side session replays.On the backend, the PageRouterHighlight wrapper exported from @highlight-run/next/server captures server-side errors and logs from Page Router API endpoints.On the backend, the AppRouterHighlight wrapper exported from @highlight-run/next/app-router captures errors and logs from App Router API endpoints.The EdgeHighlight wrapper exported from @highlight-run/next/server captures server-side errors and logs from both Page and App Router endpoints using Vercel's Edge runtime.Use pages/_error.tsx and app/error.tsx to forward Page Router and App Router SSR errors from the client to Highlight.The withHighlightConfig configuration wrapper automatically proxies Highlight data to bypass ad-blockers and uploads source maps so your frontend errors include stack traces to your source code.\nHow Highlight captures Next.js logs\n<HighlightInit /> captures front-end logs.\nPageRouterHighlight and AppRouterHighlight capture server-side logs in traditional server runtimes. These wrappers typically fail in serverless runtimes (including Vercel), because we cannot guarantee that the serverless process will stay alive long enough to send all log data to Highlight.\nConfigure logging for your serverless cloud provider using one of our cloud provider logging guides, including Vercel Log Drain for Highlight.\nEnvironment variables\n\nThis section is extra opinionated about Next.js constants. It's not for everyone. We like how zod and TypeScript work together to validate process.env inputs... but this is a suggestion. Do your own thing and replace our imports (import { CONSTANTS } from 'src/constants') with your own!\n\nInstall Zod: npm install zodEdit .env to add your projectID to NEXT_PUBLIC_HIGHLIGHT_PROJECT_ID\n# .env\nNEXT_PUBLIC_HIGHLIGHT_PROJECT_ID='<API KEY>'\n\nFeed your environment variables into the application with a constants file. We're using zod for this example, because it creates a validated, typed CONSTANTS object that plays nicely with TypeScript.\n// constants.ts\nimport { z } from 'zod';\n\n// Must assign NEXT_PUBLIC_* env vars to a variable to force Next to inline them\nconst publicEnv = {\n\tNEXT_PUBLIC_HIGHLIGHT_PROJECT_ID: process.env.NEXT_PUBLIC_HIGHLIGHT_PROJECT_ID,\n};\n\nexport const CONSTANTS = z\n\t.object({\n\t\tNEXT_PUBLIC_HIGHLIGHT_PROJECT_ID: z.string(),\n\t})\n\t.parse(publicEnv);\n\nVercel Log Drain\nInstall our Vercel + Highlight Integration to enable Vercel Log Drain on your project.\nOur API wrappers automatically send logs to Highlight in all runtime environments, but Vercel shuts down its Node.js and Edge processes so quickly that log messages are often lost.\nVercel Log Drain is a reliable way to capture those logs.\nNext.js plugin\nProxy your front-end Highlight calls by adding withHighlightConfig to your next.config. Frontend session recording and error capture data will be piped through your domain on /highlight-events to sneak Highlight network traffic past ad-blockers.\nThe following example demonstrates both private source maps and the request proxy. withHighlightConfig does not require a second argument if you are only using the request proxy.\nRequest proxy only\n// next.config.js\nconst { withHighlightConfig } = require('@highlight-run/next/config')\n\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n\texperimental: {\n\t\tserverComponentsExternalPackages: ['@highlight-run/node'],\n\t},\n\tproductionBrowserSourceMaps: true, // optionally ship source maps to production\n}\n\nmodule.exports = withHighlightConfig(nextConfig)\n\nPrivate source maps + request proxy\n\nGet your Highlight API key from your project settings. You can also enable the Highlight + Vercel integration to inject HIGHLIGHT_SOURCEMAP_UPLOAD_API_KEY directly into your Vercel environment.\n\nVerify that HIGHLIGHT_SOURCEMAP_UPLOAD_API_KEY=<apiKey> is set in your environment variables--try .env.local for testing purposes--or pass apiKey in as an optional argument to withHighlightConfig.\n\nEnsure that productionBrowserSourceMaps is either false or omitted.\n\nWrap your nextConfig with withHighlightConfig. apiKey is unnecessary if you have HIGHLIGHT_SOURCEMAP_UPLOAD_API_KEY in your environment variables.\n\nRun npm run build && npm run start to test. Your logs should show files uploading like so:\n\nUploaded /root/dev/highlight/next-test/.next/server/pages/index.js\n\n// next.config.js\nconst { withHighlightConfig } = require('@highlight-run/next/config')\n\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n\texperimental: {\n\t\tserverComponentsExternalPackages: ['@highlight-run/node'],\n\t},\n\tproductionBrowserSourceMaps: false,\n}\n\nmodule.exports = withHighlightConfig(nextConfig, {\n\tapiKey: '<API KEY>',\n\tuploadSourceMaps: true,\n})\n\nConfigure inlineImages\nWe use a package called rrweb to record web sessions. rrweb supports inlining images into sessions to improve replay accuracy, so that images that are only available from your local network can be saved; however, the inlined images can cause CORS issues in some situations.\nWe currently default inlineImages to true on localhost. Explicitly set inlineImages={false} if you run into trouble loading images on your page while Highlight is running. This will degrade tracking on localhost and other domains that are inaccessible to app.highlight.io.\nConfigure tracingOrigins and networkRecording\nSee Fullstack Mapping for details on how to associate your back-end errors to client sessions."
		}
	},
	{
		"page": {
			"title": "Remix Walkthrough",
			"breadcrumbs": "Docs / Getting Started / Fullstack Frameworks / Remix Walkthrough",
			"content": "Overview\nOur Remix SDK gives you access to frontend session replays and server-side monitoring,\nall-in-one.\nUse <HighlightInit /> to track session replay and client-side errors.Use H.init to instrument Remix's nodejs server.\nInstallation\n# with yarn\nyarn add @highlight-run/remix\n\nClient Instrumentation\nInject <HighlightInit /> into your app root.Optionally configure excludedHostnames to block a full or partial hostname. For example, excludedHostnames={['staging']} would not initialize Highlight on staging.highlight.io.Configure tracingOrigins and networkRecording\nSee Fullstack Mapping for details.\n// app/root.tsx\nimport { useLoaderData } from '@remix-run/react'\n\nimport { HighlightInit } from '@highlight-run/remix/client'\nimport { json } from '@remix-run/node'\n\n\nexport async function loader() {\n\treturn json({\n\t\tENV: {\n\t\t\tHIGHLIGHT_PROJECT_ID: process.env.HIGHLIGHT_PROJECT_ID,\n\t\t},\n\t})\n}\n\nexport default function App() {\n\tconst { ENV } = useLoaderData()\n\n\treturn (\n\t\t<html lang=\"en\">\n\t\t\t<HighlightInit\n\t\t\t\texcludedHostnames={['localhost']}\n\t\t\t\tprojectId={ENV.HIGHLIGHT_PROJECT_ID}\n\t\t\t\tserviceName=\"my-remix-frontend\"\n\t\t\t\ttracingOrigins\n\t\t\t\tnetworkRecording={{ enabled: true, recordHeadersAndBody: true }}\n\t\t\t/>\n\t\t\t{/* Render head, body, <Outlet />, etc. */}\n\t\t</html>\n\t)\n}\n\n\nOptionally Create an ErrorBoundary component and export it from app/root.tsx\n// app/components/error-boundary.tsx\nimport { isRouteErrorResponse, useRouteError } from '@remix-run/react'\nimport { ReportDialog } from '@highlight-run/remix/report-dialog'\n\nexport function ErrorBoundary() {\n\tconst error = useRouteError()\n\n\tif (isRouteErrorResponse(error)) {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<h1>\n\t\t\t\t\t{error.status} {error.statusText}\n\t\t\t\t</h1>\n\t\t\t\t<p>{error.data}</p>\n\t\t\t</div>\n\t\t)\n\t} else if (error instanceof Error) {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<script src=\"https://unpkg.com/highlight.run\"></script>\n\t\t\t\t<script\n\t\t\t\t\tdangerouslySetInnerHTML={{\n\t\t\t\t\t\t__html: `\n\t\t\t\t\t\t\tH.init('\\${process.env.HIGHLIGHT_PROJECT_ID}');\n\t\t\t\t\t\t`,\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t\t<h1>Error</h1>\n\t\t\t\t<p>{error.message}</p>\n\t\t\t\t<p>The stack trace is:</p>\n\t\t\t\t<pre>{error.stack}</pre>\n\n\t\t\t\t<ReportDialog />\n\t\t\t</div>\n\t\t)\n\t} else {\n\t\treturn <h1>Unknown Error</h1>\n\t}\n}\n\n// app/root.tsx\nexport { ErrorBoundary } from '~/components/error-boundary'\n\nServer Instrumentation\nUse H.init from @highlight-run/remix/server to instrument the Remix server on Node.js.Import HandleError from @highlight-run/remix/server and export handleError after setting nodeOptions.\n// app/entry.server.tsx\nimport { HandleError } from '@highlight-run/remix/server'\n\nconst nodeOptions = { projectID: process.env.HIGHLIGHT_PROJECT_ID }\n\nexport const handleError = HandleError(nodeOptions)\n\n// Handle server requests\n\n\nAlternatively, you can wrap Highlight's error handler and execute your own custom error handling code as well.\n// app/entry.server.tsx\nimport type { DataFunctionArgs } from '@remix-run/node'\n\nimport { H, HandleError } from '@highlight-run/remix/server'\n\nconst nodeOptions = { projectID: process.env.HIGHLIGHT_PROJECT_ID }\n\nexport function handleError(\n\terror: unknown,\n\tdataFunctionArgs: DataFunctionArgs,\n) {\n\tconst handleError = HandleError(nodeOptions)\n\n\thandleError(error, dataFunctionArgs)\n\n\t// custom error handling logic here\n}\n\nH.init(nodeOptions)\n\n// Handle server requests\n\nHandle streaming HTML responses using the onError handler of renderToPipeableStream\nfunction handleBrowserRequest(\n\trequest: Request,\n\tresponseStatusCode: number,\n\tresponseHeaders: Headers,\n\tremixContext: EntryContext,\n) {\n\treturn new Promise((resolve, reject) => {\n\t\tlet shellRendered = false\n\t\tconst { pipe, abort } = renderToPipeableStream(\n\t\t\t<RemixServer\n\t\t\t\tcontext={remixContext}\n\t\t\t\turl={request.url}\n\t\t\t\tabortDelay={ABORT_DELAY}\n\t\t\t/>,\n\t\t\t{\n\t\t\t\tonShellReady() {\n\t\t\t\t\tshellRendered = true\n\t\t\t\t\tconst body = new PassThrough()\n\n\t\t\t\t\tresponseHeaders.set('Content-Type', 'text/html')\n\n\t\t\t\t\tresolve(\n\t\t\t\t\t\tnew Response(body, {\n\t\t\t\t\t\t\theaders: responseHeaders,\n\t\t\t\t\t\t\tstatus: responseStatusCode,\n\t\t\t\t\t\t}),\n\t\t\t\t\t)\n\n\t\t\t\t\tpipe(body)\n\t\t\t\t},\n\t\t\t\tonShellError(error: unknown) {\n\t\t\t\t\treject(error)\n\t\t\t\t},\n\t\t\t\tonError(error: unknown) {\n\t\t\t\t\tif (shellRendered) {\n\t\t\t\t\t\tlogError(error, request)\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t},\n\t\t)\n\n\t\tsetTimeout(abort, ABORT_DELAY)\n\t})\n}\n\nfunction logError(error: unknown, request?: Request) {\n\tconst parsed = request\n\t\t? H.parseHeaders(Object.fromEntries(request.headers))\n\t\t: undefined\n\n\tif (error instanceof Error) {\n\t\tH.consumeError(error, parsed?.secureSessionId, parsed?.requestId)\n\t} else {\n\t\tH.consumeError(\n\t\t\tnew Error(`Unknown error: ${JSON.stringify(error)}`),\n\t\t\tparsed?.secureSessionId,\n\t\t\tparsed?.requestId,\n\t\t)\n\t}\n\n\tconsole.error(error)\n}\n"
		}
	},
	{
		"page": {
			"title": "Overview",
			"breadcrumbs": "Docs / Getting Started / Self Host & Local Dev / Overview",
			"content": "Self-hosted Hobby Guide\nLooking to deploy the self-hosted hobby deployment of highlight.io? Checkout this guide:\nSelf-hosted Hobby Guide.Self hosting the hobby docker deployment of highlight.io\nDevelopment Deployment Guide\nLooking to contribute to highlight.io? Checkout out guide on deploying highlight.io in docker for development. This includes specific flags to support local filesystem mounts, hot reloading, etc..\nDev Deployment Guide.Running a docker version of highlight.io for development."
		}
	},
	{
		"page": {
			"title": "Development deployment guide.",
			"breadcrumbs": "Docs / Getting Started / Self Host & Local Dev / Development deployment guide.",
			"content": "Learn how to set up the dev deployment of highlight.io to start contributing.1PrerequisitesBefore we get started, you should install Go (1.20), Node.js (18), and yarn (v3+).You should have the latest version of Docker (19.03.0+) and Git (2.13+) installed. We suggest configuring docker to use at least 8GB of RAM, 4 CPUs, and 64 GB of disk space.$ go version\ngo version go1.20.3 darwin/arm64$ node --version\nv18.15.0$ yarn --version\nv3.5.0$ docker --version\nDocker version 20.10.23, build 7155243$ docker compose version\nDocker Compose version v2.15.12Clone the repository.Clone the highlight.io repository and make sure to checkout the submodules with the --recurse-submodules flag.git clone --recurse-submodules https://github.com/highlight/highlight3Start highlight.In the highlight/docker directory, run ./run.sh to start the docker containers.cd highlight/docker;\n./run.sh;4(Optional) Running in different terminals.While the above instructions will hot-reload, you might want more control of parts of the stack when developing. Running the dev workflow manually is easy in different terminals as well.# first, start the infrastructure containers\ncd highlight/docker;\n./start-infra.sh;# start the backend. this will run make start-no-doppler in backend and block until you stop it with ctrl+c.\ncd highlight/docker;\n./run-backend.sh# now, start the frontend in a second terminal. this will run yarn docker:frontend in the monorepo and block until you stop it with ctrl+c.\n./run-frontend.sh5Visit the dashboard.Visit https://localhost:3000 to view the dashboard and go through the login flow; use the password set in docker/.env variable ADMIN_PASSWORD with any valid email address.6View your first session.After clicking around on the dashboard for a bit, you should see a session appear at https://localhost:3000/1/sessions. Click on the session to view the session details page.7Troubleshoot the deployment.Having issues? Here's some things ot try. First run the docker ps command and ensure that all containers are in a 'healthy' state. As a second step, run docker compose logs to see the logs for the infra containers. Looking at the logs, if any containers are not healthy, use the follow commands to start from scratch. If this doesn't help with troubleshooting, please reach out.docker ps\ndocker compose logs\n# delete everything in the docker compose stack\ndocker compose down --remove-orphans --volumes --rmi local\n"
		}
	},
	{
		"page": {
			"title": "Hobby deployment guide.",
			"breadcrumbs": "Docs / Getting Started / Self Host & Local Dev / Hobby deployment guide.",
			"content": "Learn how to set up the self-hosted hobby deployment of highlight.io.1PrerequisitesBefore we get started, you should install Go (1.20), Node.js (18), and yarn (v3+).You should have the latest version of Docker (19.03.0+) and Git (2.13+) installed. We suggest configuring docker to use at least 8GB of RAM, 4 CPUs, and 64 GB of disk space.$ go version\ngo version go1.20.3 darwin/arm64$ node --version\nv18.15.0$ yarn --version\nv3.5.0$ docker --version\nDocker version 20.10.23, build 7155243$ docker compose version\nDocker Compose version v2.15.12Clone the repository.Clone the highlight.io repository and make sure to checkout the submodules with the --recurse-submodules flag.git clone --recurse-submodules https://github.com/highlight/highlight3Configure networking.If this hobby deploy is running on a remote server, make changes to the docker/.env file for your deployment. Update the following values to your backend IP address.PRIVATE_GRAPH_URI=https://your-ip-address:8082/private\nPUBLIC_GRAPH_URI=https://your-ip-address:8082/public\nREACT_APP_PRIVATE_GRAPH_URI=https://your-ip-address:8082/private\nREACT_APP_PUBLIC_GRAPH_URI=https://your-ip-address:8082/public\nREACT_APP_FRONTEND_URI=https://your-ip-address:3000\n4Password auth mode.The frontend for hobby deploy now defaults to using password auth. That uses a password set in your deploeyments docker/.env file to authenticate users. Update the following environment variable to your preferred admin password.ADMIN_PASSWORD=YOUR_ADMIN_PASSWORD5Start highlight.In the highlight/docker directory, run ./run-hobby.sh to start the docker stack.cd highlight/docker;\n./run-hobby.sh;6Visit the dashboard.Visit https://localhost:3000 to view the dashboard and go through the login flow; use the password set in docker/.env variable ADMIN_PASSWORD with any valid email address.7Setup the snippet.In your frontend application, you should setup highlight.io as usual (see our guides), with the exception of adding the backendUrl flag to your init() method. See the example in react to the right.import { H } from 'highlight.run';\n\nH.init('<YOUR_PROJECT_ID>', {\n    backendUrl: 'https://localhost:8082/public',\n    ...\n});8Troubleshoot the deployment.Having issues? Here's some things ot try. First run the docker ps command and ensure that all containers are in a 'healthy' state. As a second step, run docker compose logs to see the logs for the infra containers. Looking at the logs, if any containers are not healthy, use the follow commands to start from scratch. If this doesn't help with troubleshooting, please reach out.docker ps\ndocker compose logs\n# delete everything in the docker compose stack\ndocker compose down --remove-orphans --volumes --rmi local\n"
		}
	},
	{
		"page": {
			"title": "Welcome to highlight.io",
			"breadcrumbs": "Docs / Highlight Docs / Welcome to highlight.io",
			"content": "highlight.io is monitoring software for the next generation of developers. And it's all open source :).\nhighlight.io gives you fullstack visibility into your application by pairing session replay, error monitoring, and logging, allowing you to tie frontend issues with backend logs and performance issues.\nWhen highlight.io is fully integrated, this is what it looks like:\n\nAnd to get started:\nGet StartedGet started with highlight.io. Instrument your frontend & backend.\nAbout us\nMission & Values.Details about our company, our values, and open source.Compliance & Security.Our security certificates, and contact details.Contributing to highlight.ioOpen source, self hosting highlight, and contributing.Self hosting highlight.ioOpen source, self hosting highlight, and contributing.\nFeatures\nSession Replay.Session replay features, how to get started, etc..Error Monitoring.Error monitoring features, how to get started, etc..Logging.Logging features, how to get started, etc.."
		}
	},
	{
		"page": {
			"title": "Client SDK API Reference",
			"content": "Client SDK"
		}
	},
	{
		"page": {
			"title": "Cloudflare Worker SDK API Reference",
			"content": "Cloudflare Worker SDK"
		}
	},
	{
		"page": {
			"title": "Go SDK API Reference",
			"content": "Go SDK"
		}
	},
	{
		"page": {
			"title": "Java SDK API Reference",
			"content": "Java SDK"
		}
	},
	{
		"page": {
			"title": "Next.JS SDK API Reference",
			"content": "Next.js SDK"
		}
	},
	{
		"page": {
			"title": "Node.JS SDK API Reference",
			"content": "Node.js SDK"
		}
	},
	{
		"page": {
			"title": "Python SDK API Reference",
			"content": "Python SDK"
		}
	}
]
